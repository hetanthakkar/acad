{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _assertThisInitialized from\"@babel/runtime/helpers/assertThisInitialized\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';export var ListAccordionGroupContext=React.createContext(null);var ListAccordionGroup=function(_React$Component){_inherits(ListAccordionGroup,_React$Component);var _super=_createSuper(ListAccordionGroup);function ListAccordionGroup(){var _this;_classCallCheck(this,ListAccordionGroup);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_defineProperty(_assertThisInitialized(_this),\"state\",{expandedId:undefined});_defineProperty(_assertThisInitialized(_this),\"onAccordionPress\",function(expandedId){_this.setState(function(_ref){var currentExpandedId=_ref.expandedId;return{expandedId:currentExpandedId===expandedId?undefined:expandedId};});});return _this;}_createClass(ListAccordionGroup,[{key:\"render\",value:function render(){var _this$props=this.props,expandedId=_this$props.expandedId,onAccordionPress=_this$props.onAccordionPress,children=_this$props.children;return React.createElement(ListAccordionGroupContext.Provider,{value:{expandedId:expandedId||this.state.expandedId,onAccordionPress:onAccordionPress||this.onAccordionPress}},children);}}]);return ListAccordionGroup;}(React.Component);_defineProperty(ListAccordionGroup,\"displayName\",'List.AccordionGroup');export default ListAccordionGroup;","map":{"version":3,"sources":["ListAccordionGroup.tsx"],"names":["ListAccordionGroupContext","React","ListAccordionGroup","expandedId","undefined","currentExpandedId","children","onAccordionPress"],"mappings":"uwCAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,CAsBA,MAAO,IAAMA,CAAAA,yBAAyB,CAAGC,KAAK,CAALA,aAAAA,CAAlC,IAAkCA,CAAlC,C,GA6CP,CAAA,kB,uHAA+D,6BAAA,kFAAA,IAAA,0CAAA,IAAA,wBAAA,6CAAA,IAAA,GAAA,eAAA,+BAAA,OAAA,CAG9C,CACbE,UAAU,CAAEC,SADC,CAH8C,CAAA,CAAA,eAAA,+BAAA,kBAAA,CAOzCD,SAAAA,UAAD,CAAiC,CAClD,MAAA,QAAA,CAAc,kBAAeE,CAAAA,iBAAf,MAAGF,UAAH,OAAwC,CACpDA,UAAU,CAAEE,iBAAiB,GAAjBA,UAAAA,CAAAA,SAAAA,CAA+CF,UADP,CAAxC,EAAd,EAR2D,CAAA,CAAA,CAAA,aAAA,C,sEAapD,iBAC4C,KAAnD,KADO,CACD,UADC,aACD,UADC,CACD,gBADC,aACD,gBADC,CAC+BG,QAD/B,aAC+BA,QAD/B,CAGP,MACE,CAAA,KAAA,CAAA,aAAA,CAAC,yBAAD,CAAA,QAAA,CAAA,CACE,KAAK,CAAE,CACLH,UAAU,CAAEA,UAAU,EAAI,KAAA,KAAA,CADrB,UAAA,CAELI,gBAAgB,CAAEA,gBAAgB,EAAI,KAAKA,gBAFtC,CADT,CAAA,CADF,QACE,CADF,CAUD,C,gCA1B8BN,KAAK,CAAtC,S,kBAAMC,kB,eACiB,qB,EA4BvB,cAAA,CAAA,kBAAA","sourcesContent":["import * as React from 'react';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onAccordionPress?: (expandedId: string | number) => void;\n  /**\n   * Id of the currently expanded list accordion\n   */\n  expandedId?: string | number;\n  /**\n   * React elements containing list accordions\n   */\n  children: React.ReactNode;\n};\n\nexport type ListAccordionGroupContextType = {\n  expandedId: string | number | undefined;\n  onAccordionPress: (expandedId: string | number) => void;\n} | null;\n\nexport const ListAccordionGroupContext = React.createContext<\n  ListAccordionGroupContextType\n>(null);\n\ntype State = {\n  expandedId: string | number | undefined;\n};\n\n/**\n * List.AccordionGroup allows to control a group of List Accordions. Id prop for List.Accordion is required in order to group to work.\n * List.AccordionGroup can be controlled or uncontrolled component. Example shows uncontrolled version.\n * At most one Accordion will be expanded in given time.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-group.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View, Text } from 'react-native';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.AccordionGroup>\n *     <List.Accordion title=\"Accordion 1\" id=\"1\">\n *       <List.Item title=\"Item 1\" />\n *     </List.Accordion>\n *     <List.Accordion title=\"Accordion 2\" id=\"2\">\n *       <List.Item title=\"Item 2\" />\n *     </List.Accordion>\n *     <View>\n *       <Text>\n *         List.Accordion can be wrapped because implementation uses React.Context.\n *       </Text>\n *       <List.Accordion title=\"Accordion 3\" id=\"3\">\n *         <List.Item title=\"Item 3\" />\n *       </List.Accordion>\n *     </View>\n *   </List.AccordionGroup>\n * );\n *\n * export default MyComponent;\n *```\n */\nclass ListAccordionGroup extends React.Component<Props, State> {\n  static displayName = 'List.AccordionGroup';\n\n  state: State = {\n    expandedId: undefined,\n  };\n\n  onAccordionPress = (expandedId: string | number) => {\n    this.setState(({ expandedId: currentExpandedId }) => ({\n      expandedId: currentExpandedId === expandedId ? undefined : expandedId,\n    }));\n  };\n\n  render() {\n    const { expandedId, onAccordionPress, children } = this.props;\n\n    return (\n      <ListAccordionGroupContext.Provider\n        value={{\n          expandedId: expandedId || this.state.expandedId, // component can be controlled or uncontrolled\n          onAccordionPress: onAccordionPress || this.onAccordionPress,\n        }}\n      >\n        {children}\n      </ListAccordionGroupContext.Provider>\n    );\n  }\n}\n\nexport default ListAccordionGroup;\n"]},"metadata":{},"sourceType":"module"}