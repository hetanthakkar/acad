{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import React from'react';import color from'color';import Text from\"react-native-web/dist/exports/Text\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Animated from\"react-native-web/dist/exports/Animated\";import{withTheme}from\"../../../core/theming\";import{AdornmentSide}from\"./enums\";var AFFIX_OFFSET=12;var AffixContext=React.createContext({textStyle:{fontFamily:'',color:''},topPosition:null,side:AdornmentSide.Left});export var AffixAdornment=function AffixAdornment(_ref){var affix=_ref.affix,side=_ref.side,textStyle=_ref.textStyle,topPosition=_ref.topPosition,onLayout=_ref.onLayout,visible=_ref.visible;return React.createElement(AffixContext.Provider,{value:{side:side,textStyle:textStyle,topPosition:topPosition,onLayout:onLayout,visible:visible}},affix);};var TextInputAffix=function TextInputAffix(_ref2){var text=_ref2.text,theme=_ref2.theme;var _React$useContext=React.useContext(AffixContext),textStyle=_React$useContext.textStyle,onLayout=_React$useContext.onLayout,topPosition=_React$useContext.topPosition,side=_React$useContext.side,visible=_React$useContext.visible;var textColor=color(theme.colors.text).alpha(theme.dark?0.7:0.54).rgb().string();var style=_defineProperty({top:topPosition},side,AFFIX_OFFSET);return React.createElement(Animated.View,{style:[styles.container,style,{opacity:(visible===null||visible===void 0?void 0:visible.interpolate({inputRange:[0,1],outputRange:[1,0]}))||1}],onLayout:onLayout},React.createElement(Text,{style:[{color:textColor},textStyle]},text));};TextInputAffix.displayName='TextInput.Affix';var styles=StyleSheet.create({container:{position:'absolute',justifyContent:'center',alignItems:'center'}});export default withTheme(TextInputAffix);export{TextInputAffix};","map":{"version":3,"sources":["Affix.tsx"],"names":["AFFIX_OFFSET","AffixContext","textStyle","fontFamily","color","topPosition","side","AdornmentSide","Left","AffixAdornment","visible","onLayout","TextInputAffix","theme","React","textColor","style","top","styles","opacity","inputRange","outputRange","container","position","justifyContent","alignItems","withTheme"],"mappings":"mEAAA,MAAA,CAAA,KAAA,KAAA,OAAA,CACA,MAAA,CAAA,KAAA,KAAA,OAAA,C,mLAUA,OAAA,SAAA,6BACA,OAAA,aAAA,eAEA,GAAMA,CAAAA,YAAY,CAAlB,EAAA,CAmBA,GAAMC,CAAAA,YAAY,CAAG,KAAK,CAAL,aAAA,CAAkC,CACrDC,SAAS,CAAE,CAAEC,UAAU,CAAZ,EAAA,CAAkBC,KAAK,CAAE,EAAzB,CAD0C,CAErDC,WAAW,CAF0C,IAAA,CAGrDC,IAAI,CAAEC,aAAa,CAACC,IAHiC,CAAlC,CAArB,CAMA,MAAO,IAAMC,CAAAA,cAKZ,CAAG,QALSA,CAAAA,cAKT,MAAgE,IAA/D,CAAA,KAA+D,MAA/D,KAA+D,CAA/D,IAA+D,MAA/D,IAA+D,CAA/D,SAA+D,MAA/D,SAA+D,CAA/D,WAA+D,MAA/D,WAA+D,CAA/D,QAA+D,MAA/D,QAA+D,CAAdC,OAAc,MAAdA,OAAc,CAClE,MACE,CAAA,KAAA,CAAA,aAAA,CAAC,YAAD,CAAA,QAAA,CAAA,CACE,KAAK,CAAE,CACLJ,IADK,CACLA,IADK,CAELJ,SAFK,CAELA,SAFK,CAGLG,WAHK,CAGLA,WAHK,CAILM,QAJK,CAILA,QAJK,CAKLD,OAAAA,CAAAA,OALK,CADT,CAAA,CADF,KACE,CADF,CANK,CAAA,CAqBP,GAAME,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,OAA4B,IAA3B,CAAA,IAA2B,OAA3B,IAA2B,CAAnBC,KAAmB,OAAnBA,KAAmB,uBACWC,KAAK,CAALA,UAAAA,CAA5D,YAA4DA,CADX,CAC3C,SAD2C,mBAC3C,SAD2C,CAC3C,QAD2C,mBAC3C,QAD2C,CAC3C,WAD2C,mBAC3C,WAD2C,CAC3C,IAD2C,mBAC3C,IAD2C,CACDJ,OADC,mBACDA,OADC,CAIjD,GAAMK,CAAAA,SAAS,CAAGX,KAAK,CAACS,KAAK,CAALA,MAAAA,CAANT,IAAK,CAALA,CAAAA,KAAAA,CACTS,KAAK,CAALA,IAAAA,CAAAA,GAAAA,CADST,IAAAA,EAAAA,GAAAA,GAAlB,MAAkBA,EAAlB,CAKA,GAAMY,CAAAA,KAAK,kBACTC,GAAG,CADS,WAAH,EAET,IAFS,CAEDjB,YAFC,CAAX,CAKA,MACE,CAAA,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,CAAA,CACE,KAAK,CAAE,CACLkB,MAAM,CADD,SAAA,CAAA,KAAA,CAGL,CACEC,OAAO,CACL,CAAA,OAAO,GAAP,IAAA,EAAA,OAAO,GAAA,IAAP,EAAA,CAAA,IAAA,EAAA,CAAA,OAAO,CAAP,WAAA,CAAqB,CACnBC,UAAU,CAAE,CAAA,CAAA,CADO,CACP,CADO,CAEnBC,WAAW,CAAE,CAAA,CAAA,CAAA,CAAA,CAFM,CAArB,CAAA,GAGM,CALV,CAHK,CADT,CAYE,QAAQ,CAAEV,QAZZ,CAAA,CAcE,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CAAM,KAAK,CAAE,CAAC,CAAEP,KAAK,CAAEW,SAAT,CAAD,CAAA,SAAA,CAAb,CAAA,CAfJ,IAeI,CAdF,CADF,CAdF,CAAA,CAiCAH,cAAc,CAAdA,WAAAA,CAAAA,iBAAAA,CAEA,GAAMM,CAAAA,MAAM,CAAG,UAAU,CAAV,MAAA,CAAkB,CAC/BI,SAAS,CAAE,CACTC,QAAQ,CADC,UAAA,CAETC,cAAc,CAFL,QAAA,CAGTC,UAAU,CAAE,QAHH,CADoB,CAAlB,CAAf,CAQA,cAAeC,CAAAA,SAAS,CAAxB,cAAwB,CAAxB,CAGA,OAAA,cAAA","sourcesContent":["import React from 'react';\nimport color from 'color';\nimport {\n  Text,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n  Animated,\n} from 'react-native';\n\nimport { withTheme } from '../../../core/theming';\nimport { AdornmentSide } from './enums';\n\nconst AFFIX_OFFSET = 12;\n\ntype Props = {\n  text: string;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype ContextState = {\n  topPosition: number | null;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  visible?: Animated.Value;\n  textStyle?: StyleProp<TextStyle>;\n  side: AdornmentSide;\n};\n\nconst AffixContext = React.createContext<ContextState>({\n  textStyle: { fontFamily: '', color: '' },\n  topPosition: null,\n  side: AdornmentSide.Left,\n});\n\nexport const AffixAdornment: React.FunctionComponent<\n  {\n    affix: React.ReactNode;\n    testID: string;\n  } & ContextState\n> = ({ affix, side, textStyle, topPosition, onLayout, visible }) => {\n  return (\n    <AffixContext.Provider\n      value={{\n        side,\n        textStyle,\n        topPosition,\n        onLayout,\n        visible,\n      }}\n    >\n      {affix}\n    </AffixContext.Provider>\n  );\n};\n\nconst TextInputAffix = ({ text, theme }: Props) => {\n  const { textStyle, onLayout, topPosition, side, visible } = React.useContext(\n    AffixContext\n  );\n  const textColor = color(theme.colors.text)\n    .alpha(theme.dark ? 0.7 : 0.54)\n    .rgb()\n    .string();\n\n  const style = {\n    top: topPosition,\n    [side]: AFFIX_OFFSET,\n  };\n\n  return (\n    <Animated.View\n      style={[\n        styles.container,\n        style,\n        {\n          opacity:\n            visible?.interpolate({\n              inputRange: [0, 1],\n              outputRange: [1, 0],\n            }) || 1,\n        },\n      ]}\n      onLayout={onLayout}\n    >\n      <Text style={[{ color: textColor }, textStyle]}>{text}</Text>\n    </Animated.View>\n  );\n};\nTextInputAffix.displayName = 'TextInput.Affix';\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(TextInputAffix);\n\n// @component-docs ignore-next-line\nexport { TextInputAffix };\n"]},"metadata":{},"sourceType":"module"}