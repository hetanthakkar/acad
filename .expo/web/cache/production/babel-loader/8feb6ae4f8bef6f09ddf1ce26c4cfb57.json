{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}var TextExtraction=function(){function TextExtraction(text,patterns){_classCallCheck(this,TextExtraction);this.text=text;this.patterns=patterns||[];}_createClass(TextExtraction,[{key:\"parse\",value:function parse(){var _this=this;var parsedTexts=[{children:this.text}];this.patterns.forEach(function(pattern){var newParts=[];var tmp=pattern.nonExhaustiveModeMaxMatchCount||0;var numberOfMatchesPermitted=Math.min(Math.max(Number.isInteger(tmp)?tmp:0,0)||Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY);var currentMatches=0;parsedTexts.forEach(function(parsedText){if(parsedText._matched){newParts.push(parsedText);return;}var parts=[];var textLeft=parsedText.children;var indexOfMatchedString=0;var matches;pattern.pattern.lastIndex=0;while(textLeft&&(matches=pattern.pattern.exec(textLeft))){var previousText=textLeft.substr(0,matches.index);indexOfMatchedString=matches.index;if(++currentMatches>numberOfMatchesPermitted){break;}parts.push({children:previousText});parts.push(_this.getMatchedPart(pattern,matches[0],matches,indexOfMatchedString));textLeft=textLeft.substr(matches.index+matches[0].length);indexOfMatchedString+=matches[0].length-1;pattern.pattern.lastIndex=0;}parts.push({children:textLeft});newParts.push.apply(newParts,parts);});parsedTexts=newParts;});parsedTexts.forEach(function(parsedText){return delete parsedText._matched;});return parsedTexts.filter(function(t){return!!t.children;});}},{key:\"getMatchedPart\",value:function getMatchedPart(matchedPattern,text,matches,index){var props={};Object.keys(matchedPattern).forEach(function(key){if(key==='pattern'||key==='renderText'||key==='nonExhaustiveModeMaxMatchCount'){return;}if(typeof matchedPattern[key]==='function'){props[key]=function(){return matchedPattern[key](text,index);};}else{props[key]=matchedPattern[key];}});var children=text;if(matchedPattern.renderText&&typeof matchedPattern.renderText==='function'){children=matchedPattern.renderText(text,matches);}return _objectSpread(_objectSpread({},props),{},{children:children,_matched:true});}}]);return TextExtraction;}();export default TextExtraction;","map":{"version":3,"sources":["C:/Users/codemaxx/Desktop/iBlood/node_modules/react-native-parsed-text/src/lib/TextExtraction.js"],"names":["TextExtraction","text","patterns","parsedTexts","children","forEach","pattern","newParts","tmp","nonExhaustiveModeMaxMatchCount","numberOfMatchesPermitted","Math","min","max","Number","isInteger","POSITIVE_INFINITY","currentMatches","parsedText","_matched","push","parts","textLeft","indexOfMatchedString","matches","lastIndex","exec","previousText","substr","index","getMatchedPart","length","filter","t","matchedPattern","props","Object","keys","key","renderText"],"mappings":"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","sourcesContent":["/**\n * If you want to provide a custom regexp, this is the configuration to use.\n * -- For historical reasons, all regexps are processed as if they have the global flag set.\n * -- Use the nonExhaustiveModeMaxMatchCount property to match a limited number of matches.\n * Note: any additional keys/props are permitted, and will be returned as-is!\n * @typedef {Object} CustomParseShape\n * @property {RegExp} pattern\n * @property {number} [nonExhaustiveModeMaxMatchCount] Enables \"non-exhaustive mode\", where you can limit how many matches are found. -- Must be a positive integer or Infinity matches are permitted\n * @property {Function} [renderText] arbitrary function to rewrite the matched string into something else\n * @property {Function} [onPress]\n * @property {Function} [onLongPress]\n */\n/**\n * Class to encapsulate the business logic of converting text into matches & props\n */\nclass TextExtraction {\n  /**\n   * @param {String} text - Text to be parsed\n   * @param {CustomParseShape[]} patterns - Patterns to be used when parsed,\n   *                                 any extra attributes, will be returned from parse()\n   */\n  constructor(text, patterns) {\n    this.text = text;\n    this.patterns = patterns || [];\n  }\n\n  /**\n   * Returns parts of the text with their own props\n   * @public\n   * @return {Object[]} - props for all the parts of the text\n   */\n  parse() {\n    let parsedTexts = [{ children: this.text }];\n    this.patterns.forEach((pattern) => {\n      let newParts = [];\n\n      const tmp = pattern.nonExhaustiveModeMaxMatchCount || 0;\n      const numberOfMatchesPermitted = Math.min(\n        Math.max(Number.isInteger(tmp) ? tmp : 0, 0) ||\n          Number.POSITIVE_INFINITY,\n        Number.POSITIVE_INFINITY,\n      );\n\n      let currentMatches = 0;\n\n      parsedTexts.forEach((parsedText) => {\n        // Only allow for now one parsing\n        if (parsedText._matched) {\n          newParts.push(parsedText);\n          return;\n        }\n\n        let parts = [];\n        let textLeft = parsedText.children;\n        let indexOfMatchedString = 0;\n\n        /** @type {RegExpExecArray} */\n        let matches;\n        // Global RegExps are stateful, this makes it start at 0 if reused\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\n        pattern.pattern.lastIndex = 0;\n        while (textLeft && (matches = pattern.pattern.exec(textLeft))) {\n          let previousText = textLeft.substr(0, matches.index);\n          indexOfMatchedString = matches.index;\n\n          if (++currentMatches > numberOfMatchesPermitted) {\n            // Abort if we've exhausted our number of matches\n            break;\n          }\n\n          parts.push({ children: previousText });\n\n          parts.push(\n            this.getMatchedPart(\n              pattern,\n              matches[0],\n              matches,\n              indexOfMatchedString,\n            ),\n          );\n\n          textLeft = textLeft.substr(matches.index + matches[0].length);\n          indexOfMatchedString += matches[0].length - 1;\n          // Global RegExps are stateful, this makes it operate on the \"remainder\" of the string\n          pattern.pattern.lastIndex = 0;\n        }\n\n        parts.push({ children: textLeft });\n\n        newParts.push(...parts);\n      });\n\n      parsedTexts = newParts;\n    });\n\n    // Remove _matched key.\n    parsedTexts.forEach((parsedText) => delete parsedText._matched);\n\n    return parsedTexts.filter((t) => !!t.children);\n  }\n\n  // private\n\n  /**\n   * @protected\n   * @param {ParseShape} matchedPattern - pattern configuration of the pattern used to match the text\n   * @param {String} text - Text matching the pattern\n   * @param {String[]} matches - Result of the RegExp.exec\n   * @param {Integer} index - Index of the matched string in the whole string\n   * @return {Object} props for the matched text\n   */\n  getMatchedPart(matchedPattern, text, matches, index) {\n    let props = {};\n\n    Object.keys(matchedPattern).forEach((key) => {\n      if (\n        key === 'pattern' ||\n        key === 'renderText' ||\n        key === 'nonExhaustiveModeMaxMatchCount'\n      ) {\n        return;\n      }\n\n      if (typeof matchedPattern[key] === 'function') {\n        // Support onPress / onLongPress functions\n        props[key] = () => matchedPattern[key](text, index);\n      } else {\n        // Set a prop with an arbitrary name to the value in the match-config\n        props[key] = matchedPattern[key];\n      }\n    });\n\n    let children = text;\n    if (\n      matchedPattern.renderText &&\n      typeof matchedPattern.renderText === 'function'\n    ) {\n      children = matchedPattern.renderText(text, matches);\n    }\n\n    return {\n      ...props,\n      children: children,\n      _matched: true,\n    };\n  }\n}\n\nexport default TextExtraction;\n"]},"metadata":{},"sourceType":"module"}