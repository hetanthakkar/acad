{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import ToggleButton from\"./ToggleButton\";var ToggleButtonRow=function(_React$Component){_inherits(ToggleButtonRow,_React$Component);var _super=_createSuper(ToggleButtonRow);function ToggleButtonRow(){_classCallCheck(this,ToggleButtonRow);return _super.apply(this,arguments);}_createClass(ToggleButtonRow,[{key:\"render\",value:function render(){var _this$props=this.props,value=_this$props.value,onValueChange=_this$props.onValueChange,children=_this$props.children,style=_this$props.style;var count=React.Children.count(children);return React.createElement(ToggleButton.Group,{value:value,onValueChange:onValueChange},React.createElement(View,{style:[styles.row,style]},React.Children.map(children,function(child,i){if(child&&child.type===ToggleButton){return React.cloneElement(child,{style:[styles.button,i===0?styles.first:i===count-1?styles.last:styles.middle,child.props.style]});}return child;})));}}]);return ToggleButtonRow;}(React.Component);_defineProperty(ToggleButtonRow,\"displayName\",'ToggleButton.Row');var styles=StyleSheet.create({row:{flexDirection:'row'},button:{borderWidth:StyleSheet.hairlineWidth},first:{borderTopRightRadius:0,borderBottomRightRadius:0},middle:{borderRadius:0,borderLeftWidth:0},last:{borderLeftWidth:0,borderTopLeftRadius:0,borderBottomLeftRadius:0}});export default ToggleButtonRow;","map":{"version":3,"sources":["ToggleButtonRow.tsx"],"names":["ToggleButtonRow","React","style","count","onValueChange","styles","child","i","row","flexDirection","button","borderWidth","StyleSheet","hairlineWidth","first","borderTopRightRadius","borderBottomRightRadius","middle","borderRadius","borderLeftWidth","last","borderTopLeftRadius","borderBottomLeftRadius"],"mappings":"srCAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,C,sHAEA,MAAA,CAAA,YAAA,sB,GA+CA,CAAA,e,0RAGW,iBAC2C,KAAlD,KADO,CACD,KADC,aACD,KADC,CACD,aADC,aACD,aADC,CACD,QADC,aACD,QADC,CACiCE,KADjC,aACiCA,KADjC,CAEP,GAAMC,CAAAA,KAAK,CAAGF,KAAK,CAALA,QAAAA,CAAAA,KAAAA,CAAd,QAAcA,CAAd,CAEA,MACE,CAAA,KAAA,CAAA,aAAA,CAAC,YAAD,CAAA,KAAA,CAAA,CAAoB,KAAK,CAAzB,KAAA,CAAkC,aAAa,CAAEG,aAAjD,CAAA,CACE,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CAAM,KAAK,CAAE,CAACC,MAAM,CAAP,GAAA,CAAA,KAAA,CAAb,CAAA,CACG,KAAK,CAAL,QAAA,CAAA,GAAA,CAAA,QAAA,CAA6B,SAAA,KAAA,CAAA,CAAA,CAAc,CAE1C,GAAIC,KAAK,EAAIA,KAAK,CAALA,IAAAA,GAAb,YAAA,CAA0C,CAExC,MAAO,CAAA,KAAK,CAAL,YAAA,CAAA,KAAA,CAA0B,CAC/BJ,KAAK,CAAE,CACLG,MAAM,CADD,MAAA,CAELE,CAAC,GAADA,CAAAA,CACIF,MAAM,CADVE,KAAAA,CAEIA,CAAC,GAAKJ,KAAK,CAAXI,CAAAA,CACAF,MAAM,CADNE,IAAAA,CAEAF,MAAM,CANL,MAAA,CAQLC,KAAK,CAALA,KAAAA,CARK,KAAA,CADwB,CAA1B,CAAP,CAYD,CAED,MAAA,CAAA,KAAA,CArBR,CAGO,CADH,CADF,CADF,CA0BD,C,6BAjC2BL,KAAK,CAAnC,S,kBAAMD,e,eACiB,kB,EAmCvB,GAAMK,CAAAA,MAAM,CAAG,UAAU,CAAV,MAAA,CAAkB,CAC/BG,GAAG,CAAE,CACHC,aAAa,CAAE,KADZ,CAD0B,CAI/BC,MAAM,CAAE,CACNC,WAAW,CAAEC,UAAU,CAACC,aADlB,CAJuB,CAQ/BC,KAAK,CAAE,CACLC,oBAAoB,CADf,CAAA,CAELC,uBAAuB,CAAE,CAFpB,CARwB,CAa/BC,MAAM,CAAE,CACNC,YAAY,CADN,CAAA,CAENC,eAAe,CAAE,CAFX,CAbuB,CAkB/BC,IAAI,CAAE,CACJD,eAAe,CADX,CAAA,CAEJE,mBAAmB,CAFf,CAAA,CAGJC,sBAAsB,CAAE,CAHpB,CAlByB,CAAlB,CAAf,CAyBA,cAAA,CAAA,eAAA","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, StyleProp, ViewStyle } from 'react-native';\nimport ToggleButton from './ToggleButton';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onValueChange: (value: string) => void;\n  /**\n   * Value of the currently selected toggle button.\n   */\n  value: string;\n  /**\n   * React elements containing toggle buttons.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * Toggle button row renders a group of toggle buttons in a row.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/toggle-button-row.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('left');\n *\n *   return (\n *     <ToggleButton.Row onValueChange={value => setValue(value)} value={value}>\n *       <ToggleButton icon=\"format-align-left\" value=\"left\" />\n *       <ToggleButton icon=\"format-align-right\" value=\"right\" />\n *     </ToggleButton.Row>\n *   );\n * };\n *\n * export default MyComponent;\n *\n *```\n */\nclass ToggleButtonRow extends React.Component<Props> {\n  static displayName = 'ToggleButton.Row';\n\n  render() {\n    const { value, onValueChange, children, style } = this.props;\n    const count = React.Children.count(children);\n\n    return (\n      <ToggleButton.Group value={value} onValueChange={onValueChange}>\n        <View style={[styles.row, style]}>\n          {React.Children.map(children, (child, i) => {\n            // @ts-ignore\n            if (child && child.type === ToggleButton) {\n              // @ts-ignore\n              return React.cloneElement(child, {\n                style: [\n                  styles.button,\n                  i === 0\n                    ? styles.first\n                    : i === count - 1\n                    ? styles.last\n                    : styles.middle,\n                  // @ts-ignore\n                  child.props.style,\n                ],\n              });\n            }\n\n            return child;\n          })}\n        </View>\n      </ToggleButton.Group>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n  },\n  button: {\n    borderWidth: StyleSheet.hairlineWidth,\n  },\n\n  first: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n  },\n\n  middle: {\n    borderRadius: 0,\n    borderLeftWidth: 0,\n  },\n\n  last: {\n    borderLeftWidth: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n  },\n});\n\nexport default ToggleButtonRow;\n"]},"metadata":{},"sourceType":"module"}