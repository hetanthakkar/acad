{"ast":null,"code":"function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}import*as React from'react';import View from\"react-native-web/dist/exports/View\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import color from'color';import TouchableRipple from\"./TouchableRipple\";import Icon from\"./Icon\";import CrossFadeIcon from\"./CrossFadeIcon\";import{withTheme}from\"../core/theming\";var IconButton=function IconButton(_ref){var icon=_ref.icon,customColor=_ref.color,_ref$size=_ref.size,size=_ref$size===void 0?24:_ref$size,accessibilityLabel=_ref.accessibilityLabel,disabled=_ref.disabled,onPress=_ref.onPress,_ref$animated=_ref.animated,animated=_ref$animated===void 0?false:_ref$animated,theme=_ref.theme,style=_ref.style,rest=_objectWithoutProperties(_ref,[\"icon\",\"color\",\"size\",\"accessibilityLabel\",\"disabled\",\"onPress\",\"animated\",\"theme\",\"style\"]);var iconColor=typeof customColor!=='undefined'?customColor:theme.colors.text;var rippleColor=color(iconColor).alpha(0.32).rgb().string();var IconComponent=animated?CrossFadeIcon:Icon;var buttonSize=size*1.5;return React.createElement(TouchableRipple,_extends({borderless:true,centered:true,onPress:onPress,rippleColor:rippleColor,style:[styles.container,{width:buttonSize,height:buttonSize,borderRadius:buttonSize/2},disabled&&styles.disabled,style],accessibilityLabel:accessibilityLabel,accessibilityTraits:disabled?['button','disabled']:'button',accessibilityComponentType:\"button\",accessibilityRole:\"button\",accessibilityState:{disabled:disabled},disabled:disabled,hitSlop:TouchableRipple.supported?{top:10,left:10,bottom:10,right:10}:{top:6,left:6,bottom:6,right:6}},rest),React.createElement(View,null,React.createElement(IconComponent,{color:iconColor,source:icon,size:size})));};var styles=StyleSheet.create({container:{alignItems:'center',justifyContent:'center',overflow:'hidden',margin:6},disabled:{opacity:0.32}});export default withTheme(IconButton);","map":{"version":3,"sources":["IconButton.tsx"],"names":["IconButton","color","size","animated","style","rest","iconColor","theme","rippleColor","IconComponent","buttonSize","styles","width","height","borderRadius","disabled","TouchableRipple","top","left","bottom","right","container","alignItems","justifyContent","overflow","margin","opacity","withTheme"],"mappings":"+9BAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,C,sHASA,MAAA,CAAA,KAAA,KAAA,OAAA,CAEA,MAAA,CAAA,eAAA,yBACA,MAAA,CAAA,IAAA,cACA,MAAA,CAAA,aAAA,uBACA,OAAA,SAAA,uBAyEA,GAAMA,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAAA,IAAA,CAWN,IAXO,CAAA,IAWP,CAAA,IAAA,CAXO,IAWP,CAXO,WAWP,CAAA,IAAA,CATXC,KASW,WAAA,IAAA,CARXC,IAQW,CARXA,IAQW,oBAXO,EAWP,WAXO,kBAWP,CAAA,IAAA,CAXO,kBAWP,CAXO,QAWP,CAAA,IAAA,CAXO,QAWP,CAXO,OAWP,CAAA,IAAA,CAXO,OAWP,eAAA,IAAA,CAJXC,QAIW,CAJXA,QAIW,wBAXO,KAWP,eAXO,KAWP,CAAA,IAAA,CAXO,KAWP,CAFXC,KAEW,CAAA,IAAA,CAFXA,KAEW,CADRC,IACQ,CAAA,wBAAA,CAAA,IAAA,CAAA,CAAA,MAAA,CAAA,OAAA,CAAA,MAAA,CAAA,oBAAA,CAAA,UAAA,CAAA,SAAA,CAAA,UAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA,CACX,GAAMC,CAAAA,SAAS,CACb,MAAA,CAAA,WAAA,GAAA,WAAA,CAAA,WAAA,CAAmDC,KAAK,CAALA,MAAAA,CADrD,IAAA,CAEA,GAAMC,CAAAA,WAAW,CAAGP,KAAK,CAALA,SAAK,CAALA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAApB,MAAoBA,EAApB,CACA,GAAMQ,CAAAA,aAAa,CAAGN,QAAQ,CAAA,aAAA,CAA9B,IAAA,CACA,GAAMO,CAAAA,UAAU,CAAGR,IAAI,CAAvB,GAAA,CACA,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,eAAA,CAAA,QAAA,CAAA,CACE,UAAU,CADZ,IAAA,CAEE,QAAQ,CAFV,IAAA,CAGE,OAAO,CAHT,OAAA,CAIE,WAAW,CAJb,WAAA,CAKE,KAAK,CAAE,CACLS,MAAM,CADD,SAAA,CAEL,CAAEC,KAAK,CAAP,UAAA,CAAqBC,MAAM,CAA3B,UAAA,CAAyCC,YAAY,CAAEJ,UAAU,CAAG,CAApE,CAFK,CAGLK,QAAQ,EAAIJ,MAAM,CAHb,QAAA,CALT,KAKS,CALT,CAWE,kBAAkB,CAXpB,kBAAA,CAYE,mBAAmB,CAAEI,QAAQ,CAAG,CAAA,QAAA,CAAH,UAAG,CAAH,CAZ/B,QAAA,CAaE,0BAA0B,CAb5B,QAAA,CAcE,iBAAiB,CAdnB,QAAA,CAeE,kBAAkB,CAAE,CAAEA,QAAAA,CAAAA,QAAF,CAftB,CAgBE,QAAQ,CAhBV,QAAA,CAiBE,OAAO,CAELC,eAAe,CAAfA,SAAAA,CACI,CAAEC,GAAG,CAAL,EAAA,CAAWC,IAAI,CAAf,EAAA,CAAqBC,MAAM,CAA3B,EAAA,CAAiCC,KAAK,CAAE,EAAxC,CADJJ,CAEI,CAAEC,GAAG,CAAL,CAAA,CAAUC,IAAI,CAAd,CAAA,CAAmBC,MAAM,CAAzB,CAAA,CAA8BC,KAAK,CAAE,CAArC,CArBR,CAAA,CAAA,IAAA,CAAA,CAyBE,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,IAAA,CACE,KAAA,CAAA,aAAA,CAAA,aAAA,CAAA,CAAe,KAAK,CAApB,SAAA,CAAiC,MAAM,CAAvC,IAAA,CAA+C,IAAI,CAAElB,IAArD,CAAA,CADF,CAzBF,CADF,CAjBF,CAAA,CAkDA,GAAMS,CAAAA,MAAM,CAAG,UAAU,CAAV,MAAA,CAAkB,CAE/BU,SAAS,CAAE,CACTC,UAAU,CADD,QAAA,CAETC,cAAc,CAFL,QAAA,CAGTC,QAAQ,CAHC,QAAA,CAITC,MAAM,CAAE,CAJC,CAFoB,CAQ/BV,QAAQ,CAAE,CACRW,OAAO,CAAE,IADD,CARqB,CAAlB,CAAf,CAaA,cAAeC,CAAAA,SAAS,CAAxB,UAAwB,CAAxB","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  GestureResponderEvent,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport color from 'color';\n\nimport TouchableRipple from './TouchableRipple';\nimport Icon, { IconSource } from './Icon';\nimport CrossFadeIcon from './CrossFadeIcon';\nimport { withTheme } from '../core/theming';\n\nimport type { $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Icon to display.\n   */\n  icon: IconSource;\n  /**\n   * Color of the icon.\n   */\n  color?: string;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<TouchableWithoutFeedback>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * An icon button is a button which displays only an icon without a label.\n * By default button has 150% size of the icon.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/icon-button-1.png\" />\n *     <figcaption>Icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/icon-button-2.png\" />\n *     <figcaption>Pressed icon button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { IconButton, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <IconButton\n *     icon=\"camera\"\n *     color={Colors.red500}\n *     size={20}\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst IconButton = ({\n  icon,\n  color: customColor,\n  size = 24,\n  accessibilityLabel,\n  disabled,\n  onPress,\n  animated = false,\n  theme,\n  style,\n  ...rest\n}: Props) => {\n  const iconColor =\n    typeof customColor !== 'undefined' ? customColor : theme.colors.text;\n  const rippleColor = color(iconColor).alpha(0.32).rgb().string();\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n  const buttonSize = size * 1.5;\n  return (\n    <TouchableRipple\n      borderless\n      centered\n      onPress={onPress}\n      rippleColor={rippleColor}\n      style={[\n        styles.container,\n        { width: buttonSize, height: buttonSize, borderRadius: buttonSize / 2 },\n        disabled && styles.disabled,\n        style,\n      ]}\n      accessibilityLabel={accessibilityLabel}\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"button\"\n      accessibilityState={{ disabled }}\n      disabled={disabled}\n      hitSlop={\n        // @ts-ignore - this should be fixed in react-theme-providersince withTheme() is not forwarding static property types\n        TouchableRipple.supported\n          ? { top: 10, left: 10, bottom: 10, right: 10 }\n          : { top: 6, left: 6, bottom: 6, right: 6 }\n      }\n      {...rest}\n    >\n      <View>\n        <IconComponent color={iconColor} source={icon} size={size} />\n      </View>\n    </TouchableRipple>\n  );\n};\n\nconst styles = StyleSheet.create({\n  // @ts-ignore - this should be fixed in react-theme-providersince withTheme() is not forwarding static property types\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    margin: 6,\n  },\n  disabled: {\n    opacity: 0.32,\n  },\n});\n\nexport default withTheme(IconButton);\n"]},"metadata":{},"sourceType":"module"}