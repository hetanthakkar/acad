{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import color from'color';import*as React from'react';import View from\"react-native-web/dist/exports/View\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Text from\"../Typography/Text\";import Icon from\"../Icon\";import TouchableRipple from\"../TouchableRipple\";import{withTheme}from\"../../core/theming\";var DrawerItem=function(_React$Component){_inherits(DrawerItem,_React$Component);var _super=_createSuper(DrawerItem);function DrawerItem(){_classCallCheck(this,DrawerItem);return _super.apply(this,arguments);}_createClass(DrawerItem,[{key:\"render\",value:function render(){var _this$props=this.props,icon=_this$props.icon,label=_this$props.label,active=_this$props.active,theme=_this$props.theme,style=_this$props.style,onPress=_this$props.onPress,accessibilityLabel=_this$props.accessibilityLabel,rest=_objectWithoutProperties(_this$props,[\"icon\",\"label\",\"active\",\"theme\",\"style\",\"onPress\",\"accessibilityLabel\"]);var colors=theme.colors,roundness=theme.roundness;var backgroundColor=active?color(colors.primary).alpha(0.12).rgb().string():'transparent';var contentColor=active?colors.primary:color(colors.text).alpha(0.68).rgb().string();var font=theme.fonts.medium;var labelMargin=icon?32:0;return React.createElement(View,_extends({},rest,{style:[styles.container,{backgroundColor:backgroundColor,borderRadius:roundness},style]}),React.createElement(TouchableRipple,{borderless:true,delayPressIn:0,onPress:onPress,style:{borderRadius:roundness},accessibilityTraits:active?['button','selected']:'button',accessibilityComponentType:\"button\",accessibilityRole:\"button\",accessibilityState:{selected:active},accessibilityLabel:accessibilityLabel},React.createElement(View,{style:styles.wrapper},icon?React.createElement(Icon,{source:icon,size:24,color:contentColor}):null,React.createElement(Text,{numberOfLines:1,style:[styles.label,_objectSpread(_objectSpread({color:contentColor},font),{},{marginLeft:labelMargin})]},label))));}}]);return DrawerItem;}(React.Component);_defineProperty(DrawerItem,\"displayName\",'Drawer.Item');var styles=StyleSheet.create({container:{marginHorizontal:10,marginVertical:4},wrapper:{flexDirection:'row',alignItems:'center',padding:8},label:{marginRight:32}});export default withTheme(DrawerItem);","map":{"version":3,"sources":["DrawerItem.tsx"],"names":["DrawerItem","React","accessibilityLabel","roundness","backgroundColor","active","color","colors","contentColor","font","theme","labelMargin","icon","styles","borderRadius","selected","wrapper","marginLeft","container","marginHorizontal","marginVertical","flexDirection","alignItems","padding","label","marginRight","withTheme"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport Text from '../Typography/Text';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * The label text of the item.\n   */\n  label: string;\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  active?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/drawer-item.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Drawer } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *    <Drawer.Item\n *      style={{ backgroundColor: '#64ffda' }}\n *      icon=\"star\"\n *      label=\"First Item\"\n *    />\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass DrawerItem extends React.Component<Props> {\n  static displayName = 'Drawer.Item';\n\n  render() {\n    const {\n      icon,\n      label,\n      active,\n      theme,\n      style,\n      onPress,\n      accessibilityLabel,\n      ...rest\n    } = this.props;\n    const { colors, roundness } = theme;\n    const backgroundColor = active\n      ? color(colors.primary).alpha(0.12).rgb().string()\n      : 'transparent';\n    const contentColor = active\n      ? colors.primary\n      : color(colors.text).alpha(0.68).rgb().string();\n    const font = theme.fonts.medium;\n    const labelMargin = icon ? 32 : 0;\n\n    return (\n      <View\n        {...rest}\n        style={[\n          styles.container,\n          { backgroundColor, borderRadius: roundness },\n          style,\n        ]}\n      >\n        <TouchableRipple\n          borderless\n          delayPressIn={0}\n          onPress={onPress}\n          style={{ borderRadius: roundness }}\n          accessibilityTraits={active ? ['button', 'selected'] : 'button'}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityState={{ selected: active }}\n          accessibilityLabel={accessibilityLabel}\n        >\n          <View style={styles.wrapper}>\n            {icon ? (\n              <Icon source={icon} size={24} color={contentColor} />\n            ) : null}\n            <Text\n              numberOfLines={1}\n              style={[\n                styles.label,\n                {\n                  color: contentColor,\n                  ...font,\n                  marginLeft: labelMargin,\n                },\n              ]}\n            >\n              {label}\n            </Text>\n          </View>\n        </TouchableRipple>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  label: {\n    marginRight: 32,\n  },\n});\n\nexport default withTheme(DrawerItem);\n"]},"metadata":{},"sourceType":"module"}