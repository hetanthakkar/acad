{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import{withTheme}from\"../../core/theming\";import color from'color';import IconButton from\"../IconButton\";import ToggleButtonGroup,{ToggleButtonGroupContext}from\"./ToggleButtonGroup\";import ToggleButtonRow from\"./ToggleButtonRow\";import{black,white}from\"../../styles/colors\";var ToggleButton=function(_React$Component){_inherits(ToggleButton,_React$Component);var _super=_createSuper(ToggleButton);function ToggleButton(){_classCallCheck(this,ToggleButton);return _super.apply(this,arguments);}_createClass(ToggleButton,[{key:\"render\",value:function render(){var _this$props=this.props,icon=_this$props.icon,size=_this$props.size,theme=_this$props.theme,accessibilityLabel=_this$props.accessibilityLabel,disabled=_this$props.disabled,style=_this$props.style,value=_this$props.value,status=_this$props.status,_onPress=_this$props.onPress,rest=_objectWithoutProperties(_this$props,[\"icon\",\"size\",\"theme\",\"accessibilityLabel\",\"disabled\",\"style\",\"value\",\"status\",\"onPress\"]);var borderRadius=theme.roundness;return React.createElement(ToggleButtonGroupContext.Consumer,null,function(context){var backgroundColor;var checked=context&&context.value===value||status==='checked';if(checked){backgroundColor=theme.dark?'rgba(255, 255, 255, .12)':'rgba(0, 0, 0, .08)';}else{backgroundColor='transparent';}return React.createElement(IconButton,_extends({borderless:false,icon:icon,onPress:function onPress(e){if(_onPress){_onPress(e);}if(context){context.onValueChange(!checked?value:null);}},size:size,accessibilityLabel:accessibilityLabel,disabled:disabled,style:[styles.content,{backgroundColor:backgroundColor,borderRadius:borderRadius,borderColor:color(theme.dark?white:black).alpha(0.29).rgb().string()},style]},rest));});}}]);return ToggleButton;}(React.Component);_defineProperty(ToggleButton,\"Group\",ToggleButtonGroup);_defineProperty(ToggleButton,\"Row\",ToggleButtonRow);var styles=StyleSheet.create({content:{width:42,height:42,margin:0}});export default withTheme(ToggleButton);","map":{"version":3,"sources":["ToggleButton.tsx"],"names":["ToggleButton","React","ToggleButtonGroup","ToggleButtonRow","onPress","borderRadius","theme","context","checked","status","backgroundColor","e","styles","borderColor","color","content","width","height","margin","withTheme"],"mappings":"qpEAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,C,iEAOA,OAAA,SAAA,0BACA,MAAA,CAAA,KAAA,KAAA,OAAA,CACA,MAAA,CAAA,UAAA,qBACA,MAAA,CAAA,iBAAA,EAAA,wBAAA,2BAGA,MAAA,CAAA,eAAA,yBACA,OAAA,KAAA,CAAA,KAAA,2B,GA6EA,CAAA,Y,2QAOW,CACP,GAAA,CAAA,WAAA,CAWI,KAXJ,KAAA,CAAM,IAAN,CAAA,WAAA,CAAM,IAAN,CAAM,IAAN,CAAA,WAAA,CAAM,IAAN,CAAM,KAAN,CAAA,WAAA,CAAM,KAAN,CAAM,kBAAN,CAAA,WAAA,CAAM,kBAAN,CAAM,QAAN,CAAA,WAAA,CAAM,QAAN,CAAM,KAAN,CAAA,WAAA,CAAM,KAAN,CAAM,KAAN,CAAA,WAAA,CAAM,KAAN,CAAM,MAAN,CAAA,WAAA,CAAM,MAAN,CASEI,QATF,CAAA,WAAA,CASEA,OATF,CAAA,IAAA,CAAA,wBAAA,CAAA,WAAA,CAAA,CAAA,MAAA,CAAA,MAAA,CAAA,OAAA,CAAA,oBAAA,CAAA,UAAA,CAAA,OAAA,CAAA,OAAA,CAAA,QAAA,CAAA,SAAA,CAAA,CAAA,CAYA,GAAMC,CAAAA,YAAY,CAAGC,KAAK,CAA1B,SAAA,CAEA,MACE,CAAA,KAAA,CAAA,aAAA,CAAC,wBAAD,CAAA,QAAA,CAAA,IAAA,CACIC,SAAAA,OAAD,CAAgE,CAC/D,GAAA,CAAA,eAAA,CAEA,GAAMC,CAAAA,OAAuB,CAC1BD,OAAO,EAAIA,OAAO,CAAPA,KAAAA,GAAZ,KAACA,EAAuCE,MAAM,GADhD,SAAA,CAGA,GAAA,OAAA,CAAa,CACXC,eAAe,CAAGJ,KAAK,CAALA,IAAAA,CAAAA,0BAAAA,CAAlBI,oBAAAA,CADF,CAAA,IAIO,CACLA,eAAe,CAAfA,aAAAA,CACD,CAED,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,UAAA,CAAA,QAAA,CAAA,CACE,UAAU,CADZ,KAAA,CAEE,IAAI,CAFN,IAAA,CAGE,OAAO,CAAGC,iBAAAA,CAAD,CAAwC,CAC/C,GAAA,QAAA,CAAa,CACXP,QAAO,CAAPA,CAAO,CAAPA,CACD,CAED,GAAA,OAAA,CAAa,CACXG,OAAO,CAAPA,aAAAA,CAAsB,CAAA,OAAA,CAAA,KAAA,CAAtBA,IAAAA,EACD,CAVL,CAAA,CAYE,IAAI,CAZN,IAAA,CAaE,kBAAkB,CAbpB,kBAAA,CAcE,QAAQ,CAdV,QAAA,CAeE,KAAK,CAAE,CACLK,MAAM,CADD,OAAA,CAEL,CACEF,eADF,CACEA,eADF,CAEEL,YAFF,CAEEA,YAFF,CAGEQ,WAAW,CAAEC,KAAK,CAACR,KAAK,CAALA,IAAAA,CAAAA,KAAAA,CAANQ,KAAK,CAALA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAAAA,MAAAA,EAHf,CAFK,CAAA,KAAA,CAfT,CAAA,CADF,IACE,CAAA,CADF,CAhBN,CACE,CADF,CAkDD,C,0BAxEwBb,KAAK,CAAhC,S,kBAAMD,Y,SAEWE,iB,kBAFXF,Y,OAKSG,e,EAsEf,GAAMS,CAAAA,MAAM,CAAG,UAAU,CAAV,MAAA,CAAkB,CAC/BG,OAAO,CAAE,CACPC,KAAK,CADE,EAAA,CAEPC,MAAM,CAFC,EAAA,CAGPC,MAAM,CAAE,CAHD,CADsB,CAAlB,CAAf,CAQA,cAAeC,CAAAA,SAAS,CAAxB,YAAwB,CAAxB","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  GestureResponderEvent,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport color from 'color';\nimport IconButton from '../IconButton';\nimport ToggleButtonGroup, {\n  ToggleButtonGroupContext,\n} from './ToggleButtonGroup';\nimport ToggleButtonRow from './ToggleButtonRow';\nimport { black, white } from '../../styles/colors';\nimport type { IconSource } from '../Icon';\n\ntype Props = {\n  /**\n   * Icon to display for the `ToggleButton`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Custom text color for button.\n   */\n  color?: string;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `ToggleButton`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (value?: GestureResponderEvent | string) => void;\n  /**\n   * Value of button.\n   */\n  value?: string;\n  /**\n   * Status of button.\n   */\n  status?: 'checked' | 'unchecked';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const ToggleButtonExample = () => {\n *   const [status, setStatus] = React.useState('checked');\n *\n *   const onButtonToggle = value => {\n *     setStatus(status === 'checked' ? 'unchecked' : 'checked');\n *   };\n *\n *   return (\n *     <ToggleButton\n *       icon=\"bluetooth\"\n *       value=\"bluetooth\"\n *       status={status}\n *       onPress={onButtonToggle}\n *     />\n *   );\n * };\n *\n * export default ToggleButtonExample;\n *\n * ```\n */\nclass ToggleButton extends React.Component<Props> {\n  // @component ./ToggleButtonGroup.tsx\n  static Group = ToggleButtonGroup;\n\n  // @component ./ToggleButtonRow.tsx\n  static Row = ToggleButtonRow;\n\n  render() {\n    const {\n      icon,\n      size,\n      theme,\n      accessibilityLabel,\n      disabled,\n      style,\n      value,\n      status,\n      onPress,\n      ...rest\n    } = this.props;\n    const borderRadius = theme.roundness;\n\n    return (\n      <ToggleButtonGroupContext.Consumer>\n        {(context: { value: string; onValueChange: Function } | null) => {\n          let backgroundColor;\n\n          const checked: boolean | null =\n            (context && context.value === value) || status === 'checked';\n\n          if (checked) {\n            backgroundColor = theme.dark\n              ? 'rgba(255, 255, 255, .12)'\n              : 'rgba(0, 0, 0, .08)';\n          } else {\n            backgroundColor = 'transparent';\n          }\n\n          return (\n            <IconButton\n              borderless={false}\n              icon={icon}\n              onPress={(e?: GestureResponderEvent | string) => {\n                if (onPress) {\n                  onPress(e);\n                }\n\n                if (context) {\n                  context.onValueChange(!checked ? value : null);\n                }\n              }}\n              size={size}\n              accessibilityLabel={accessibilityLabel}\n              disabled={disabled}\n              style={[\n                styles.content,\n                {\n                  backgroundColor,\n                  borderRadius,\n                  borderColor: color(theme.dark ? white : black)\n                    .alpha(0.29)\n                    .rgb()\n                    .string(),\n                },\n                style,\n              ]}\n              {...rest}\n            />\n          );\n        }}\n      </ToggleButtonGroupContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0,\n  },\n});\n\nexport default withTheme(ToggleButton);\n"]},"metadata":{},"sourceType":"module"}