{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';import View from\"react-native-web/dist/exports/View\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";var DialogScrollArea=function(_React$Component){_inherits(DialogScrollArea,_React$Component);var _super=_createSuper(DialogScrollArea);function DialogScrollArea(){_classCallCheck(this,DialogScrollArea);return _super.apply(this,arguments);}_createClass(DialogScrollArea,[{key:\"render\",value:function render(){return React.createElement(View,_extends({},this.props,{style:[styles.container,this.props.style]}),this.props.children);}}]);return DialogScrollArea;}(React.Component);_defineProperty(DialogScrollArea,\"displayName\",'Dialog.ScrollArea');var styles=StyleSheet.create({container:{borderColor:'rgba(0, 0, 0, .12)',borderTopWidth:StyleSheet.hairlineWidth,borderBottomWidth:StyleSheet.hairlineWidth,paddingHorizontal:24,flexGrow:1,flexShrink:1}});export default DialogScrollArea;","map":{"version":3,"sources":["DialogScrollArea.tsx"],"names":["DialogScrollArea","React","styles","container","borderColor","borderTopWidth","StyleSheet","borderBottomWidth","paddingHorizontal","flexGrow","flexShrink"],"mappings":"68CAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,C,yHAgDA,CAAA,gB,+RAGW,CACP,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,QAAA,CAAA,EAAA,CAAU,KAAV,KAAA,CAAA,CAAsB,KAAK,CAAE,CAACE,MAAM,CAAP,SAAA,CAAmB,KAAA,KAAA,CAAnB,KAAA,CAA7B,CAAA,CAAA,CACG,KAAA,KAAA,CAFL,QACE,CADF,CAKD,C,8BAT4BD,KAAK,CAApC,S,kBAAMD,gB,eACiB,mB,EAWvB,GAAME,CAAAA,MAAM,CAAG,UAAU,CAAV,MAAA,CAAkB,CAC/BC,SAAS,CAAE,CACTC,WAAW,CADF,oBAAA,CAETC,cAAc,CAAEC,UAAU,CAFjB,aAAA,CAGTC,iBAAiB,CAAED,UAAU,CAHpB,aAAA,CAITE,iBAAiB,CAJR,EAAA,CAKTC,QAAQ,CALC,CAAA,CAMTC,UAAU,CAAE,CANH,CADoB,CAAlB,CAAf,CAWA,cAAA,CAAA,gBAAA","sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle, StyleSheet, StyleProp } from 'react-native';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Content of the `DialogScrollArea`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to show a scrollable content in a Dialog. The component only provides appropriate styling.\n * For the scrollable content you can use `ScrollView`, `FlatList` etc. depending on your requirement.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/dialog-scroll-area.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ScrollView } from 'react-native';\n * import { Dialog, Portal, Text } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const hideDialog = () => setVisible(false);\n *\n *   return (\n *     <Portal>\n *       <Dialog visible={visible} onDismiss={hideDialog}>\n *         <Dialog.ScrollArea>\n *           <ScrollView contentContainerStyle={{paddingHorizontal: 24}}>\n *             <Text>This is a scrollable area</Text>\n *           </ScrollView>\n *         </Dialog.ScrollArea>\n *       </Dialog>\n *     </Portal>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nclass DialogScrollArea extends React.Component<Props> {\n  static displayName = 'Dialog.ScrollArea';\n\n  render() {\n    return (\n      <View {...this.props} style={[styles.container, this.props.style]}>\n        {this.props.children}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderColor: 'rgba(0, 0, 0, .12)',\n    borderTopWidth: StyleSheet.hairlineWidth,\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    paddingHorizontal: 24,\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n});\n\nexport default DialogScrollArea;\n"]},"metadata":{},"sourceType":"module"}