{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import color from'color';import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import TouchableRipple from\"../TouchableRipple\";import Text from\"../Typography/Text\";import{withTheme}from\"../../core/theming\";var ListItem=function(_React$Component){_inherits(ListItem,_React$Component);var _super=_createSuper(ListItem);function ListItem(){_classCallCheck(this,ListItem);return _super.apply(this,arguments);}_createClass(ListItem,[{key:\"renderDescription\",value:function renderDescription(descriptionColor,description){var _this$props2=this.props,descriptionEllipsizeMode=_this$props2.descriptionEllipsizeMode,descriptionStyle=_this$props2.descriptionStyle,descriptionNumberOfLines=_this$props2.descriptionNumberOfLines;return typeof description==='function'?description({ellipsizeMode:descriptionEllipsizeMode,color:descriptionColor,fontSize:styles.description.fontSize}):React.createElement(Text,{numberOfLines:descriptionNumberOfLines,ellipsizeMode:descriptionEllipsizeMode,style:[styles.description,{color:descriptionColor},descriptionStyle]},description);}},{key:\"render\",value:function render(){var _this$props=this.props,left=_this$props.left,right=_this$props.right,title=_this$props.title,description=_this$props.description,onPress=_this$props.onPress,theme=_this$props.theme,style=_this$props.style,titleStyle=_this$props.titleStyle,titleNumberOfLines=_this$props.titleNumberOfLines,titleEllipsizeMode=_this$props.titleEllipsizeMode,rest=_objectWithoutProperties(_this$props,[\"left\",\"right\",\"title\",\"description\",\"onPress\",\"theme\",\"style\",\"titleStyle\",\"titleNumberOfLines\",\"titleEllipsizeMode\"]);var titleColor=color(theme.colors.text).alpha(0.87).rgb().string();var descriptionColor=color(theme.colors.text).alpha(0.54).rgb().string();return React.createElement(TouchableRipple,_extends({},rest,{style:[styles.container,style],onPress:onPress}),React.createElement(View,{style:styles.row},left?left({color:descriptionColor,style:description?styles.iconMarginLeft:_objectSpread(_objectSpread({},styles.iconMarginLeft),styles.marginVerticalNone)}):null,React.createElement(View,{style:[styles.item,styles.content]},React.createElement(Text,{ellipsizeMode:titleEllipsizeMode,numberOfLines:titleNumberOfLines,style:[styles.title,{color:titleColor},titleStyle]},title),description?this.renderDescription(descriptionColor,description):null),right?right({color:descriptionColor,style:description?styles.iconMarginRight:_objectSpread(_objectSpread({},styles.iconMarginRight),styles.marginVerticalNone)}):null));}}]);return ListItem;}(React.Component);_defineProperty(ListItem,\"displayName\",'List.Item');_defineProperty(ListItem,\"defaultProps\",{titleNumberOfLines:1,descriptionNumberOfLines:2});var styles=StyleSheet.create({container:{padding:8},row:{flexDirection:'row'},title:{fontSize:16},description:{fontSize:14},marginVerticalNone:{marginVertical:0},iconMarginLeft:{marginLeft:0,marginRight:16},iconMarginRight:{marginRight:0},item:{marginVertical:6,paddingLeft:8},content:{flex:1,justifyContent:'center'}});export default withTheme(ListItem);","map":{"version":3,"sources":["ListItem.tsx"],"names":["ListItem","React","titleNumberOfLines","descriptionNumberOfLines","description","ellipsizeMode","color","fontSize","styles","descriptionColor","titleEllipsizeMode","titleColor","theme","onPress","row","left","style","right","container","padding","flexDirection","title","marginVerticalNone","marginVertical","iconMarginLeft","marginLeft","marginRight","iconMarginRight","item","paddingLeft","content","flex","justifyContent","withTheme"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport TouchableRipple from '../TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren, EllipsizeProp } from '../../types';\n\ntype Description =\n  | React.ReactNode\n  | ((props: {\n      ellipsizeMode: EllipsizeProp | undefined;\n      color: string;\n      fontSize: number;\n    }) => React.ReactNode);\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Title text for the list item.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list item or callback which returns a React element to display the description.\n   */\n  description?: Description | null;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: {\n    color: string;\n    style: {\n      marginLeft: number;\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: {\n    color: string;\n    style?: {\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Ellipsize Mode for the Title\n   */\n  titleEllipsizeMode?: EllipsizeProp;\n  /**\n   * Ellipsize Mode for the Description\n   */\n  descriptionEllipsizeMode?: EllipsizeProp;\n};\n\n/**\n * A component to show tiles inside a List.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-item-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.Item\n *     title=\"First Item\"\n *     description=\"Item description\"\n *     left={props => <List.Icon {...props} icon=\"folder\" />}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass ListItem extends React.Component<Props> {\n  static displayName = 'List.Item';\n\n  static defaultProps: Partial<Props> = {\n    titleNumberOfLines: 1,\n    descriptionNumberOfLines: 2,\n  };\n\n  renderDescription(\n    descriptionColor: string,\n    description?: Description | null\n  ) {\n    const {\n      descriptionEllipsizeMode,\n      descriptionStyle,\n      descriptionNumberOfLines,\n    } = this.props;\n\n    return typeof description === 'function' ? (\n      description({\n        ellipsizeMode: descriptionEllipsizeMode,\n        color: descriptionColor,\n        fontSize: styles.description.fontSize,\n      })\n    ) : (\n      <Text\n        numberOfLines={descriptionNumberOfLines}\n        ellipsizeMode={descriptionEllipsizeMode}\n        style={[\n          styles.description,\n          { color: descriptionColor },\n          descriptionStyle,\n        ]}\n      >\n        {description}\n      </Text>\n    );\n  }\n\n  render() {\n    const {\n      left,\n      right,\n      title,\n      description,\n      onPress,\n      theme,\n      style,\n      titleStyle,\n      titleNumberOfLines,\n      titleEllipsizeMode,\n      ...rest\n    } = this.props;\n    const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n    const descriptionColor = color(theme.colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n\n    return (\n      <TouchableRipple\n        {...rest}\n        style={[styles.container, style]}\n        onPress={onPress}\n      >\n        <View style={styles.row}>\n          {left\n            ? left({\n                color: descriptionColor,\n                style: description\n                  ? styles.iconMarginLeft\n                  : {\n                      ...styles.iconMarginLeft,\n                      ...styles.marginVerticalNone,\n                    },\n              })\n            : null}\n          <View style={[styles.item, styles.content]}>\n            <Text\n              ellipsizeMode={titleEllipsizeMode}\n              numberOfLines={titleNumberOfLines}\n              style={[styles.title, { color: titleColor }, titleStyle]}\n            >\n              {title}\n            </Text>\n            {description\n              ? this.renderDescription(descriptionColor, description)\n              : null}\n          </View>\n          {right\n            ? right({\n                color: descriptionColor,\n                style: description\n                  ? styles.iconMarginRight\n                  : {\n                      ...styles.iconMarginRight,\n                      ...styles.marginVerticalNone,\n                    },\n              })\n            : null}\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  marginVerticalNone: { marginVertical: 0 },\n  iconMarginLeft: { marginLeft: 0, marginRight: 16 },\n  iconMarginRight: { marginRight: 0 },\n  item: {\n    marginVertical: 6,\n    paddingLeft: 8,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListItem);\n"]},"metadata":{},"sourceType":"module"}