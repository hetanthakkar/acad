{"ast":null,"code":"import{useLayoutEffect,useRef}from'react';export function useUpdateLayoutEffect(effect){var dependencies=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];var isInitialMount=useRef(true);useLayoutEffect(function(){if(isInitialMount.current){isInitialMount.current=false;}else{effect();}},dependencies);}","map":{"version":3,"sources":["../../src/hooks/useUpdateLayoutEffect.ts"],"names":[],"mappings":"AAAA,OAAS,eAAT,CAA0B,MAA1B,KAAwC,OAAxC,CAQA,MAAM,SAAU,CAAA,qBAAV,CACJ,MADI,CAEoB,IAAxB,CAAA,YAAwB,2DAAF,EAAE,CAExB,GAAM,CAAA,cAAc,CAAG,MAAM,CAAC,IAAD,CAA7B,CAEA,eAAe,CAAC,UAAK,CACnB,GAAI,cAAc,CAAC,OAAnB,CAA4B,CAC1B,cAAc,CAAC,OAAf,CAAyB,KAAzB,CACD,CAFD,IAEO,CACL,MAAM,GACP,CACF,CANc,CAMZ,YANY,CAAf,CAOD","sourceRoot":"","sourcesContent":["import { useLayoutEffect, useRef } from 'react';\n/**\n * A custom useEffect hook that only triggers on updates, not on initial mount\n * Idea stolen from: https://stackoverflow.com/a/55075818/1526448\n * @param {()=>void} effect the function to call\n * @param {Array<any>} dependencies the state(s) that fires the update\n */\nexport function useUpdateLayoutEffect(effect, dependencies = []) {\n    const isInitialMount = useRef(true);\n    useLayoutEffect(() => {\n        if (isInitialMount.current) {\n            isInitialMount.current = false;\n        }\n        else {\n            effect();\n        }\n    }, dependencies);\n}\n//# sourceMappingURL=useUpdateLayoutEffect.js.map"]},"metadata":{},"sourceType":"module"}