{"ast":null,"code":"import _defineProperty2 from\"@babel/runtime/helpers/defineProperty\";function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import React from'react';import TextInputIcon,{IconAdornment}from\"./Icon\";import TextInputAffix,{AffixAdornment}from\"./Affix\";import{ADORNMENT_OFFSET}from\"../constants\";import Platform from\"react-native-web/dist/exports/Platform\";import{AdornmentSide,AdornmentType}from\"./enums\";export function getAdornmentConfig(_ref){var left=_ref.left,right=_ref.right;var adornmentConfig=[];if(left||right){[{side:AdornmentSide.Left,adornment:left},{side:AdornmentSide.Right,adornment:right}].forEach(function(_ref2){var side=_ref2.side,adornment=_ref2.adornment;if(adornment&&React.isValidElement(adornment)){var type;if(adornment.type===TextInputAffix){type=AdornmentType.Affix;}else if(adornment.type===TextInputIcon){type=AdornmentType.Icon;}adornmentConfig.push({side:side,type:type});}});}return adornmentConfig;}export function getAdornmentStyleAdjustmentForNativeInput(_ref3){var adornmentConfig=_ref3.adornmentConfig,leftAffixWidth=_ref3.leftAffixWidth,rightAffixWidth=_ref3.rightAffixWidth,_ref3$inputOffset=_ref3.inputOffset,inputOffset=_ref3$inputOffset===void 0?0:_ref3$inputOffset;if(adornmentConfig.length){var adornmentStyleAdjustmentForNativeInput=adornmentConfig.map(function(_ref4){var _ref6;var type=_ref4.type,side=_ref4.side;var isWeb=Platform.OS!=='ios'&&Platform.OS!=='android';var isLeftSide=side===AdornmentSide.Left;var offset=(isLeftSide?leftAffixWidth:rightAffixWidth)+ADORNMENT_OFFSET;var paddingKey=\"padding\".concat(captalize(side));if(isWeb)return _defineProperty2({},paddingKey,offset);var isAffix=type===AdornmentType.Affix;var marginKey=\"margin\".concat(captalize(side));return _ref6={},_defineProperty2(_ref6,marginKey,isAffix?0:offset),_defineProperty2(_ref6,paddingKey,isAffix?offset:inputOffset),_ref6;});var allStyleAdjustmentsMerged=adornmentStyleAdjustmentForNativeInput.reduce(function(mergedStyles,currentStyle){return _objectSpread(_objectSpread({},mergedStyles),currentStyle);},{});return allStyleAdjustmentsMerged;}else{return[{}];}}var captalize=function captalize(text){return text.charAt(0).toUpperCase()+text.slice(1);};var TextInputAdornment=function TextInputAdornment(_ref7){var adornmentConfig=_ref7.adornmentConfig,left=_ref7.left,right=_ref7.right,onAffixChange=_ref7.onAffixChange,textStyle=_ref7.textStyle,visible=_ref7.visible,topPosition=_ref7.topPosition,isTextInputFocused=_ref7.isTextInputFocused,forceFocus=_ref7.forceFocus;if(adornmentConfig.length){return React.createElement(React.Fragment,null,adornmentConfig.map(function(_ref8){var type=_ref8.type,side=_ref8.side;var inputAdornmentComponent;if(side===AdornmentSide.Left){inputAdornmentComponent=left;}else if(side===AdornmentSide.Right){inputAdornmentComponent=right;}var commonProps={key:side,side:side,testID:\"\".concat(side,\"-\").concat(type,\"-adornment\"),isTextInputFocused:isTextInputFocused};if(type===AdornmentType.Icon){return React.createElement(IconAdornment,_extends({},commonProps,{icon:inputAdornmentComponent,topPosition:topPosition[AdornmentType.Icon],forceFocus:forceFocus}));}else if(type===AdornmentType.Affix){return React.createElement(AffixAdornment,_extends({},commonProps,{topPosition:topPosition[AdornmentType.Affix][side],affix:inputAdornmentComponent,textStyle:textStyle,onLayout:onAffixChange[side],visible:visible}));}else{return null;}}));}else{return null;}};export default TextInputAdornment;","map":{"version":3,"sources":["TextInputAdornment.tsx"],"names":["right","adornmentConfig","left","side","AdornmentSide","adornment","React","type","AdornmentType","inputOffset","adornmentStyleAdjustmentForNativeInput","isWeb","Platform","isLeftSide","offset","paddingKey","captalize","isAffix","marginKey","allStyleAdjustmentsMerged","text","TextInputAdornment","forceFocus","inputAdornmentComponent","commonProps","key","testID","isTextInputFocused","topPosition","onAffixChange","visible"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TextInputIcon, { IconAdornment } from './Icon';\nimport TextInputAffix, { AffixAdornment } from './Affix';\nimport { ADORNMENT_OFFSET } from '../constants';\nimport {\n  LayoutChangeEvent,\n  TextStyle,\n  StyleProp,\n  Animated,\n  Platform,\n} from 'react-native';\nimport type {\n  AdornmentConfig,\n  AdornmentStyleAdjustmentForNativeInput,\n} from './types';\nimport { AdornmentSide, AdornmentType } from './enums';\n\nexport function getAdornmentConfig({\n  left,\n  right,\n}: {\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n}): Array<AdornmentConfig> {\n  let adornmentConfig: any[] = [];\n  if (left || right) {\n    [\n      { side: AdornmentSide.Left, adornment: left },\n      { side: AdornmentSide.Right, adornment: right },\n    ].forEach(({ side, adornment }) => {\n      if (adornment && React.isValidElement(adornment)) {\n        let type;\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n        adornmentConfig.push({\n          side,\n          type,\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\n\nexport function getAdornmentStyleAdjustmentForNativeInput({\n  adornmentConfig,\n  leftAffixWidth,\n  rightAffixWidth,\n  inputOffset = 0,\n}: {\n  inputOffset?: number;\n  adornmentConfig: AdornmentConfig[];\n  leftAffixWidth: number;\n  rightAffixWidth: number;\n}): AdornmentStyleAdjustmentForNativeInput | {} {\n  if (adornmentConfig.length) {\n    const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(\n      ({ type, side }: AdornmentConfig) => {\n        const isWeb = Platform.OS !== 'ios' && Platform.OS !== 'android';\n        const isLeftSide = side === AdornmentSide.Left;\n        const offset =\n          (isLeftSide ? leftAffixWidth : rightAffixWidth) + ADORNMENT_OFFSET;\n        const paddingKey = `padding${captalize(side)}`;\n\n        if (isWeb) return { [paddingKey]: offset };\n\n        const isAffix = type === AdornmentType.Affix;\n        const marginKey = `margin${captalize(side)}`;\n\n        return {\n          [marginKey]: isAffix ? 0 : offset,\n          [paddingKey]: isAffix ? offset : inputOffset,\n        };\n      }\n    );\n    const allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce(\n      (mergedStyles, currentStyle) => {\n        return {\n          ...mergedStyles,\n          ...currentStyle,\n        };\n      },\n      {}\n    );\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nconst captalize = (text: string) =>\n  text.charAt(0).toUpperCase() + text.slice(1);\n\nexport interface TextInputAdornmentProps {\n  forceFocus: () => void;\n  adornmentConfig: AdornmentConfig[];\n  topPosition: {\n    [AdornmentType.Affix]: {\n      [AdornmentSide.Left]: number | null;\n      [AdornmentSide.Right]: number | null;\n    };\n    [AdornmentType.Icon]: number;\n  };\n  onAffixChange: {\n    [AdornmentSide.Left]: (event: LayoutChangeEvent) => void;\n    [AdornmentSide.Right]: (event: LayoutChangeEvent) => void;\n  };\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  textStyle?: StyleProp<TextStyle>;\n  visible?: Animated.Value;\n  isTextInputFocused: boolean;\n}\n\nconst TextInputAdornment: React.FunctionComponent<TextInputAdornmentProps> = ({\n  adornmentConfig,\n  left,\n  right,\n  onAffixChange,\n  textStyle,\n  visible,\n  topPosition,\n  isTextInputFocused,\n  forceFocus,\n}) => {\n  if (adornmentConfig.length) {\n    return (\n      <>\n        {adornmentConfig.map(({ type, side }: AdornmentConfig) => {\n          let inputAdornmentComponent;\n          if (side === AdornmentSide.Left) {\n            inputAdornmentComponent = left;\n          } else if (side === AdornmentSide.Right) {\n            inputAdornmentComponent = right;\n          }\n\n          const commonProps = {\n            key: side,\n            side: side,\n            testID: `${side}-${type}-adornment`,\n            isTextInputFocused,\n          };\n          if (type === AdornmentType.Icon) {\n            return (\n              <IconAdornment\n                {...commonProps}\n                icon={inputAdornmentComponent}\n                topPosition={topPosition[AdornmentType.Icon]}\n                forceFocus={forceFocus}\n              />\n            );\n          } else if (type === AdornmentType.Affix) {\n            return (\n              <AffixAdornment\n                {...commonProps}\n                topPosition={topPosition[AdornmentType.Affix][side]}\n                affix={inputAdornmentComponent}\n                textStyle={textStyle}\n                onLayout={onAffixChange[side]}\n                visible={visible}\n              />\n            );\n          } else {\n            return null;\n          }\n        })}\n      </>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;\n"]},"metadata":{},"sourceType":"module"}