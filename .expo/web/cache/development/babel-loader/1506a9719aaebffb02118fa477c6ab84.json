{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport { convertCoordinate } from \"./coordinates\";\nimport { transformPathEvents } from \"./events\";\nexport function transformProps(props) {\n  var _props$coordinates = props.coordinates,\n      coordinates = _props$coordinates === void 0 ? [] : _props$coordinates,\n      _props$holes = props.holes,\n      holes = _props$holes === void 0 ? [] : _props$holes,\n      strokeWidth = props.strokeWidth,\n      strokeColor = props.strokeColor,\n      strokeColors = props.strokeColors,\n      fillColor = props.fillColor,\n      lineCap = props.lineCap,\n      lineJoin = props.lineJoin,\n      miterLimit = props.miterLimit,\n      geodesic = props.geodesic,\n      lineDashPhase = props.lineDashPhase,\n      lineDashPattern = props.lineDashPattern,\n      tappable = props.tappable,\n      radius = props.radius,\n      center = props.center,\n      attribution = props.attribution,\n      opacity = props.opacity;\n\n  if (Array.isArray(strokeColors) && strokeColor.length) {\n    console.warn('`strokeColors` is not supported');\n  }\n\n  var allPolygons = [coordinates].concat(_toConsumableArray(holes)).filter(function (polygon) {\n    return Array.isArray(polygon) && polygon.length;\n  });\n  var positions = allPolygons.map(function (polygon) {\n    return polygon.map(function (coordinate) {\n      return convertCoordinate(coordinate);\n    });\n  });\n  return _objectSpread({\n    positions: positions.length ? positions : undefined,\n    weight: strokeWidth,\n    color: strokeColor,\n    fillColor: fillColor,\n    lineCap: lineCap,\n    lineJoin: lineJoin,\n    dashOffset: lineDashPhase,\n    dashArray: lineDashPattern,\n    interactive: tappable,\n    center: center ? convertCoordinate(center) : undefined,\n    radius: radius,\n    attribution: attribution,\n    opacity: opacity\n  }, transformPathEvents(props));\n}","map":{"version":3,"sources":["C:/Users/codemaxx/Desktop/iBlood/node_modules/react-native-maps/lib/web/Leaflet/utils/transformProps.js"],"names":["convertCoordinate","transformPathEvents","transformProps","props","coordinates","holes","strokeWidth","strokeColor","strokeColors","fillColor","lineCap","lineJoin","miterLimit","geodesic","lineDashPhase","lineDashPattern","tappable","radius","center","attribution","opacity","Array","isArray","length","console","warn","allPolygons","filter","polygon","positions","map","coordinate","undefined","weight","color","dashOffset","dashArray","interactive"],"mappings":";;AAAA,SAASA,iBAAT;AACA,SAASC,mBAAT;AAEA,OAAO,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAAA,2BAmBhCA,KAnBgC,CAElCC,WAFkC;AAAA,MAElCA,WAFkC,mCAEpB,EAFoB;AAAA,qBAmBhCD,KAnBgC,CAGlCE,KAHkC;AAAA,MAGlCA,KAHkC,6BAG1B,EAH0B;AAAA,MAIlCC,WAJkC,GAmBhCH,KAnBgC,CAIlCG,WAJkC;AAAA,MAKlCC,WALkC,GAmBhCJ,KAnBgC,CAKlCI,WALkC;AAAA,MAMlCC,YANkC,GAmBhCL,KAnBgC,CAMlCK,YANkC;AAAA,MAOlCC,SAPkC,GAmBhCN,KAnBgC,CAOlCM,SAPkC;AAAA,MAQlCC,OARkC,GAmBhCP,KAnBgC,CAQlCO,OARkC;AAAA,MASlCC,QATkC,GAmBhCR,KAnBgC,CASlCQ,QATkC;AAAA,MAUlCC,UAVkC,GAmBhCT,KAnBgC,CAUlCS,UAVkC;AAAA,MAWlCC,QAXkC,GAmBhCV,KAnBgC,CAWlCU,QAXkC;AAAA,MAYlCC,aAZkC,GAmBhCX,KAnBgC,CAYlCW,aAZkC;AAAA,MAalCC,eAbkC,GAmBhCZ,KAnBgC,CAalCY,eAbkC;AAAA,MAclCC,QAdkC,GAmBhCb,KAnBgC,CAclCa,QAdkC;AAAA,MAelCC,MAfkC,GAmBhCd,KAnBgC,CAelCc,MAfkC;AAAA,MAgBlCC,MAhBkC,GAmBhCf,KAnBgC,CAgBlCe,MAhBkC;AAAA,MAiBlCC,WAjBkC,GAmBhChB,KAnBgC,CAiBlCgB,WAjBkC;AAAA,MAkBlCC,OAlBkC,GAmBhCjB,KAnBgC,CAkBlCiB,OAlBkC;;AAoBpC,MAAIC,KAAK,CAACC,OAAN,CAAcd,YAAd,KAA+BD,WAAW,CAACgB,MAA/C,EAAuD;AACrDC,IAAAA,OAAO,CAACC,IAAR,CAAa,iCAAb;AACD;;AAED,MAAMC,WAAW,GAAG,CAACtB,WAAD,4BAAiBC,KAAjB,GAAwBsB,MAAxB,CAClB,UAAAC,OAAO;AAAA,WAAIP,KAAK,CAACC,OAAN,CAAcM,OAAd,KAA0BA,OAAO,CAACL,MAAtC;AAAA,GADW,CAApB;AAGA,MAAMM,SAAS,GAAGH,WAAW,CAACI,GAAZ,CAAgB,UAAAF,OAAO;AAAA,WACvCA,OAAO,CAACE,GAAR,CAAY,UAAAC,UAAU;AAAA,aAAI/B,iBAAiB,CAAC+B,UAAD,CAArB;AAAA,KAAtB,CADuC;AAAA,GAAvB,CAAlB;AAIA;AACEF,IAAAA,SAAS,EAAEA,SAAS,CAACN,MAAV,GAAmBM,SAAnB,GAA+BG,SAD5C;AAEEC,IAAAA,MAAM,EAAE3B,WAFV;AAGE4B,IAAAA,KAAK,EAAE3B,WAHT;AAIEE,IAAAA,SAAS,EAAEA,SAJb;AAKEC,IAAAA,OAAO,EAAEA,OALX;AAMEC,IAAAA,QAAQ,EAAEA,QANZ;AAOEwB,IAAAA,UAAU,EAAErB,aAPd;AAQEsB,IAAAA,SAAS,EAAErB,eARb;AASEsB,IAAAA,WAAW,EAAErB,QATf;AAUEE,IAAAA,MAAM,EAAEA,MAAM,GAAGlB,iBAAiB,CAACkB,MAAD,CAApB,GAA+Bc,SAV/C;AAWEf,IAAAA,MAAM,EAAEA,MAXV;AAYEE,IAAAA,WAAW,EAAXA,WAZF;AAaEC,IAAAA,OAAO,EAAPA;AAbF,KAcKnB,mBAAmB,CAACE,KAAD,CAdxB;AAgBD","sourcesContent":["import { convertCoordinate } from './coordinates';\r\nimport { transformPathEvents } from './events';\r\n\r\nexport function transformProps(props) {\r\n  const {\r\n    coordinates = [],\r\n    holes = [],\r\n    strokeWidth,\r\n    strokeColor,\r\n    strokeColors,\r\n    fillColor,\r\n    lineCap,\r\n    lineJoin,\r\n    miterLimit,\r\n    geodesic,\r\n    lineDashPhase,\r\n    lineDashPattern,\r\n    tappable,\r\n    radius,\r\n    center,\r\n    attribution,\r\n    opacity,\r\n  } = props;\r\n  if (Array.isArray(strokeColors) && strokeColor.length) {\r\n    console.warn('`strokeColors` is not supported');\r\n  }\r\n\r\n  const allPolygons = [coordinates, ...holes].filter(\r\n    polygon => Array.isArray(polygon) && polygon.length\r\n  );\r\n  const positions = allPolygons.map(polygon =>\r\n    polygon.map(coordinate => convertCoordinate(coordinate))\r\n  );\r\n\r\n  return {\r\n    positions: positions.length ? positions : undefined,\r\n    weight: strokeWidth,\r\n    color: strokeColor,\r\n    fillColor: fillColor,\r\n    lineCap: lineCap,\r\n    lineJoin: lineJoin,\r\n    dashOffset: lineDashPhase,\r\n    dashArray: lineDashPattern,\r\n    interactive: tappable,\r\n    center: center ? convertCoordinate(center) : undefined,\r\n    radius: radius,\r\n    attribution,\r\n    opacity,\r\n    ...transformPathEvents(props),\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}