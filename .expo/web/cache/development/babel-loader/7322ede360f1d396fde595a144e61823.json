{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\codemaxx\\\\Desktop\\\\iBlood\\\\Navigation.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { createAppContainer, createStackNavigator } from 'react-navigation';\nimport { createBottomTabNavigator, createMaterialTopTabNavigator } from 'react-navigation-tabs';\nimport Schedule from \"./data/schedule.json\";\nimport moment from 'moment';\nimport { Colors, FontSizes, Layout } from \"./constants\";\nimport Screens from \"./screens\";\nimport QRScannerModalNavigation from \"./screens/QRScreens/Identify\";\nimport QRCheckinScannerModalNavigation from \"./screens/QRScreens/CheckIn\";\nimport QRContactScannerModalNavigation from \"./screens/QRScreens/Contact\";\nimport Ionicons from '@expo/vector-icons/Ionicons';\n\nvar DynamicScheduleNavigation = function (_React$Component) {\n  _inherits(DynamicScheduleNavigation, _React$Component);\n\n  var _super = _createSuper(DynamicScheduleNavigation);\n\n  function DynamicScheduleNavigation() {\n    var _this;\n\n    _classCallCheck(this, DynamicScheduleNavigation);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      navigator: null\n    };\n    return _this;\n  }\n\n  _createClass(DynamicScheduleNavigation, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.initializeNavigatorFromSchedule();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {}\n  }, {\n    key: \"initializeNavigatorFromSchedule\",\n    value: function initializeNavigatorFromSchedule() {\n      var fullSchedule = this.props.screenProps.event.groupedSchedule;\n      var navSchedule = {};\n\n      _.each(fullSchedule, function (day, i) {\n        navSchedule[day.title] = {\n          screen: Screens.ScheduleDay({\n            day: day.title,\n            date: moment(new Date(day.date)).format('ddd')\n          })\n        };\n      });\n\n      var navigator = createAppContainer(createMaterialTopTabNavigator(navSchedule, {\n        tabBarOptions: {\n          style: {\n            backgroundColor: '#333'\n          },\n          activeTintColor: '#fff'\n        },\n        defaultNavigationOptions: function defaultNavigationOptions(_ref) {\n          var navigation = _ref.navigation;\n          return {\n            tabBarLabel: navigation.state.routeName.substring(0, 3).toUpperCase()\n          };\n        }\n      }));\n      this.setState({\n        navigator: navigator\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.state.navigator) {\n        return null;\n      }\n\n      var Navigator = this.state.navigator;\n      return React.createElement(Navigator, {\n        detached: true,\n        screenProps: _objectSpread(_objectSpread({}, this.props.screenProps), {}, {\n          parentNavigation: this.props.navigation\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return DynamicScheduleNavigation;\n}(React.Component);\n\nvar DefaultStackConfig = {\n  cardStyle: {\n    backgroundColor: '#fafafa'\n  },\n  defaultNavigationOptions: function defaultNavigationOptions(_ref2) {\n    var navigation = _ref2.navigation;\n    return {\n      title: navigation.state.routeName,\n      headerStyle: {\n        borderBottomWidth: 0,\n        shadowRadius: 0,\n        backgroundColor: Colors.blue\n      },\n      headerTintColor: 'white',\n      headerTitleStyle: {\n        fontFamily: 'open-sans-bold'\n      }\n    };\n  }\n};\nvar MenuNavigation = createStackNavigator({\n  Menu: {\n    screen: Screens.Menu\n  },\n  Speakers: {\n    screen: Screens.Speakers\n  },\n  Crew: {\n    screen: Screens.Crew\n  },\n  Sponsors: {\n    screen: Screens.Sponsors\n  },\n  Attendees: {\n    screen: Screens.Attendees\n  },\n  AttendeeDetail: {\n    screen: Screens.AttendeeDetail\n  }\n}, DefaultStackConfig);\nvar ScheduleStackNavigator = createStackNavigator({\n  Schedule: {\n    screen: DynamicScheduleNavigation\n  }\n}, DefaultStackConfig);\nvar ProfileNavigator = createStackNavigator({\n  Profile: {\n    screen: Screens.Profile\n  }\n}, DefaultStackConfig);\nvar ContactsNavigator = createStackNavigator({\n  Contacts: {\n    screen: Screens.Contacts\n  }\n}, DefaultStackConfig);\nvar StaffCheckinListsNavigation = createStackNavigator({\n  StaffCheckinListsList: {\n    screen: Screens.StaffCheckinLists\n  }\n}, DefaultStackConfig);\nvar PrimaryTabNavigator = createBottomTabNavigator({\n  Home: {\n    screen: Screens.Home\n  },\n  Profile: {\n    screen: ProfileNavigator\n  },\n  Schedule: {\n    screen: ScheduleStackNavigator\n  },\n  Contacts: {\n    screen: ContactsNavigator\n  },\n  Menu: {\n    screen: MenuNavigation\n  }\n}, {\n  defaultNavigationOptions: function defaultNavigationOptions(_ref3) {\n    var navigation = _ref3.navigation;\n    return {\n      tabBarIcon: function tabBarIcon(_ref4) {\n        var focused = _ref4.focused,\n            tintColor = _ref4.tintColor;\n        var routeName = navigation.state.routeName;\n        var iconName;\n\n        if (routeName === 'Home') {\n          iconName = 'ios-home';\n        } else if (routeName === 'Profile') {\n          iconName = \"ios-contact\" + (focused ? '' : '');\n        } else if (routeName === 'Schedule') {\n          iconName = \"ios-calendar\" + (focused ? '' : '');\n        } else if (routeName === 'Contacts') {\n          iconName = \"ios-contacts\" + (focused ? '' : '');\n        } else if (routeName === 'Menu') {\n          iconName = 'md-menu';\n        }\n\n        return React.createElement(Ionicons, {\n          name: iconName,\n          size: 32,\n          color: tintColor,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 16\n          }\n        });\n      }\n    };\n  },\n  tabBarOptions: {\n    style: {\n      backgroundColor: '#333'\n    },\n    activeTintColor: '#fff'\n  }\n});\nvar Navigation = createStackNavigator({\n  Primary: {\n    screen: PrimaryTabNavigator\n  },\n  AttendeeDetail: {\n    screen: Screens.AttendeeDetail\n  },\n  TicketInstructions: {\n    screen: Screens.TicketInstructions\n  },\n  CheckedInAttendeeInfo: {\n    screen: Screens.CheckedInAttendeeInfo\n  },\n  QRScanner: {\n    screen: QRScannerModalNavigation\n  },\n  QRCheckinScanner: {\n    screen: QRCheckinScannerModalNavigation\n  },\n  QRContactScanner: {\n    screen: QRContactScannerModalNavigation\n  },\n  StaffCheckinLists: {\n    screen: StaffCheckinListsNavigation\n  },\n  Details: {\n    screen: Screens.Details\n  }\n}, _objectSpread(_objectSpread({}, DefaultStackConfig), {}, {\n  headerMode: 'none',\n  mode: 'modal'\n}));\nexport default createAppContainer(Navigation);","map":{"version":3,"sources":["C:/Users/codemaxx/Desktop/iBlood/Navigation.js"],"names":["React","PropTypes","_","createAppContainer","createStackNavigator","createBottomTabNavigator","createMaterialTopTabNavigator","Schedule","moment","Colors","FontSizes","Layout","Screens","QRScannerModalNavigation","QRCheckinScannerModalNavigation","QRContactScannerModalNavigation","Ionicons","DynamicScheduleNavigation","state","navigator","initializeNavigatorFromSchedule","fullSchedule","props","screenProps","event","groupedSchedule","navSchedule","each","day","i","title","screen","ScheduleDay","date","Date","format","tabBarOptions","style","backgroundColor","activeTintColor","defaultNavigationOptions","navigation","tabBarLabel","routeName","substring","toUpperCase","setState","Navigator","parentNavigation","Component","DefaultStackConfig","cardStyle","headerStyle","borderBottomWidth","shadowRadius","blue","headerTintColor","headerTitleStyle","fontFamily","MenuNavigation","Menu","Speakers","Crew","Sponsors","Attendees","AttendeeDetail","ScheduleStackNavigator","ProfileNavigator","Profile","ContactsNavigator","Contacts","StaffCheckinListsNavigation","StaffCheckinListsList","StaffCheckinLists","PrimaryTabNavigator","Home","tabBarIcon","focused","tintColor","iconName","Navigation","Primary","TicketInstructions","CheckedInAttendeeInfo","QRScanner","QRCheckinScanner","QRContactScanner","Details","headerMode","mode"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,CAAP,MAAc,QAAd;;;;AAEA,SAAQC,kBAAR,EAA4BC,oBAA5B,QAAuD,kBAAvD;AACA,SACEC,wBADF,EAEEC,6BAFF,QAGO,uBAHP;AAKA,OAAOC,QAAP;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAAQC,MAAR,EAAgBC,SAAhB,EAA2BC,MAA3B;AAEA,OAAOC,OAAP;AACA,OAAOC,wBAAP;AACA,OAAOC,+BAAP;AACA,OAAOC,+BAAP;AACA,OAAOC,QAAP,MAAqB,6BAArB;;IAEMC,yB;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,SAAS,EAAE;AADL,K;;;;;;wCAIY;AAClB,WAAKC,+BAAL;AACD;;;yCAEoB,CAEpB;;;sDAEiC;AAEhC,UAAMC,YAAY,GAAG,KAAKC,KAAL,CAAWC,WAAX,CAAuBC,KAAvB,CAA6BC,eAAlD;AAGA,UAAIC,WAAW,GAAG,EAAlB;;AACAxB,MAAAA,CAAC,CAACyB,IAAF,CAAON,YAAP,EAAqB,UAACO,GAAD,EAAMC,CAAN,EAAY;AAC/BH,QAAAA,WAAW,CAACE,GAAG,CAACE,KAAL,CAAX,GAAyB;AACvBC,UAAAA,MAAM,EAAEnB,OAAO,CAACoB,WAAR,CAAoB;AAC1BJ,YAAAA,GAAG,EAAEA,GAAG,CAACE,KADiB;AAE1BG,YAAAA,IAAI,EAAEzB,MAAM,CAAC,IAAI0B,IAAJ,CAASN,GAAG,CAACK,IAAb,CAAD,CAAN,CAA2BE,MAA3B,CAAkC,KAAlC;AAFoB,WAApB;AADe,SAAzB;AAMD,OAPD;;AASA,UAAMhB,SAAS,GAAGhB,kBAAkB,CAClCG,6BAA6B,CAACoB,WAAD,EAAc;AACzCU,QAAAA,aAAa,EAAE;AACbC,UAAAA,KAAK,EAAE;AAACC,YAAAA,eAAe,EAAE;AAAlB,WADM;AAEbC,UAAAA,eAAe,EAAE;AAFJ,SAD0B;AAKzCC,QAAAA,wBAAwB,EAAE;AAAA,cAAEC,UAAF,QAAEA,UAAF;AAAA,iBAAmB;AAC3CC,YAAAA,WAAW,EAAED,UAAU,CAACvB,KAAX,CAAiByB,SAAjB,CAA2BC,SAA3B,CAAqC,CAArC,EAAwC,CAAxC,EAA2CC,WAA3C;AAD8B,WAAnB;AAAA;AALe,OAAd,CADK,CAApC;AAYA,WAAKC,QAAL,CAAc;AAAC3B,QAAAA,SAAS,EAATA;AAAD,OAAd;AACD;;;6BAEQ;AACP,UAAI,CAAC,KAAKD,KAAL,CAAWC,SAAhB,EAA2B;AAEzB,eAAO,IAAP;AACD;;AAED,UAAI4B,SAAS,GAAG,KAAK7B,KAAL,CAAWC,SAA3B;AACA,aACE,oBAAC,SAAD;AACE,QAAA,QAAQ,MADV;AAEE,QAAA,WAAW,kCACN,KAAKG,KAAL,CAAWC,WADL;AAETyB,UAAAA,gBAAgB,EAAE,KAAK1B,KAAL,CAAWmB;AAFpB,UAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AASD;;;;EA3DqCzC,KAAK,CAACiD,S;;AA8D9C,IAAMC,kBAAkB,GAAG;AACzBC,EAAAA,SAAS,EAAE;AACTb,IAAAA,eAAe,EAAE;AADR,GADc;AAIzBE,EAAAA,wBAAwB,EAAE;AAAA,QAAEC,UAAF,SAAEA,UAAF;AAAA,WAAmB;AAC3CX,MAAAA,KAAK,EAAEW,UAAU,CAACvB,KAAX,CAAiByB,SADmB;AAE3CS,MAAAA,WAAW,EAAE;AACXC,QAAAA,iBAAiB,EAAE,CADR;AAEXC,QAAAA,YAAY,EAAE,CAFH;AAGXhB,QAAAA,eAAe,EAAE7B,MAAM,CAAC8C;AAHb,OAF8B;AAO3CC,MAAAA,eAAe,EAAE,OAP0B;AAQ3CC,MAAAA,gBAAgB,EAAE;AAChBC,QAAAA,UAAU,EAAE;AADI;AARyB,KAAnB;AAAA;AAJD,CAA3B;AAkBA,IAAMC,cAAc,GAAGvD,oBAAoB,CACzC;AACEwD,EAAAA,IAAI,EAAE;AAAC7B,IAAAA,MAAM,EAAEnB,OAAO,CAACgD;AAAjB,GADR;AAEEC,EAAAA,QAAQ,EAAE;AAAC9B,IAAAA,MAAM,EAAEnB,OAAO,CAACiD;AAAjB,GAFZ;AAGEC,EAAAA,IAAI,EAAE;AAAC/B,IAAAA,MAAM,EAAEnB,OAAO,CAACkD;AAAjB,GAHR;AAIEC,EAAAA,QAAQ,EAAE;AAAChC,IAAAA,MAAM,EAAEnB,OAAO,CAACmD;AAAjB,GAJZ;AAKEC,EAAAA,SAAS,EAAE;AAACjC,IAAAA,MAAM,EAAEnB,OAAO,CAACoD;AAAjB,GALb;AAMEC,EAAAA,cAAc,EAAE;AAAClC,IAAAA,MAAM,EAAEnB,OAAO,CAACqD;AAAjB;AANlB,CADyC,EASzCf,kBATyC,CAA3C;AAYA,IAAMgB,sBAAsB,GAAG9D,oBAAoB,CACjD;AACEG,EAAAA,QAAQ,EAAE;AACRwB,IAAAA,MAAM,EAAEd;AADA;AADZ,CADiD,EAMjDiC,kBANiD,CAAnD;AASA,IAAMiB,gBAAgB,GAAG/D,oBAAoB,CAC3C;AACEgE,EAAAA,OAAO,EAAE;AACPrC,IAAAA,MAAM,EAAEnB,OAAO,CAACwD;AADT;AADX,CAD2C,EAM3ClB,kBAN2C,CAA7C;AASA,IAAMmB,iBAAiB,GAAGjE,oBAAoB,CAC5C;AACEkE,EAAAA,QAAQ,EAAE;AACRvC,IAAAA,MAAM,EAAEnB,OAAO,CAAC0D;AADR;AADZ,CAD4C,EAM5CpB,kBAN4C,CAA9C;AASA,IAAMqB,2BAA2B,GAAGnE,oBAAoB,CACtD;AACEoE,EAAAA,qBAAqB,EAAE;AACrBzC,IAAAA,MAAM,EAAEnB,OAAO,CAAC6D;AADK;AADzB,CADsD,EAMtDvB,kBANsD,CAAxD;AASA,IAAMwB,mBAAmB,GAAGrE,wBAAwB,CAClD;AACEsE,EAAAA,IAAI,EAAE;AACJ5C,IAAAA,MAAM,EAAEnB,OAAO,CAAC+D;AADZ,GADR;AAIEP,EAAAA,OAAO,EAAE;AAACrC,IAAAA,MAAM,EAAEoC;AAAT,GAJX;AAKE5D,EAAAA,QAAQ,EAAE;AACRwB,IAAAA,MAAM,EAAEmC;AADA,GALZ;AAQEI,EAAAA,QAAQ,EAAE;AAACvC,IAAAA,MAAM,EAAEsC;AAAT,GARZ;AASET,EAAAA,IAAI,EAAE;AAAC7B,IAAAA,MAAM,EAAE4B;AAAT;AATR,CADkD,EAYlD;AACEnB,EAAAA,wBAAwB,EAAE;AAAA,QAAEC,UAAF,SAAEA,UAAF;AAAA,WAAmB;AAC3CmC,MAAAA,UAAU,EAAE,2BAA0B;AAAA,YAAxBC,OAAwB,SAAxBA,OAAwB;AAAA,YAAfC,SAAe,SAAfA,SAAe;AAAA,YAC7BnC,SAD6B,GAChBF,UAAU,CAACvB,KADK,CAC7ByB,SAD6B;AAEpC,YAAIoC,QAAJ;;AACA,YAAIpC,SAAS,KAAK,MAAlB,EAA0B;AACxBoC,UAAAA,QAAQ,GAAG,UAAX;AACD,SAFD,MAEO,IAAIpC,SAAS,KAAK,SAAlB,EAA6B;AAClCoC,UAAAA,QAAQ,oBAAiBF,OAAO,GAAG,EAAH,GAAQ,EAAhC,CAAR;AACD,SAFM,MAEA,IAAIlC,SAAS,KAAK,UAAlB,EAA8B;AACnCoC,UAAAA,QAAQ,qBAAkBF,OAAO,GAAG,EAAH,GAAQ,EAAjC,CAAR;AACD,SAFM,MAEA,IAAIlC,SAAS,KAAK,UAAlB,EAA8B;AACnCoC,UAAAA,QAAQ,qBAAkBF,OAAO,GAAG,EAAH,GAAQ,EAAjC,CAAR;AACD,SAFM,MAEA,IAAIlC,SAAS,KAAK,MAAlB,EAA0B;AAC/BoC,UAAAA,QAAQ,GAAG,SAAX;AACD;;AAID,eAAO,oBAAC,QAAD;AAAU,UAAA,IAAI,EAAEA,QAAhB;AAA0B,UAAA,IAAI,EAAE,EAAhC;AAAoC,UAAA,KAAK,EAAED,SAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;AAnB0C,KAAnB;AAAA,GAD5B;AAsBE1C,EAAAA,aAAa,EAAE;AACbC,IAAAA,KAAK,EAAE;AAACC,MAAAA,eAAe,EAAE;AAAlB,KADM;AAEbC,IAAAA,eAAe,EAAE;AAFJ;AAtBjB,CAZkD,CAApD;AAyCA,IAAMyC,UAAU,GAAG5E,oBAAoB,CACrC;AACE6E,EAAAA,OAAO,EAAE;AAAClD,IAAAA,MAAM,EAAE2C;AAAT,GADX;AAEET,EAAAA,cAAc,EAAE;AAAClC,IAAAA,MAAM,EAAEnB,OAAO,CAACqD;AAAjB,GAFlB;AAGEiB,EAAAA,kBAAkB,EAAE;AAACnD,IAAAA,MAAM,EAAEnB,OAAO,CAACsE;AAAjB,GAHtB;AAKEC,EAAAA,qBAAqB,EAAE;AAACpD,IAAAA,MAAM,EAAEnB,OAAO,CAACuE;AAAjB,GALzB;AAMEC,EAAAA,SAAS,EAAE;AAACrD,IAAAA,MAAM,EAAElB;AAAT,GANb;AAOEwE,EAAAA,gBAAgB,EAAE;AAACtD,IAAAA,MAAM,EAAEjB;AAAT,GAPpB;AAQEwE,EAAAA,gBAAgB,EAAE;AAACvD,IAAAA,MAAM,EAAEhB;AAAT,GARpB;AASE0D,EAAAA,iBAAiB,EAAE;AAAC1C,IAAAA,MAAM,EAAEwC;AAAT,GATrB;AAWEgB,EAAAA,OAAO,EAAE;AAACxD,IAAAA,MAAM,EAAEnB,OAAO,CAAC2E;AAAjB;AAXX,CADqC,kCAehCrC,kBAfgC;AAgBnCsC,EAAAA,UAAU,EAAE,MAhBuB;AAiBnCC,EAAAA,IAAI,EAAE;AAjB6B,GAAvC;AAqBA,eAAetF,kBAAkB,CAAC6E,UAAD,CAAjC","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\nimport {View, Text, StatusBar} from 'react-native';\r\nimport {createAppContainer, createStackNavigator} from 'react-navigation';\r\nimport {\r\n  createBottomTabNavigator,\r\n  createMaterialTopTabNavigator,\r\n} from 'react-navigation-tabs';\r\n\r\nimport Schedule from './data/schedule.json';\r\nimport moment from 'moment';\r\nimport {Colors, FontSizes, Layout} from './constants';\r\n\r\nimport Screens from './screens';\r\nimport QRScannerModalNavigation from './screens/QRScreens/Identify';\r\nimport QRCheckinScannerModalNavigation from './screens/QRScreens/CheckIn';\r\nimport QRContactScannerModalNavigation from './screens/QRScreens/Contact';\r\nimport Ionicons from '@expo/vector-icons/Ionicons';\r\n\r\nclass DynamicScheduleNavigation extends React.Component {\r\n  state = {\r\n    navigator: null,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.initializeNavigatorFromSchedule();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    // @todo: if schedule changes, re-render navigator? probably only if days changed tho\r\n  }\r\n\r\n  initializeNavigatorFromSchedule() {\r\n    // @todo: get schedule from network or disk\r\n    const fullSchedule = this.props.screenProps.event.groupedSchedule; // Schedule.events[0].groupedSchedule;\r\n\r\n    // Sort schedule\r\n    let navSchedule = {};\r\n    _.each(fullSchedule, (day, i) => {\r\n      navSchedule[day.title] = {\r\n        screen: Screens.ScheduleDay({\r\n          day: day.title,\r\n          date: moment(new Date(day.date)).format('ddd'),\r\n        }),\r\n      };\r\n    });\r\n\r\n    const navigator = createAppContainer(\r\n      createMaterialTopTabNavigator(navSchedule, {\r\n        tabBarOptions: {\r\n          style: {backgroundColor: '#333'},\r\n          activeTintColor: '#fff',\r\n        },\r\n        defaultNavigationOptions: ({navigation}) => ({\r\n          tabBarLabel: navigation.state.routeName.substring(0, 3).toUpperCase(),\r\n        }),\r\n      })\r\n    );\r\n\r\n    this.setState({navigator});\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.navigator) {\r\n      // @todo: show a loading state\r\n      return null;\r\n    }\r\n\r\n    let Navigator = this.state.navigator;\r\n    return (\r\n      <Navigator\r\n        detached\r\n        screenProps={{\r\n          ...this.props.screenProps,\r\n          parentNavigation: this.props.navigation,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst DefaultStackConfig = {\r\n  cardStyle: {\r\n    backgroundColor: '#fafafa',\r\n  },\r\n  defaultNavigationOptions: ({navigation}) => ({\r\n    title: navigation.state.routeName,\r\n    headerStyle: {\r\n      borderBottomWidth: 0,\r\n      shadowRadius: 0,\r\n      backgroundColor: Colors.blue,\r\n    },\r\n    headerTintColor: 'white',\r\n    headerTitleStyle: {\r\n      fontFamily: 'open-sans-bold',\r\n    },\r\n  }),\r\n};\r\n\r\nconst MenuNavigation = createStackNavigator(\r\n  {\r\n    Menu: {screen: Screens.Menu},\r\n    Speakers: {screen: Screens.Speakers},\r\n    Crew: {screen: Screens.Crew},\r\n    Sponsors: {screen: Screens.Sponsors},\r\n    Attendees: {screen: Screens.Attendees},\r\n    AttendeeDetail: {screen: Screens.AttendeeDetail},\r\n  },\r\n  DefaultStackConfig\r\n);\r\n\r\nconst ScheduleStackNavigator = createStackNavigator(\r\n  {\r\n    Schedule: {\r\n      screen: DynamicScheduleNavigation,\r\n    },\r\n  },\r\n  DefaultStackConfig\r\n);\r\n\r\nconst ProfileNavigator = createStackNavigator(\r\n  {\r\n    Profile: {\r\n      screen: Screens.Profile,\r\n    },\r\n  },\r\n  DefaultStackConfig\r\n);\r\n\r\nconst ContactsNavigator = createStackNavigator(\r\n  {\r\n    Contacts: {\r\n      screen: Screens.Contacts,\r\n    },\r\n  },\r\n  DefaultStackConfig\r\n);\r\n\r\nconst StaffCheckinListsNavigation = createStackNavigator(\r\n  {\r\n    StaffCheckinListsList: {\r\n      screen: Screens.StaffCheckinLists,\r\n    },\r\n  },\r\n  DefaultStackConfig\r\n);\r\n\r\nconst PrimaryTabNavigator = createBottomTabNavigator(\r\n  {\r\n    Home: {\r\n      screen: Screens.Home,\r\n    },\r\n    Profile: {screen: ProfileNavigator},\r\n    Schedule: {\r\n      screen: ScheduleStackNavigator,\r\n    },\r\n    Contacts: {screen: ContactsNavigator},\r\n    Menu: {screen: MenuNavigation},\r\n  },\r\n  {\r\n    defaultNavigationOptions: ({navigation}) => ({\r\n      tabBarIcon: ({focused, tintColor}) => {\r\n        const {routeName} = navigation.state;\r\n        let iconName;\r\n        if (routeName === 'Home') {\r\n          iconName = 'ios-home';\r\n        } else if (routeName === 'Profile') {\r\n          iconName = `ios-contact${focused ? '' : ''}`;\r\n        } else if (routeName === 'Schedule') {\r\n          iconName = `ios-calendar${focused ? '' : ''}`;\r\n        } else if (routeName === 'Contacts') {\r\n          iconName = `ios-contacts${focused ? '' : ''}`;\r\n        } else if (routeName === 'Menu') {\r\n          iconName = 'md-menu';\r\n        }\r\n\r\n        // You can return any component that you like here! We usually use an\r\n        // icon component from react-native-vector-icons\r\n        return <Ionicons name={iconName} size={32} color={tintColor} />;\r\n      },\r\n    }),\r\n    tabBarOptions: {\r\n      style: {backgroundColor: '#333'},\r\n      activeTintColor: '#fff',\r\n    },\r\n  }\r\n);\r\n\r\nconst Navigation = createStackNavigator(\r\n  {\r\n    Primary: {screen: PrimaryTabNavigator},\r\n    AttendeeDetail: {screen: Screens.AttendeeDetail},\r\n    TicketInstructions: {screen: Screens.TicketInstructions},\r\n\r\n    CheckedInAttendeeInfo: {screen: Screens.CheckedInAttendeeInfo},\r\n    QRScanner: {screen: QRScannerModalNavigation},\r\n    QRCheckinScanner: {screen: QRCheckinScannerModalNavigation},\r\n    QRContactScanner: {screen: QRContactScannerModalNavigation},\r\n    StaffCheckinLists: {screen: StaffCheckinListsNavigation},\r\n\r\n    Details: {screen: Screens.Details},\r\n  },\r\n  {\r\n    ...DefaultStackConfig,\r\n    headerMode: 'none',\r\n    mode: 'modal',\r\n  }\r\n);\r\n\r\nexport default createAppContainer(Navigation);\r\n"]},"metadata":{},"sourceType":"module"}