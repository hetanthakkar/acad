{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport View from \"react-native-web/dist/exports/View\";\nimport parser from \"./lib/parser\";\nimport applyStyle from \"./lib/util/applyStyle\";\nimport getUniqueID from \"./lib/util/getUniqueID\";\nimport hasParents from \"./lib/util/hasParents\";\nimport openUrl from \"./lib/util/openUrl\";\nimport tokensToAST from \"./lib/util/tokensToAST\";\nimport renderRules from \"./lib/renderRules\";\nimport AstRenderer from \"./lib/AstRenderer\";\nimport MarkdownIt from 'markdown-it';\nimport PluginContainer from \"./lib/plugin/PluginContainer\";\nimport blockPlugin from \"./lib/plugin/blockPlugin\";\nimport { styles } from \"./lib/styles\";\nimport { stringToTokens } from \"./lib/util/stringToTokens\";\nexport { applyStyle, getUniqueID, openUrl, hasParents, renderRules, AstRenderer, parser, stringToTokens, tokensToAST, MarkdownIt, PluginContainer, blockPlugin, styles };\n\nvar Markdown = function (_Component) {\n  _inherits(Markdown, _Component);\n\n  var _super = _createSuper(Markdown);\n\n  function Markdown() {\n    var _this;\n\n    _classCallCheck(this, Markdown);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.copy = '';\n    _this.renderer = null;\n    _this.markdownParser = null;\n    return _this;\n  }\n\n  _createClass(Markdown, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      var copy = this.getCopyFromChildren(nextProps.children);\n\n      if (copy !== this.copy) {\n        this.copy = copy;\n        return true;\n      }\n\n      if (nextProps.renderer !== this.props.renderer || nextProps.style !== this.props.style || nextProps.plugins !== this.props.plugins || nextProps.rules !== this.props.rules || nextProps.markdownit !== this.props.markdownit) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"updateSettings\",\n    value: function updateSettings() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var renderer = props.renderer,\n          rules = props.rules,\n          style = props.style,\n          plugins = props.plugins,\n          markdownit = props.markdownit;\n\n      if (renderer && rules) {\n        console.warn('react-native-markdown-renderer you are using renderer and rules at the same time. This is not possible, props.rules is ignored');\n      }\n\n      if (renderer && style) {\n        console.warn('react-native-markdown-renderer you are using renderer and style at the same time. This is not possible, props.style is ignored');\n      }\n\n      if (renderer) {\n        if (typeof renderer === 'function') {\n          if (!this.renderer || this.renderer.render !== renderer) {\n            this.renderer = {\n              render: renderer\n            };\n          }\n        } else if (renderer instanceof AstRenderer) {\n          if (this.renderer !== renderer) {\n            this.renderer = renderer;\n          }\n        } else {\n          throw new Error('Provided renderer is not compatible with function or AstRenderer. please change');\n        }\n      } else {\n        if (!this.renderer || this.props.renderer || this.props.rules !== rules || this.props.style !== style) {\n          this.renderer = new AstRenderer(_objectSpread(_objectSpread({}, renderRules), rules || {}), _objectSpread(_objectSpread({}, styles), style));\n        }\n      }\n\n      if (!this.markdownParser || this.props.markdownit !== markdownit || plugins !== this.props.plugins) {\n        var md = markdownit;\n\n        if (plugins && plugins.length > 0) {\n          plugins.forEach(function (plugin) {\n            md = md.use.apply(md, plugin.toArray());\n          });\n        }\n\n        this.markdownParser = md;\n      }\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.updateSettings(this.props);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      this.updateSettings(nextProps);\n    }\n  }, {\n    key: \"getCopyFromChildren\",\n    value: function getCopyFromChildren() {\n      var children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.children;\n      return children instanceof Array ? children.join('') : children;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var copy = this.copy = this.getCopyFromChildren();\n      return parser(copy, this.renderer.render, this.markdownParser);\n    }\n  }]);\n\n  return Markdown;\n}(Component);\n\nMarkdown.propTypes = {\n  children: PropTypes.node.isRequired,\n  renderer: PropTypes.oneOfType([PropTypes.func, PropTypes.instanceOf(AstRenderer)]),\n  rules: function rules(props, propName, componentName) {\n    var invalidProps = [];\n    var prop = props[propName];\n\n    if (!prop) {\n      return;\n    }\n\n    if (typeof prop === 'object') {\n      invalidProps = Object.keys(prop).filter(function (key) {\n        return typeof prop[key] !== 'function';\n      });\n    }\n\n    if (typeof prop !== 'object') {\n      return new Error(\"Invalid prop `\" + propName + \"` supplied to `\" + componentName + \"`. Must be of shape {[index:string]:function} \");\n    } else if (invalidProps.length > 0) {\n      return new Error(\"Invalid prop `\" + propName + \"` supplied to `\" + componentName + \"`. These \" + (\"props are not of type function `\" + invalidProps.join(', ') + \"` \"));\n    }\n  },\n  markdownit: PropTypes.instanceOf(MarkdownIt),\n  plugins: PropTypes.arrayOf(PropTypes.instanceOf(PluginContainer)),\n  style: PropTypes.any\n};\nMarkdown.defaultProps = {\n  renderer: null,\n  rules: null,\n  plugins: [],\n  style: null,\n  markdownit: MarkdownIt({\n    typographer: true\n  })\n};\nexport { Markdown as default };","map":{"version":3,"sources":["C:/Users/codemaxx/Desktop/iBlood/node_modules/react-native-markdown-renderer/src/index.js"],"names":["React","Component","PropTypes","parser","applyStyle","getUniqueID","hasParents","openUrl","tokensToAST","renderRules","AstRenderer","MarkdownIt","PluginContainer","blockPlugin","styles","stringToTokens","Markdown","copy","renderer","markdownParser","nextProps","nextState","getCopyFromChildren","children","props","style","plugins","rules","markdownit","console","warn","render","Error","md","length","forEach","plugin","use","apply","toArray","updateSettings","Array","join","propTypes","node","isRequired","oneOfType","func","instanceOf","propName","componentName","invalidProps","prop","Object","keys","filter","key","arrayOf","any","defaultProps","typographer"],"mappings":"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","sourcesContent":["/**\n * Base Markdown component\n * @author Mient-jan Stelling\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { View } from 'react-native';\nimport parser from './lib/parser';\nimport applyStyle from './lib/util/applyStyle';\nimport getUniqueID from './lib/util/getUniqueID';\nimport hasParents from './lib/util/hasParents';\nimport openUrl from './lib/util/openUrl';\nimport tokensToAST from './lib/util/tokensToAST';\nimport renderRules from './lib/renderRules';\nimport AstRenderer from './lib/AstRenderer';\nimport MarkdownIt from 'markdown-it';\nimport PluginContainer from './lib/plugin/PluginContainer';\nimport blockPlugin from './lib/plugin/blockPlugin';\nimport { styles } from './lib/styles';\nimport { stringToTokens } from './lib/util/stringToTokens';\n/**\n *\n */\nexport {\n  applyStyle,\n  getUniqueID,\n  openUrl,\n  hasParents,\n  renderRules,\n  AstRenderer,\n  parser,\n  stringToTokens,\n  tokensToAST,\n  MarkdownIt,\n  PluginContainer,\n  blockPlugin,\n  styles,\n};\n\n/**\n * react-native-markdown-renderer\n */\nexport default class Markdown extends Component {\n  /**\n   * Definition of the prop types\n   */\n  static propTypes = {\n    children: PropTypes.node.isRequired,\n    renderer: PropTypes.oneOfType([PropTypes.func, PropTypes.instanceOf(AstRenderer)]),\n    rules: (props, propName, componentName) => {\n      let invalidProps = [];\n      const prop = props[propName];\n\n      if (!prop) {\n        return;\n      }\n\n      if (typeof prop === 'object') {\n        invalidProps = Object.keys(prop).filter(key => typeof prop[key] !== 'function');\n      }\n\n      if (typeof prop !== 'object') {\n        return new Error(\n          `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Must be of shape {[index:string]:function} `\n        );\n      } else if (invalidProps.length > 0) {\n        return new Error(\n          `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. These ` +\n            `props are not of type function \\`${invalidProps.join(', ')}\\` `\n        );\n      }\n    },\n    markdownit: PropTypes.instanceOf(MarkdownIt),\n    plugins: PropTypes.arrayOf(PropTypes.instanceOf(PluginContainer)),\n    style: PropTypes.any,\n  };\n\n  /**\n   * Default Props\n   */\n  static defaultProps = {\n    renderer: null,\n    rules: null,\n    plugins: [],\n    style: null,\n    markdownit: MarkdownIt({\n      typographer: true,\n    }),\n  };\n\n  copy = '';\n  renderer = null;\n  markdownParser = null;\n\n  /**\n   * Only when the copy changes will the markdown render again.\n   * @param nextProps\n   * @param nextState\n   * @return {boolean}\n   */\n  shouldComponentUpdate(nextProps, nextState) {\n    const copy = this.getCopyFromChildren(nextProps.children);\n\n    if (copy !== this.copy) {\n      this.copy = copy;\n      return true;\n    }\n\n    if (\n      nextProps.renderer !== this.props.renderer ||\n      nextProps.style !== this.props.style ||\n      nextProps.plugins !== this.props.plugins ||\n      nextProps.rules !== this.props.rules ||\n      nextProps.markdownit !== this.props.markdownit\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   *\n   * @param props\n   */\n  updateSettings(props = this.props) {\n    const { renderer, rules, style, plugins, markdownit } = props;\n\n    if (renderer && rules) {\n      console.warn(\n        'react-native-markdown-renderer you are using renderer and rules at the same time. This is not possible, props.rules is ignored'\n      );\n    }\n\n    if (renderer && style) {\n      console.warn(\n        'react-native-markdown-renderer you are using renderer and style at the same time. This is not possible, props.style is ignored'\n      );\n    }\n\n    // these checks are here to prevent extra overhead.\n    if (renderer) {\n      if (typeof renderer === 'function') {\n        if (!this.renderer || this.renderer.render !== renderer) {\n          this.renderer = {\n            render: renderer,\n          };\n        }\n      } else if (renderer instanceof AstRenderer) {\n        if (this.renderer !== renderer) {\n          this.renderer = renderer;\n        }\n      } else {\n        throw new Error('Provided renderer is not compatible with function or AstRenderer. please change');\n      }\n    } else {\n      if (!this.renderer || this.props.renderer || this.props.rules !== rules || this.props.style !== style) {\n        this.renderer = new AstRenderer(\n          {\n            ...renderRules,\n            ...(rules || {}),\n          },\n          {\n            ...styles,\n            ...style,\n          }\n        );\n      }\n    }\n\n    if (!this.markdownParser || this.props.markdownit !== markdownit || plugins !== this.props.plugins) {\n      let md = markdownit;\n      if (plugins && plugins.length > 0) {\n        plugins.forEach(plugin => {\n          md = md.use.apply(md, plugin.toArray());\n        });\n      }\n\n      this.markdownParser = md;\n    }\n  }\n\n  /**\n   *\n   */\n  componentWillMount() {\n    this.updateSettings(this.props);\n  }\n\n  /**\n   *\n   * @param nextProps\n   */\n  componentWillReceiveProps(nextProps) {\n    this.updateSettings(nextProps);\n  }\n\n  /**\n   *\n   * @param children\n   * @return {string}\n   */\n  getCopyFromChildren(children = this.props.children) {\n    return children instanceof Array ? children.join('') : children;\n  }\n\n  /**\n   *\n   * @return {View}\n   */\n  render() {\n    const copy = (this.copy = this.getCopyFromChildren());\n    return parser(copy, this.renderer.render, this.markdownParser);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}