{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport moment from 'moment-timezone';\nimport _ from 'lodash';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport { WebBrowser } from 'expo';\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nexport function getSpeakerTalk(speaker) {\n  var talk = _.find(speaker.talks, function (talk) {\n    return talk.type === 0;\n  });\n\n  if (!talk) {\n    return speaker.talks[0];\n  }\n\n  return talk;\n}\nvar Event;\nexport function setEvent(event) {\n  Event = event;\n}\nexport function convertUtcDateToEventTimezone(date) {\n  var d = new Date(date);\n  return moment.tz(d, Event.timezoneId);\n}\nexport function convertUtcDateToEventTimezoneHour(date) {\n  var d = new Date(date);\n  return moment.tz(d, Event.timezoneId).format('hh:mma');\n}\nexport function convertUtcDateToEventTimezoneDaytime(date) {\n  var d = new Date(date);\n  return moment.tz(d, Event.timezoneId).format('dddd DD MMM, h:mma');\n}\nexport function conferenceHasStarted() {\n  return Event.status.hasStarted;\n}\nexport function conferenceHasEnded() {\n  return Event.status.hasEnded;\n}\nexport function HideWhenConferenceHasStarted(_ref) {\n  var children = _ref.children;\n\n  if (conferenceHasStarted()) {\n    return null;\n  } else {\n    return children;\n  }\n}\nexport function HideWhenConferenceHasEnded(_ref2) {\n  var children = _ref2.children;\n\n  if (conferenceHasEnded()) {\n    return null;\n  } else {\n    return children;\n  }\n}\nexport function ShowWhenConferenceHasEnded(_ref3) {\n  var children = _ref3.children;\n\n  if (conferenceHasEnded()) {\n    return children;\n  } else {\n    return null;\n  }\n}\nexport var sendEmail = function sendEmail(emailTo) {\n  var fromName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    firstName: '',\n    lastName: ''\n  };\n  var emailurl = 'mailto:' + emailTo + \"?subject=hey it's\" + ' ' + fromName.firstName + ' ' + fromName.lastName + ' ' + 'from ReactEurope&body=ping';\n\n  try {\n    Platform.OS === 'android' ? WebBrowser.openBrowserAsync(emailurl) : Linking.openURL(emailurl);\n  } catch (e) {\n    WebBrowser.openBrowserAsync('mailto:' + emailTo);\n  }\n};\nexport var openTwitter = function openTwitter(twitter) {\n  return _regeneratorRuntime.async(function openTwitter$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(Linking.openURL(\"twitter://user?screen_name=\" + twitter));\n\n        case 3:\n          _context.next = 8;\n          break;\n\n        case 5:\n          _context.prev = 5;\n          _context.t0 = _context[\"catch\"](0);\n          WebBrowser.openBrowserAsync('https://twitter.com/' + twitter);\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 5]], Promise);\n};\nexport var addContact = function addContact(contact) {\n  var storedContacts, contacts, newContacts, found, existingContacts, stringifiedContacts;\n  return _regeneratorRuntime.async(function addContact$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('@MySuperStore2019:contacts'));\n\n        case 2:\n          storedContacts = _context2.sent;\n          contacts = null;\n          newContacts = [];\n          found = false;\n\n          if (storedContacts === null && contact && contact.firstName) {\n            contacts = [contact];\n          } else {\n            existingContacts = JSON.parse(storedContacts) || [];\n            console.log('how many existing contacts', existingContacts.length);\n            existingContacts.map(function (existingContact) {\n              console.log('existing contact', existingContact);\n\n              if (existingContact && existingContact.id && contact && contact.id && existingContact.id === contact.id) {\n                found = true;\n                newContacts.push(contact);\n              } else if (existingContact && existingContact.id) {\n                newContacts.push(existingContact);\n              }\n            });\n\n            if (!found && contact && contact.id) {\n              newContacts.push(contact);\n            }\n\n            contacts = newContacts;\n          }\n\n          if (contacts === [null]) {\n            contacts = [];\n          }\n\n          stringifiedContacts = JSON.stringify(contacts);\n          return _context2.abrupt(\"return\", AsyncStorage.setItem('@MySuperStore2019:contacts', stringifiedContacts));\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var saveSchedule = function saveSchedule(schedule) {\n  return _regeneratorRuntime.async(function saveSchedule$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          return _context3.abrupt(\"return\", AsyncStorage.setItem('@MySuperStore2019:schedule', JSON.stringify(schedule)));\n\n        case 1:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getContactTwitter = function getContactTwitter(contact) {\n  var twitter = '';\n\n  if (contact) {\n    contact.answers.map(function (answer) {\n      if (answer.question && answer.question.title === 'Twitter') {\n        twitter = answer.value;\n      }\n    });\n  }\n\n  return twitter.replace('@', '').replace('https://twitter.com/', '').replace('twitter.com/', '');\n};","map":{"version":3,"sources":["C:/Users/codemaxx/Desktop/iBlood/utils/index.js"],"names":["React","moment","_","WebBrowser","getSpeakerTalk","speaker","talk","find","talks","type","Event","setEvent","event","convertUtcDateToEventTimezone","date","d","Date","tz","timezoneId","convertUtcDateToEventTimezoneHour","format","convertUtcDateToEventTimezoneDaytime","conferenceHasStarted","status","hasStarted","conferenceHasEnded","hasEnded","HideWhenConferenceHasStarted","children","HideWhenConferenceHasEnded","ShowWhenConferenceHasEnded","sendEmail","emailTo","fromName","firstName","lastName","emailurl","Platform","OS","openBrowserAsync","Linking","openURL","e","openTwitter","twitter","addContact","contact","AsyncStorage","getItem","storedContacts","contacts","newContacts","found","existingContacts","JSON","parse","console","log","length","map","existingContact","id","push","stringifiedContacts","stringify","setItem","saveSchedule","schedule","getContactTwitter","answers","answer","question","title","value","replace"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport moment from 'moment-timezone';\r\nimport _ from 'lodash';\r\nimport {Platform, Linking} from 'react-native';\r\nimport {WebBrowser} from 'expo';\r\nimport {AsyncStorage} from 'react-native';\r\n\r\nexport function getSpeakerTalk(speaker) {\r\n  const talk = _.find(speaker.talks, function(talk) {\r\n    return talk.type === 0;\r\n  });\r\n  if (!talk) {\r\n    return speaker.talks[0];\r\n  }\r\n  return talk;\r\n}\r\n\r\nlet Event;\r\n\r\nexport function setEvent(event) {\r\n  Event = event;\r\n}\r\n\r\nexport function convertUtcDateToEventTimezone(date) {\r\n  let d = new Date(date);\r\n  return moment.tz(d, Event.timezoneId);\r\n}\r\n\r\nexport function convertUtcDateToEventTimezoneHour(date) {\r\n  let d = new Date(date);\r\n  return moment.tz(d, Event.timezoneId).format('hh:mma');\r\n}\r\n\r\nexport function convertUtcDateToEventTimezoneDaytime(date) {\r\n  let d = new Date(date);\r\n  return moment.tz(d, Event.timezoneId).format('dddd DD MMM, h:mma');\r\n}\r\n\r\nexport function conferenceHasStarted() {\r\n  return Event.status.hasStarted;\r\n}\r\n\r\nexport function conferenceHasEnded() {\r\n  return Event.status.hasEnded;\r\n}\r\n\r\nexport function HideWhenConferenceHasStarted({children}) {\r\n  if (conferenceHasStarted()) {\r\n    return null;\r\n  } else {\r\n    return children;\r\n  }\r\n}\r\n\r\nexport function HideWhenConferenceHasEnded({children}) {\r\n  if (conferenceHasEnded()) {\r\n    return null;\r\n  } else {\r\n    return children;\r\n  }\r\n}\r\n\r\nexport function ShowWhenConferenceHasEnded({children}) {\r\n  if (conferenceHasEnded()) {\r\n    return children;\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport const sendEmail = (\r\n  emailTo,\r\n  fromName = {firstName: '', lastName: ''}\r\n) => {\r\n  const emailurl =\r\n    'mailto:' +\r\n    emailTo +\r\n    \"?subject=hey it's\" +\r\n    ' ' +\r\n    fromName.firstName +\r\n    ' ' +\r\n    fromName.lastName +\r\n    ' ' +\r\n    'from ReactEurope&body=ping';\r\n  try {\r\n    Platform.OS === 'android'\r\n      ? WebBrowser.openBrowserAsync(emailurl)\r\n      : Linking.openURL(emailurl);\r\n  } catch (e) {\r\n    WebBrowser.openBrowserAsync('mailto:' + emailTo);\r\n  }\r\n};\r\n\r\nexport const openTwitter = async twitter => {\r\n  try {\r\n    await Linking.openURL(`twitter://user?screen_name=` + twitter);\r\n  } catch (e) {\r\n    WebBrowser.openBrowserAsync('https://twitter.com/' + twitter);\r\n  }\r\n};\r\n\r\nexport const addContact = async contact => {\r\n  const storedContacts = await AsyncStorage.getItem(\r\n    '@MySuperStore2019:contacts'\r\n  );\r\n\r\n  let contacts = null;\r\n  let newContacts = [];\r\n  let found = false;\r\n  if (storedContacts === null && contact && contact.firstName) {\r\n    contacts = [contact];\r\n  } else {\r\n    let existingContacts = JSON.parse(storedContacts) || [];\r\n    console.log('how many existing contacts', existingContacts.length);\r\n    existingContacts.map(existingContact => {\r\n      console.log('existing contact', existingContact);\r\n      if (\r\n        existingContact &&\r\n        existingContact.id &&\r\n        contact &&\r\n        contact.id &&\r\n        existingContact.id === contact.id\r\n      ) {\r\n        found = true;\r\n        newContacts.push(contact);\r\n      } else if (existingContact && existingContact.id) {\r\n        newContacts.push(existingContact);\r\n      }\r\n    });\r\n    if (!found && contact && contact.id) {\r\n      newContacts.push(contact);\r\n    }\r\n    contacts = newContacts;\r\n  }\r\n  if (contacts === [null]) {\r\n    contacts = [];\r\n  }\r\n  let stringifiedContacts = JSON.stringify(contacts);\r\n  return AsyncStorage.setItem(\r\n    '@MySuperStore2019:contacts',\r\n    stringifiedContacts\r\n  );\r\n};\r\n\r\nexport const saveSchedule = async schedule => {\r\n  return AsyncStorage.setItem(\r\n    '@MySuperStore2019:schedule',\r\n    JSON.stringify(schedule)\r\n  );\r\n};\r\n\r\nexport const getContactTwitter = contact => {\r\n  let twitter = '';\r\n  if (contact) {\r\n    contact.answers.map(answer => {\r\n      if (answer.question && answer.question.title === 'Twitter') {\r\n        twitter = answer.value;\r\n      }\r\n    });\r\n  }\r\n  return twitter\r\n    .replace('@', '')\r\n    .replace('https://twitter.com/', '')\r\n    .replace('twitter.com/', '');\r\n};\r\n"]},"metadata":{},"sourceType":"module"}