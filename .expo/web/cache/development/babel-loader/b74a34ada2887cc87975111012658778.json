{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nvar _jsxFileName = \"C:\\\\Users\\\\codemaxx\\\\Desktop\\\\iBlood\\\\node_modules\\\\react-native-markdown-renderer\\\\src\\\\lib\\\\AstRenderer.js\";\nimport React, { Component, PropTypes } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport getUniqueID from \"./util/getUniqueID\";\nexport function rootRenderRule(children, styles) {\n  return React.createElement(View, {\n    key: getUniqueID(),\n    style: styles.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 10\n    }\n  }, children);\n}\n\nvar AstRenderer = function AstRenderer(renderRules, style) {\n  var _this = this;\n\n  _classCallCheck(this, AstRenderer);\n\n  this.getRenderFunction = function (type) {\n    var renderFunction = _this._renderRules[type];\n\n    if (!renderFunction) {\n      throw new Error(type + \" renderRule not defined example: <Markdown rules={renderRules}>\");\n    }\n\n    return renderFunction;\n  };\n\n  this.renderNode = function (node, parentNodes) {\n    var renderFunction = _this.getRenderFunction(node.type);\n\n    var parents = _toConsumableArray(parentNodes);\n\n    parents.unshift(node);\n\n    if (node.type === \"text\") {\n      return renderFunction(node, [], parentNodes, _this._style);\n    }\n\n    var children = node.children.map(function (value) {\n      return _this.renderNode(value, parents);\n    });\n    return renderFunction(node, children, parentNodes, _this._style);\n  };\n\n  this.render = function (nodes) {\n    var children = nodes.map(function (value) {\n      return _this.renderNode(value, []);\n    });\n    return rootRenderRule(children, _this._style);\n  };\n\n  this._renderRules = renderRules;\n  this._style = style;\n};\n\nexport { AstRenderer as default };","map":{"version":3,"sources":["C:/Users/codemaxx/Desktop/iBlood/node_modules/react-native-markdown-renderer/src/lib/AstRenderer.js"],"names":["React","Component","PropTypes","getUniqueID","rootRenderRule","children","styles","root","AstRenderer","renderRules","style","getRenderFunction","type","renderFunction","_renderRules","Error","renderNode","node","parentNodes","parents","unshift","_style","map","value","render","nodes"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,QAA4C,OAA5C;;;AAEA,OAAOC,WAAP;AAEA,OAAO,SAASC,cAAT,CAAwBC,QAAxB,EAAkCC,MAAlC,EAA0C;AAC/C,SAAO,oBAAC,IAAD;AAAM,IAAA,GAAG,EAAEH,WAAW,EAAtB;AAA0B,IAAA,KAAK,EAAEG,MAAM,CAACC,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+CF,QAA/C,CAAP;AACD;;IAKoBG,W,GAMnB,qBAAYC,WAAZ,EAAyBC,KAAzB,EAAgC;AAAA;;AAAA;;AAAA,OAUhCC,iBAVgC,GAUZ,UAAAC,IAAI,EAAI;AAC1B,QAAMC,cAAc,GAAG,KAAI,CAACC,YAAL,CAAkBF,IAAlB,CAAvB;;AAEA,QAAI,CAACC,cAAL,EAAqB;AACnB,YAAM,IAAIE,KAAJ,CACDH,IADC,qEAAN;AAGD;;AACD,WAAOC,cAAP;AACD,GAnB+B;;AAAA,OA2BhCG,UA3BgC,GA2BnB,UAACC,IAAD,EAAOC,WAAP,EAAuB;AAClC,QAAML,cAAc,GAAG,KAAI,CAACF,iBAAL,CAAuBM,IAAI,CAACL,IAA5B,CAAvB;;AAEA,QAAMO,OAAO,sBAAOD,WAAP,CAAb;;AACAC,IAAAA,OAAO,CAACC,OAAR,CAAgBH,IAAhB;;AAEA,QAAIA,IAAI,CAACL,IAAL,KAAc,MAAlB,EAA0B;AACxB,aAAOC,cAAc,CAACI,IAAD,EAAO,EAAP,EAAWC,WAAX,EAAwB,KAAI,CAACG,MAA7B,CAArB;AACD;;AAED,QAAMhB,QAAQ,GAAGY,IAAI,CAACZ,QAAL,CAAciB,GAAd,CAAkB,UAAAC,KAAK,EAAI;AAC1C,aAAO,KAAI,CAACP,UAAL,CAAgBO,KAAhB,EAAuBJ,OAAvB,CAAP;AACD,KAFgB,CAAjB;AAIA,WAAON,cAAc,CAACI,IAAD,EAAOZ,QAAP,EAAiBa,WAAjB,EAA8B,KAAI,CAACG,MAAnC,CAArB;AACD,GA1C+B;;AAAA,OAiDhCG,MAjDgC,GAiDvB,UAAAC,KAAK,EAAI;AAChB,QAAMpB,QAAQ,GAAGoB,KAAK,CAACH,GAAN,CAAU,UAAAC,KAAK;AAAA,aAAI,KAAI,CAACP,UAAL,CAAgBO,KAAhB,EAAuB,EAAvB,CAAJ;AAAA,KAAf,CAAjB;AACA,WAAOnB,cAAc,CAACC,QAAD,EAAW,KAAI,CAACgB,MAAhB,CAArB;AACD,GApD+B;;AAC9B,OAAKP,YAAL,GAAoBL,WAApB;AACA,OAAKY,MAAL,GAAcX,KAAd;AACD,C;;SATkBF,W","sourcesContent":["import React, { Component, PropTypes } from \"react\";\nimport { Text, View } from \"react-native\";\nimport getUniqueID from \"./util/getUniqueID\";\n\nexport function rootRenderRule(children, styles) {\n  return <View key={getUniqueID()} style={styles.root}>{children}</View>;\n}\n\n/**\n *\n */\nexport default class AstRenderer {\n  /**\n   *\n   * @param {Object.<string, function>} renderRules\n   * @param {any} style\n   */\n  constructor(renderRules, style) {\n    this._renderRules = renderRules;\n    this._style = style;\n  }\n\n  /**\n   *\n   * @param {string} type\n   * @return {string}\n   */\n  getRenderFunction = type => {\n    const renderFunction = this._renderRules[type];\n\n    if (!renderFunction) {\n      throw new Error(\n        `${type} renderRule not defined example: <Markdown rules={renderRules}>`\n      );\n    }\n    return renderFunction;\n  };\n\n  /**\n   *\n   * @param node\n   * @param parentNodes\n   * @return {*}\n   */\n  renderNode = (node, parentNodes) => {\n    const renderFunction = this.getRenderFunction(node.type);\n\n    const parents = [...parentNodes];\n    parents.unshift(node);\n\n    if (node.type === \"text\") {\n      return renderFunction(node, [], parentNodes, this._style);\n    }\n\n    const children = node.children.map(value => {\n      return this.renderNode(value, parents);\n    });\n\n    return renderFunction(node, children, parentNodes, this._style);\n  };\n\n  /**\n   *\n   * @param nodes\n   * @return {*}\n   */\n  render = nodes => {\n    const children = nodes.map(value => this.renderNode(value, []));\n    return rootRenderRule(children, this._style);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}