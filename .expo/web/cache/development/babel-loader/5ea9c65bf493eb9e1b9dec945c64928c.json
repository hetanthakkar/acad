{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { PERC_SUPPORTED_STYLES, STYLESETS, ABSOLUTE_FONT_SIZE, stylePropTypes } from \"./HTMLUtils\";\nimport { generateDefaultBlockStyles, generateDefaultTextStyles } from \"./HTMLDefaultStyles\";\nexport function cssStringToObject(str) {\n  return str.split(\";\").map(function (prop) {\n    return prop.split(\":\");\n  }).reduce(function (acc, prop) {\n    if (prop.length === 2) {\n      acc[prop[0].trim()] = prop[1].trim();\n    }\n\n    return acc;\n  }, {});\n}\nexport function cssObjectToString(obj) {\n  var string = \"\";\n  Object.keys(obj).forEach(function (style) {\n    string += style + \":\" + obj[style] + \";\";\n  });\n  return string;\n}\nexport function _constructStyles(_ref) {\n  var tagName = _ref.tagName,\n      htmlAttribs = _ref.htmlAttribs,\n      passProps = _ref.passProps,\n      additionalStyles = _ref.additionalStyles,\n      _ref$styleSet = _ref.styleSet,\n      styleSet = _ref$styleSet === void 0 ? \"VIEW\" : _ref$styleSet,\n      baseFontSize = _ref.baseFontSize;\n  var defaultTextStyles = generateDefaultTextStyles(baseFontSize);\n  var defaultBlockStyles = generateDefaultBlockStyles(baseFontSize);\n  passProps.ignoredStyles.forEach(function (ignoredStyle) {\n    htmlAttribs[ignoredStyle] && delete htmlAttribs[ignoredStyle];\n  });\n  var style = [(styleSet === \"VIEW\" ? defaultBlockStyles : defaultTextStyles)[tagName], passProps.tagsStyles ? passProps.tagsStyles[tagName] : undefined, _getElementClassStyles(htmlAttribs, passProps.classesStyles), htmlAttribs.style ? cssStringToRNStyle(htmlAttribs.style, STYLESETS[styleSet], _objectSpread(_objectSpread({}, passProps), {}, {\n    parentTag: tagName\n  })) : undefined];\n\n  if (additionalStyles) {\n    style = style.concat(!additionalStyles.length ? [additionalStyles] : additionalStyles);\n  }\n\n  return style.filter(function (style) {\n    return style !== undefined;\n  });\n}\nexport function computeTextStyles(element, passProps) {\n  var finalStyle = {};\n\n  var parentStyles = _recursivelyComputeParentTextStyles(element, passProps);\n\n  parentStyles.forEach(function (styles) {\n    Object.keys(styles).forEach(function (styleKey) {\n      var styleValue = styles[styleKey];\n\n      if (!finalStyle[styleKey]) {\n        finalStyle[styleKey] = styleValue;\n      }\n    });\n  });\n  return _objectSpread(_objectSpread({}, passProps.baseFontStyle), finalStyle);\n}\n\nfunction _recursivelyComputeParentTextStyles(element, passProps) {\n  var styles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var attribs = element.attribs,\n      name = element.name;\n  var classesStyles = passProps.classesStyles,\n      tagsStyles = passProps.tagsStyles,\n      defaultTextStyles = passProps.defaultTextStyles;\n  var HTMLAttribsStyles = attribs && attribs.style ? cssStringToRNStyle(attribs.style, STYLESETS.TEXT, passProps) : {};\n\n  var classStyles = _getElementClassStyles(attribs, classesStyles);\n\n  var userTagStyles = tagsStyles[name];\n  var defaultTagStyles = defaultTextStyles[name];\n\n  var mergedStyles = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, defaultTagStyles), userTagStyles), classStyles), HTMLAttribsStyles);\n\n  styles.push(mergedStyles);\n\n  if (element.parent) {\n    return _recursivelyComputeParentTextStyles(element.parent, passProps, styles);\n  } else {\n    return styles;\n  }\n}\n\nexport function _getElementClassStyles(htmlAttribs) {\n  var classesStyles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var elementClasses = _getElementCSSClasses(htmlAttribs);\n\n  var styles = {};\n  elementClasses.forEach(function (className) {\n    if (classesStyles[className]) {\n      styles = _objectSpread(_objectSpread({}, styles), classesStyles[className]);\n    }\n  });\n  return styles;\n}\nexport function _getElementCSSClasses(htmlAttribs) {\n  if (!htmlAttribs || !htmlAttribs.class) {\n    return [];\n  }\n\n  return htmlAttribs.class.split(\" \");\n}\n\nfunction cssToRNStyle(css, styleset, _ref2) {\n  var emSize = _ref2.emSize,\n      ptSize = _ref2.ptSize,\n      ignoredStyles = _ref2.ignoredStyles,\n      allowedStyles = _ref2.allowedStyles;\n  var styleProps = stylePropTypes[styleset];\n  return Object.keys(css).filter(function (key) {\n    return allowedStyles ? allowedStyles.indexOf(key) !== -1 : true;\n  }).filter(function (key) {\n    return (ignoredStyles || []).indexOf(key) === -1;\n  }).map(function (key) {\n    return [key, css[key]];\n  }).map(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n        key = _ref4[0],\n        value = _ref4[1];\n\n    return [key.split(\"-\").map(function (item, index) {\n      return index === 0 ? item : item[0].toUpperCase() + item.substr(1);\n    }).join(\"\"), value];\n  }).map(function (_ref5) {\n    var _ref6 = _slicedToArray(_ref5, 2),\n        key = _ref6[0],\n        value = _ref6[1];\n\n    if (styleProps.indexOf(key) === -1) {\n      return undefined;\n    }\n\n    if (typeof value === \"string\") {\n      value = value.replace(/\\s*!\\s*important/, \"\");\n\n      if (key === \"display\" && [\"flex\", \"none\"].indexOf(value) === -1) {\n        return [key, \"flex\"];\n      }\n\n      if (key === \"textAlign\") {\n        if ([\"left\", \"right\", \"justify\", \"auto\", \"center\"].indexOf(value) !== -1) {\n          return [key, value];\n        }\n\n        if (value === \"start\") {\n          return [key, \"left\"];\n        }\n\n        if (value === \"end\") {\n          return [key, \"right\"];\n        }\n\n        return undefined;\n      }\n\n      if (value.replace(/[-_]/g, \"\").search(/\\binherit\\b|\\bnormal\\b|\\bnone\\b|(calc|var)\\(.*\\)/) !== -1) {\n        return undefined;\n      }\n\n      if (value.search(/[\\d.]+%/) !== -1 && PERC_SUPPORTED_STYLES.indexOf(key) !== -1) {\n        return [key, value];\n      }\n\n      if (value.search(/[\\d.]+em/) !== -1) {\n        var pxSize = parseFloat(value.replace(\"em\", \"\")) * emSize;\n        return [key, pxSize];\n      }\n\n      if (value.search(/[\\d.]+pt/) !== -1) {\n        var _pxSize = parseFloat(value.replace(\"pt\", \"\")) * ptSize;\n\n        return [key, _pxSize];\n      }\n\n      var numericValue = parseFloat(value.replace(\"px\", \"\"));\n\n      if (key !== \"fontWeight\" && !isNaN(numericValue)) {\n        if (styleProps.indexOf(key) !== -1) {\n          return [key, numericValue];\n        }\n      }\n\n      if (key === \"fontSize\") {\n        return mapAbsoluteFontSize(key, value);\n      }\n    }\n\n    return [key, value];\n  }).filter(function (prop) {\n    return prop !== undefined;\n  }).reduce(function (acc, _ref7) {\n    var _ref8 = _slicedToArray(_ref7, 2),\n        key = _ref8[0],\n        value = _ref8[1];\n\n    acc[key] = value;\n    return acc;\n  }, {});\n}\n\nfunction mapAbsoluteFontSize(key, value) {\n  var fontSize = value;\n\n  if (ABSOLUTE_FONT_SIZE.hasOwnProperty(value)) {\n    fontSize = ABSOLUTE_FONT_SIZE[value];\n  }\n\n  return [key, fontSize];\n}\n\nexport function cssStringToRNStyle(str) {\n  var styleset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : STYLESETS.TEXT;\n  var options = arguments.length > 2 ? arguments[2] : undefined;\n  return cssToRNStyle(cssStringToObject(str), styleset, options);\n}","map":{"version":3,"sources":["C:/Users/codemaxx/Desktop/iBlood/node_modules/react-native-render-html/src/HTMLStyles.js"],"names":["PERC_SUPPORTED_STYLES","STYLESETS","ABSOLUTE_FONT_SIZE","stylePropTypes","generateDefaultBlockStyles","generateDefaultTextStyles","cssStringToObject","str","split","map","prop","reduce","acc","length","trim","cssObjectToString","obj","string","Object","keys","forEach","style","_constructStyles","tagName","htmlAttribs","passProps","additionalStyles","styleSet","baseFontSize","defaultTextStyles","defaultBlockStyles","ignoredStyles","ignoredStyle","tagsStyles","undefined","_getElementClassStyles","classesStyles","cssStringToRNStyle","parentTag","concat","filter","computeTextStyles","element","finalStyle","parentStyles","_recursivelyComputeParentTextStyles","styles","styleKey","styleValue","baseFontStyle","attribs","name","HTMLAttribsStyles","TEXT","classStyles","userTagStyles","defaultTagStyles","mergedStyles","push","parent","elementClasses","_getElementCSSClasses","className","class","cssToRNStyle","css","styleset","emSize","ptSize","allowedStyles","styleProps","key","indexOf","value","item","index","toUpperCase","substr","join","replace","search","pxSize","parseFloat","numericValue","isNaN","mapAbsoluteFontSize","fontSize","hasOwnProperty","options"],"mappings":"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","sourcesContent":["import {\n  PERC_SUPPORTED_STYLES,\n  STYLESETS,\n  ABSOLUTE_FONT_SIZE,\n  stylePropTypes,\n} from \"./HTMLUtils\";\nimport {\n  generateDefaultBlockStyles,\n  generateDefaultTextStyles,\n} from \"./HTMLDefaultStyles\";\n\n/**\n * Converts a html style string to an object\n * @param str: the style string\n * @return the style as an obect\n */\nexport function cssStringToObject(str) {\n  return str\n    .split(\";\")\n    .map((prop) => prop.split(\":\"))\n    .reduce((acc, prop) => {\n      if (prop.length === 2) {\n        acc[prop[0].trim()] = prop[1].trim();\n      }\n      return acc;\n    }, {});\n}\n\nexport function cssObjectToString(obj) {\n  let string = \"\";\n  Object.keys(obj).forEach((style) => {\n    string += `${style}:${obj[style]};`;\n  });\n  return string;\n}\n\n/**\n * Helper that composes styles with the default style for a tag, the \"style\" attribute and\n * any given addiitional style. Checks everything against the style sets of views, images,\n * or texts with prop-types.\n * @export\n * @param {any} { tagName, htmlAttribs, passProps, additionalStyles, styleSet = 'VIEW' }\n * @returns {object}\n */\nexport function _constructStyles({\n  tagName,\n  htmlAttribs,\n  passProps,\n  additionalStyles,\n  styleSet = \"VIEW\",\n  baseFontSize,\n}) {\n  let defaultTextStyles = generateDefaultTextStyles(baseFontSize);\n  let defaultBlockStyles = generateDefaultBlockStyles(baseFontSize);\n\n  passProps.ignoredStyles.forEach((ignoredStyle) => {\n    htmlAttribs[ignoredStyle] && delete htmlAttribs[ignoredStyle];\n  });\n\n  let style = [\n    (styleSet === \"VIEW\" ? defaultBlockStyles : defaultTextStyles)[tagName],\n    passProps.tagsStyles ? passProps.tagsStyles[tagName] : undefined,\n    _getElementClassStyles(htmlAttribs, passProps.classesStyles),\n    htmlAttribs.style\n      ? cssStringToRNStyle(htmlAttribs.style, STYLESETS[styleSet], {\n          ...passProps,\n          parentTag: tagName,\n        })\n      : undefined,\n  ];\n\n  if (additionalStyles) {\n    style = style.concat(\n      !additionalStyles.length ? [additionalStyles] : additionalStyles\n    );\n  }\n\n  return style.filter((style) => style !== undefined);\n}\n\n/**\n * Computes the styles of a text node\n * @export\n * @param {any} element parsed DOM node of text\n * @param {any} passProps set of props from the HTML component\n * @returns {object} react-native styles\n */\nexport function computeTextStyles(element, passProps) {\n  let finalStyle = {};\n\n  // Construct an array with the styles of each level of the text node, ie :\n  // [element, parent1, parent2, parent3...]\n  const parentStyles = _recursivelyComputeParentTextStyles(element, passProps);\n\n  // Only merge the keys that aren't yet applied to the final object. ie:\n  // if fontSize is already set in the first iteration, ignore the fontSize that\n  // we got from the 3rd iteration because of a class for instance, hence\n  // respecting the proper style inheritance\n  parentStyles.forEach((styles) => {\n    Object.keys(styles).forEach((styleKey) => {\n      const styleValue = styles[styleKey];\n      if (!finalStyle[styleKey]) {\n        finalStyle[styleKey] = styleValue;\n      }\n    });\n  });\n\n  // Finally, try to add the baseFontStyle values to add pontentially missing\n  // styles to each text node\n  return { ...passProps.baseFontStyle, ...finalStyle };\n}\n\nfunction _recursivelyComputeParentTextStyles(element, passProps, styles = []) {\n  const { attribs, name } = element;\n  const { classesStyles, tagsStyles, defaultTextStyles } = passProps;\n\n  // Construct every style for this node\n  const HTMLAttribsStyles =\n    attribs && attribs.style\n      ? cssStringToRNStyle(attribs.style, STYLESETS.TEXT, passProps)\n      : {};\n  const classStyles = _getElementClassStyles(attribs, classesStyles);\n  const userTagStyles = tagsStyles[name];\n  const defaultTagStyles = defaultTextStyles[name];\n\n  // Merge those according to their priority level\n  const mergedStyles = {\n    ...defaultTagStyles,\n    ...userTagStyles,\n    ...classStyles,\n    ...HTMLAttribsStyles,\n  };\n\n  styles.push(mergedStyles);\n\n  if (element.parent) {\n    // Keep looping recursively if this node has parents\n    return _recursivelyComputeParentTextStyles(\n      element.parent,\n      passProps,\n      styles\n    );\n  } else {\n    return styles;\n  }\n}\n\n/**\n * Creates a set of style from an array of classes asosciated to a node.\n * @export\n * @param {any} htmlAttribs\n * @param {any} [classesStyles={}]\n * @returns {object}\n */\nexport function _getElementClassStyles(htmlAttribs, classesStyles = {}) {\n  const elementClasses = _getElementCSSClasses(htmlAttribs);\n  let styles = {};\n  elementClasses.forEach((className) => {\n    if (classesStyles[className]) {\n      styles = { ...styles, ...classesStyles[className] };\n    }\n  });\n  return styles;\n}\n\n/**\n * Simple helper that returns an array of classes of a node.\n * @export\n * @param {any} htmlAttribs\n * @returns {array}\n */\nexport function _getElementCSSClasses(htmlAttribs) {\n  if (!htmlAttribs || !htmlAttribs.class) {\n    return [];\n  }\n  return htmlAttribs.class.split(\" \");\n}\n\n/**\n * Converts a html style to its equavalent react native style\n * @param {object} css: object of key value css strings\n * @param {string} styleset: the styleset to convert the styles against\n * @param {object} { parentTag, emSize, ignoredStyles }\n * @returns {object}\n */\nfunction cssToRNStyle(\n  css,\n  styleset,\n  { emSize, ptSize, ignoredStyles, allowedStyles }\n) {\n  const styleProps = stylePropTypes[styleset];\n  return Object.keys(css)\n    .filter((key) => (allowedStyles ? allowedStyles.indexOf(key) !== -1 : true))\n    .filter((key) => (ignoredStyles || []).indexOf(key) === -1)\n    .map((key) => [key, css[key]])\n    .map(([key, value]) => {\n      // Key convert\n      return [\n        key\n          .split(\"-\")\n          .map((item, index) =>\n            index === 0 ? item : item[0].toUpperCase() + item.substr(1)\n          )\n          .join(\"\"),\n        value,\n      ];\n    })\n    .map(([key, value]) => {\n      if (styleProps.indexOf(key) === -1) {\n        return undefined;\n      }\n      if (typeof value === \"string\") {\n        value = value.replace(/\\s*!\\s*important/, \"\");\n        if (key === \"display\" && [\"flex\", \"none\"].indexOf(value) === -1) {\n          return [key, \"flex\"];\n        }\n        if (key === \"textAlign\") {\n          if (\n            [\"left\", \"right\", \"justify\", \"auto\", \"center\"].indexOf(value) !== -1\n          ) {\n            return [key, value];\n          }\n          if (value === \"start\") {\n            return [key, \"left\"];\n          }\n          if (value === \"end\") {\n            return [key, \"right\"];\n          }\n          return undefined;\n        }\n        if (\n          value\n            .replace(/[-_]/g, \"\")\n            .search(/\\binherit\\b|\\bnormal\\b|\\bnone\\b|(calc|var)\\(.*\\)/) !== -1\n        ) {\n          return undefined;\n        }\n        // See if we can use the percentage directly\n        if (\n          value.search(/[\\d.]+%/) !== -1 &&\n          PERC_SUPPORTED_STYLES.indexOf(key) !== -1\n        ) {\n          return [key, value];\n        }\n        if (value.search(/[\\d.]+em/) !== -1) {\n          const pxSize = parseFloat(value.replace(\"em\", \"\")) * emSize;\n          return [key, pxSize];\n        }\n        if (value.search(/[\\d.]+pt/) !== -1) {\n          const pxSize = parseFloat(value.replace(\"pt\", \"\")) * ptSize;\n          return [key, pxSize];\n        }\n        // See if we can convert a 20px to a 20 automagically\n        const numericValue = parseFloat(value.replace(\"px\", \"\"));\n        if (key !== \"fontWeight\" && !isNaN(numericValue)) {\n          if (styleProps.indexOf(key) !== -1) {\n            return [key, numericValue];\n          }\n        }\n        if (key === \"fontSize\") {\n          return mapAbsoluteFontSize(key, value);\n        }\n      }\n      return [key, value];\n    })\n    .filter((prop) => prop !== undefined)\n    .reduce((acc, [key, value]) => {\n      acc[key] = value;\n      return acc;\n    }, {});\n}\n\n/**\n * @param {string} key: the key of style\n * @param {string} value: the value of style\n * @return {array}\n */\nfunction mapAbsoluteFontSize(key, value) {\n  let fontSize = value;\n  if (ABSOLUTE_FONT_SIZE.hasOwnProperty(value)) {\n    fontSize = ABSOLUTE_FONT_SIZE[value];\n  }\n  return [key, fontSize];\n}\n\n/**\n * @param str: the css style string\n * @param styleset=STYLESETS.TEXT: the styleset to convert the styles against\n * @return a react native style object\n */\nexport function cssStringToRNStyle(str, styleset = STYLESETS.TEXT, options) {\n  return cssToRNStyle(cssStringToObject(str), styleset, options);\n}\n"]},"metadata":{},"sourceType":"module"}