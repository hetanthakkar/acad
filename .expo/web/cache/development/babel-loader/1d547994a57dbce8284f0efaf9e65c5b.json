{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nvar _jsxFileName = \"C:\\\\Users\\\\codemaxx\\\\Desktop\\\\iBlood\\\\node_modules\\\\react-native-markdown-renderer\\\\src\\\\lib\\\\util\\\\applyStyle.js\";\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nexport default function applyStyle(children, styles, type) {\n  if (!(styles instanceof Array)) {\n    styles = [styles];\n  }\n\n  return children.map(function (child) {\n    if (child.type.displayName === type) {\n      return React.createElement(Text, _extends({\n        key: child.key\n      }, child.props, {\n        style: [].concat(child.props.style, styles),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 14\n        }\n      }));\n    }\n\n    return child;\n  });\n}","map":{"version":3,"sources":["C:/Users/codemaxx/Desktop/iBlood/node_modules/react-native-markdown-renderer/src/lib/util/applyStyle.js"],"names":["React","Component","applyStyle","children","styles","type","Array","map","child","displayName","key","props","concat","style"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AASA,eAAe,SAASC,UAAT,CAAoBC,QAApB,EAA8BC,MAA9B,EAAsCC,IAAtC,EAA4C;AACzD,MAAI,EAAED,MAAM,YAAYE,KAApB,CAAJ,EAAgC;AAC9BF,IAAAA,MAAM,GAAG,CAACA,MAAD,CAAT;AACD;;AAED,SAAOD,QAAQ,CAACI,GAAT,CAAa,UAAAC,KAAK,EAAI;AAC3B,QAAIA,KAAK,CAACH,IAAN,CAAWI,WAAX,KAA2BJ,IAA/B,EAAqC;AACnC,aAAO,oBAAC,IAAD;AAAM,QAAA,GAAG,EAAEG,KAAK,CAACE;AAAjB,SAA0BF,KAAK,CAACG,KAAhC;AAAuC,QAAA,KAAK,EAAE,GAAGC,MAAH,CAAUJ,KAAK,CAACG,KAAN,CAAYE,KAAtB,EAA6BT,MAA7B,CAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;AAED,WAAOI,KAAP;AACD,GANM,CAAP;AAOD","sourcesContent":["import React, { Component } from 'react';\nimport { Text } from 'react-native';\n\n/**\n *\n * @param Array<any> children\n * @param Array<number> styles\n * @param {string} type\n */\nexport default function applyStyle(children, styles, type) {\n  if (!(styles instanceof Array)) {\n    styles = [styles];\n  }\n\n  return children.map(child => {\n    if (child.type.displayName === type) {\n      return <Text key={child.key} {...child.props} style={[].concat(child.props.style, styles)} />;\n    }\n\n    return child;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}