{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\codemaxx\\\\Desktop\\\\iBlood\\\\screens\\\\QRScreens\\\\Contact.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport { query } from 'urql';\nimport { GQL } from \"../../constants\";\nimport { addContact } from \"../../utils\";\nimport client from \"../../utils/gqlClient\";\nimport QRScreen from \"./QRScreen\";\nimport { saveNewContact } from \"../../utils/storage\";\nimport QR_CONTACT_QUERY from \"../../data/qrContactQuery\";\n\nvar QRContactScannerModalNavigation = function (_React$Component) {\n  _inherits(QRContactScannerModalNavigation, _React$Component);\n\n  var _super = _createSuper(QRContactScannerModalNavigation);\n\n  function QRContactScannerModalNavigation() {\n    var _this;\n\n    _classCallCheck(this, QRContactScannerModalNavigation);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this._handleContactBarCodeRead = function _callee2(data) {\n      var navigation, value, tickets, uuid, contactRef, variables, scannedContact, contact;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              navigation = _this.props.navigation;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@MySuperStore2019:tickets'));\n\n            case 3:\n              value = _context2.sent;\n              tickets = JSON.parse(value) || [];\n              uuid = '';\n              contactRef = data.data;\n              tickets.map(function _callee(ticket) {\n                var variables, scannedContact, contact;\n                return _regeneratorRuntime.async(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        ticket.checkinLists.map(function (ch) {\n                          if (ch.mainEvent) {\n                            uuid = ticket.uuid;\n                          }\n                        });\n                        variables = {\n                          slug: GQL.slug,\n                          uuid: uuid,\n                          q: contactRef\n                        };\n                        _context.next = 4;\n                        return _regeneratorRuntime.awrap(client.query({\n                          query: QR_CONTACT_QUERY,\n                          variables: variables\n                        }));\n\n                      case 4:\n                        scannedContact = _context.sent;\n\n                        if (scannedContact && scannedContact.data && scannedContact.data.events && scannedContact.data.events[0] && scannedContact.data.events[0].attendees && scannedContact.data.events[0].attendees[0]) {\n                          contact = scannedContact.data.events[0].attendees[0];\n                          console.log('new contact', contact);\n                          console.log('new contact query', QR_CONTACT_QUERY);\n                          console.log('new contact query variables', variables);\n                          saveNewContact(contact, navigation);\n                        }\n\n                      case 6:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, null, null, null, Promise);\n              });\n              variables = {\n                slug: GQL.slug,\n                uuid: uuid,\n                q: contactRef\n              };\n              _context2.next = 11;\n              return _regeneratorRuntime.awrap(client.query({\n                query: QR_CONTACT_QUERY,\n                variables: variables\n              }));\n\n            case 11:\n              scannedContact = _context2.sent;\n\n              if (!(scannedContact && scannedContact.data && scannedContact.data.events && scannedContact.data.events[0] && scannedContact.data.events[0].attendees && scannedContact.data.events[0].attendees[0])) {\n                _context2.next = 17;\n                break;\n              }\n\n              contact = scannedContact.data.events[0].attendees[0];\n              _context2.next = 16;\n              return _regeneratorRuntime.awrap(addContact(contact));\n\n            case 16:\n              navigation.navigate('Contacts');\n\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(QRContactScannerModalNavigation, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(QRScreen, {\n        title: \"Scan a badge's QR code\",\n        onBarCodeScanned: this._handleContactBarCodeRead,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return QRContactScannerModalNavigation;\n}(React.Component);\n\nexport { QRContactScannerModalNavigation as default };","map":{"version":3,"sources":["C:/Users/codemaxx/Desktop/iBlood/screens/QRScreens/Contact.js"],"names":["React","query","GQL","addContact","client","QRScreen","saveNewContact","QR_CONTACT_QUERY","QRContactScannerModalNavigation","_handleContactBarCodeRead","data","navigation","props","AsyncStorage","getItem","value","tickets","JSON","parse","uuid","contactRef","map","ticket","checkinLists","ch","mainEvent","variables","slug","q","scannedContact","events","attendees","contact","console","log","navigate","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {AsyncStorage} from 'react-native';\r\nimport {query} from 'urql';\r\n\r\nimport {GQL} from '../../constants';\r\nimport {addContact} from '../../utils';\r\nimport client from '../../utils/gqlClient';\r\nimport QRScreen from './QRScreen';\r\nimport {saveNewContact} from '../../utils/storage';\r\nimport QR_CONTACT_QUERY from '../../data/qrContactQuery';\r\n\r\nexport default class QRContactScannerModalNavigation extends React.Component {\r\n  _handleContactBarCodeRead = async data => {\r\n    let navigation = this.props.navigation;\r\n    const value = await AsyncStorage.getItem('@MySuperStore2019:tickets');\r\n    let tickets = JSON.parse(value) || [];\r\n    let uuid = '';\r\n    let contactRef = data.data;\r\n    tickets.map(async ticket => {\r\n      ticket.checkinLists.map(ch => {\r\n        if (ch.mainEvent) {\r\n          uuid = ticket.uuid;\r\n        }\r\n      });\r\n      let variables = {slug: GQL.slug, uuid: uuid, q: contactRef};\r\n\r\n      let scannedContact = await client.query({\r\n        query: QR_CONTACT_QUERY,\r\n        variables: variables,\r\n      });\r\n      if (\r\n        scannedContact &&\r\n        scannedContact.data &&\r\n        scannedContact.data.events &&\r\n        scannedContact.data.events[0] &&\r\n        scannedContact.data.events[0].attendees &&\r\n        scannedContact.data.events[0].attendees[0]\r\n      ) {\r\n        let contact = scannedContact.data.events[0].attendees[0];\r\n        console.log('new contact', contact);\r\n        console.log('new contact query', QR_CONTACT_QUERY);\r\n        console.log('new contact query variables', variables);\r\n        saveNewContact(contact, navigation);\r\n      }\r\n    });\r\n    let variables = {slug: GQL.slug, uuid: uuid, q: contactRef};\r\n    let scannedContact = await client.query({\r\n      query: QR_CONTACT_QUERY,\r\n      variables: variables,\r\n    });\r\n    if (\r\n      scannedContact &&\r\n      scannedContact.data &&\r\n      scannedContact.data.events &&\r\n      scannedContact.data.events[0] &&\r\n      scannedContact.data.events[0].attendees &&\r\n      scannedContact.data.events[0].attendees[0]\r\n    ) {\r\n      let contact = scannedContact.data.events[0].attendees[0];\r\n      await addContact(contact);\r\n      navigation.navigate('Contacts');\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <QRScreen\r\n        title=\"Scan a badge's QR code\"\r\n        onBarCodeScanned={this._handleContactBarCodeRead}\r\n      />\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}