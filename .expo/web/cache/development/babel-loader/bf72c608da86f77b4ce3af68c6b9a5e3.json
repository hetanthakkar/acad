{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\codemaxx\\\\Desktop\\\\iBlood\\\\screens\\\\QRScreens\\\\Identify.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport { Permissions, Notifications } from 'expo';\nimport QRScreen from \"./QRScreen\";\nimport { query } from 'urql';\nimport { GQL } from \"../../constants\";\nimport client from \"../../utils/gqlClient\";\nimport QR_QUERY from \"../../data/qrQuery\";\nimport UPDATE_PUSH_TOKEN_QUERY from \"../../data/updatePushTokenQuery\";\n\nvar QRScannerModalNavigation = function (_React$Component) {\n  _inherits(QRScannerModalNavigation, _React$Component);\n\n  var _super = _createSuper(QRScannerModalNavigation);\n\n  _createClass(QRScannerModalNavigation, [{\n    key: \"setTickets\",\n    value: function setTickets(tickets) {\n      return _regeneratorRuntime.async(function setTickets$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem('@MySuperStore2019:tickets', tickets));\n\n            case 3:\n              console.log('set tickets to tickets:');\n              console.log(tickets);\n              _context.next = 11;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n              return _context.abrupt(\"return\", []);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 7]], Promise);\n    }\n  }, {\n    key: \"registerForPushNotificationsAsync\",\n    value: function registerForPushNotificationsAsync(uuid) {\n      var _await$Permissions$ge, existingStatus, finalStatus, _await$Permissions$as, status, token, variables, value;\n\n      return _regeneratorRuntime.async(function registerForPushNotificationsAsync$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(Permissions.getAsync(Permissions.NOTIFICATIONS));\n\n            case 2:\n              _await$Permissions$ge = _context2.sent;\n              existingStatus = _await$Permissions$ge.status;\n              finalStatus = existingStatus;\n\n              if (!(existingStatus !== 'granted')) {\n                _context2.next = 11;\n                break;\n              }\n\n              _context2.next = 8;\n              return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.NOTIFICATIONS));\n\n            case 8:\n              _await$Permissions$as = _context2.sent;\n              status = _await$Permissions$as.status;\n              finalStatus = status;\n\n            case 11:\n              if (!(finalStatus !== 'granted')) {\n                _context2.next = 13;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 13:\n              _context2.next = 15;\n              return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n            case 15:\n              token = _context2.sent;\n              variables = {\n                uuid: uuid,\n                expoPushToken: token\n              };\n              _context2.next = 19;\n              return _regeneratorRuntime.awrap(client.mutate({\n                mutation: UPDATE_PUSH_TOKEN_QUERY,\n                variables: variables\n              }));\n\n            case 19:\n              value = _context2.sent;\n\n              if (value) {\n                console.log('updated attendee', value, token, uuid);\n              }\n\n              console.log('token', token, uuid);\n\n            case 22:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  function QRScannerModalNavigation(props) {\n    var _this;\n\n    _classCallCheck(this, QRScannerModalNavigation);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      loading: false\n    };\n\n    _this._handleBarCodeRead = function _callee(data) {\n      var _data, variables, navigation, _result$data, _result$data$events, result, me, value, tickets, newTickets, found, existingTickets, stringifiedTickets;\n\n      return _regeneratorRuntime.async(function _callee$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!_this.state.loading) {\n                _context3.next = 2;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 2:\n              _this.setState({\n                loading: true\n              });\n\n              if (!data || !data.data || data.data === '') {\n                _data = {\n                  data: _this.props.navigation.state.params.uuid\n                };\n              }\n\n              variables = {\n                slug: GQL.slug,\n                uuid: data.data\n              };\n              navigation = _this.props.navigation;\n              _context3.prev = 6;\n              _context3.next = 9;\n              return _regeneratorRuntime.awrap(client.query({\n                query: QR_QUERY,\n                variables: variables\n              }));\n\n            case 9:\n              result = _context3.sent;\n              console.log('slug', GQL.slug);\n\n              if (!(result == null ? void 0 : (_result$data = result.data) == null ? void 0 : (_result$data$events = _result$data.events) == null ? void 0 : _result$data$events[0])) {\n                _context3.next = 18;\n                break;\n              }\n\n              me = result.data.events[0].me;\n\n              if (!(me === null)) {\n                _context3.next = 16;\n                break;\n              }\n\n              Alert.alert('Ticket not found!');\n              return _context3.abrupt(\"return\");\n\n            case 16:\n              _context3.next = 20;\n              break;\n\n            case 18:\n              Alert.alert('Oops, something went wrong!');\n              return _context3.abrupt(\"return\");\n\n            case 20:\n              _context3.next = 22;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@MySuperStore2019:tickets'));\n\n            case 22:\n              value = _context3.sent;\n              tickets = null;\n              newTickets = [];\n              found = false;\n\n              if (value === null && me !== null) {\n                tickets = [me];\n              } else {\n                existingTickets = JSON.parse(value) || [];\n                existingTickets.map(function (ticket) {\n                  if (ticket && me && me.ref && ticket.ref === me.ref) {\n                    found = true;\n                    newTickets.push(me);\n                  } else {\n                    if (ticket) {\n                      newTickets.push(ticket);\n                    }\n                  }\n                });\n\n                if (!found && me) {\n                  newTickets.push(me);\n                }\n\n                tickets = newTickets;\n\n                if (!tickets || tickets[0] === [null]) {\n                  tickets = [];\n                }\n              }\n\n              if (!(tickets && tickets !== null && tickets !== [])) {\n                _context3.next = 34;\n                break;\n              }\n\n              stringifiedTickets = JSON.stringify(tickets);\n              console.log(stringifiedTickets);\n              _context3.next = 32;\n              return _regeneratorRuntime.awrap(_this.setTickets(stringifiedTickets));\n\n            case 32:\n              _this.registerForPushNotificationsAsync(variables.uuid);\n\n              navigation.navigate('Profile');\n\n            case 34:\n              _context3.next = 40;\n              break;\n\n            case 36:\n              _context3.prev = 36;\n              _context3.t0 = _context3[\"catch\"](6);\n              console.log('failed 1');\n              console.log(_context3.t0);\n\n            case 40:\n              _context3.prev = 40;\n\n              _this.setState({\n                loading: false\n              });\n\n              return _context3.finish(40);\n\n            case 43:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, [[6, 36, 40, 43]], Promise);\n    };\n\n    console.log('navigation props params', _this.props.navigation.state.params);\n\n    if (props.navigation.getParam('uuid')) {\n      _this._handleBarCodeRead({\n        data: _this.props.navigation.state.params.uuid\n      });\n    }\n\n    return _this;\n  }\n\n  _createClass(QRScannerModalNavigation, [{\n    key: \"render\",\n    value: function render() {\n      if (this && this.props && this.props.navigation && this.props.navigation.state && this.props.navigation.state.params && this.props.navigation.state.params.uuid && this.props.navigation.state.params.uuid !== '') {\n        return null;\n      }\n\n      return React.createElement(QRScreen, {\n        title: \"Scan your ticket QR code\",\n        loading: this.state.loading,\n        onBarCodeScanned: this._handleBarCodeRead,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return QRScannerModalNavigation;\n}(React.Component);\n\nexport { QRScannerModalNavigation as default };","map":{"version":3,"sources":["C:/Users/codemaxx/Desktop/iBlood/screens/QRScreens/Identify.js"],"names":["React","Permissions","Notifications","QRScreen","query","GQL","client","QR_QUERY","UPDATE_PUSH_TOKEN_QUERY","QRScannerModalNavigation","tickets","AsyncStorage","setItem","console","log","uuid","getAsync","NOTIFICATIONS","existingStatus","status","finalStatus","askAsync","getExpoPushTokenAsync","token","variables","expoPushToken","mutate","mutation","value","props","state","loading","_handleBarCodeRead","data","setState","navigation","params","slug","result","events","me","Alert","alert","getItem","newTickets","found","existingTickets","JSON","parse","map","ticket","ref","push","stringifiedTickets","stringify","setTickets","registerForPushNotificationsAsync","navigate","getParam","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {Alert, AsyncStorage} from 'react-native';\r\nimport {Permissions, Notifications} from 'expo';\r\nimport QRScreen from './QRScreen';\r\nimport {query} from 'urql';\r\nimport {GQL} from '../../constants';\r\n\r\nimport client from '../../utils/gqlClient';\r\nimport QR_QUERY from '../../data/qrQuery';\r\nimport UPDATE_PUSH_TOKEN_QUERY from '../../data/updatePushTokenQuery';\r\n\r\nexport default class QRScannerModalNavigation extends React.Component {\r\n  state = {\r\n    loading: false,\r\n  };\r\n  async setTickets(tickets) {\r\n    try {\r\n      await AsyncStorage.setItem('@MySuperStore2019:tickets', tickets);\r\n      console.log('set tickets to tickets:')\r\n      console.log(tickets)\r\n    } catch (err) {\r\n      console.log(err);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  async registerForPushNotificationsAsync(uuid) {\r\n    const {status: existingStatus} = await Permissions.getAsync(\r\n      Permissions.NOTIFICATIONS\r\n    );\r\n    let finalStatus = existingStatus;\r\n\r\n    // only ask if permissions have not already been determined, because\r\n    // iOS won't necessarily prompt the user a second time.\r\n    if (existingStatus !== 'granted') {\r\n      // Android remote notification permissions are granted during the app\r\n      // install, so this will only ask on iOS\r\n      const {status} = await Permissions.askAsync(Permissions.NOTIFICATIONS);\r\n      finalStatus = status;\r\n    }\r\n\r\n    // Stop here if the user did not grant permissions\r\n    if (finalStatus !== 'granted') {\r\n      return;\r\n    }\r\n\r\n    // Get the token that uniquely identifies this device\r\n    let token = await Notifications.getExpoPushTokenAsync();\r\n    const variables = {uuid: uuid, expoPushToken: token};\r\n\r\n    let value = await client.mutate({\r\n      mutation: UPDATE_PUSH_TOKEN_QUERY,\r\n      variables: variables,\r\n    });\r\n\r\n    if (value) {\r\n      console.log('updated attendee', value, token, uuid);\r\n    }\r\n    console.log('token', token, uuid);\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    console.log('navigation props params', this.props.navigation.state.params);\r\n    if (props.navigation.getParam('uuid')) {\r\n      this._handleBarCodeRead({data: this.props.navigation.state.params.uuid});\r\n    }\r\n  }\r\n\r\n  _handleBarCodeRead = async data => {\r\n    if (this.state.loading) {\r\n      return;\r\n    }\r\n\r\n    this.setState({loading: true});\r\n\r\n    if (!data || !data.data || data.data === '') {\r\n      let data = {data: this.props.navigation.state.params.uuid};\r\n    }\r\n    let variables = {slug: GQL.slug, uuid: data.data};\r\n    let navigation = this.props.navigation;\r\n    try {\r\n      let result = await client.query({\r\n        query: QR_QUERY,\r\n        variables: variables,\r\n      });\r\n      console.log('slug', GQL.slug);\r\n      let me;\r\n      if (result?.data?.events?.[0]) {\r\n        me = result.data.events[0].me;\r\n        if (me === null) {\r\n          Alert.alert('Ticket not found!');\r\n          return;\r\n        }\r\n      } else {\r\n        Alert.alert('Oops, something went wrong!');\r\n        return;\r\n      }\r\n\r\n      let value = await AsyncStorage.getItem('@MySuperStore2019:tickets');\r\n      let tickets = null;\r\n      let newTickets = [];\r\n      let found = false;\r\n\r\n      if (value === null && me !== null) {\r\n        tickets = [me];\r\n      } else {\r\n        let existingTickets = JSON.parse(value) || [];\r\n        existingTickets.map(ticket => {\r\n          if (ticket && me && me.ref && ticket.ref === me.ref) {\r\n            found = true;\r\n            newTickets.push(me);\r\n          } else {\r\n            if (ticket) {\r\n              newTickets.push(ticket);\r\n            }\r\n          }\r\n        });\r\n        if (!found && me) {\r\n          newTickets.push(me);\r\n        }\r\n        tickets = newTickets;\r\n        if (!tickets || tickets[0] === [null]) {\r\n          tickets = [];\r\n        }\r\n      }\r\n\r\n      if (tickets && tickets !== null && tickets !== []) {\r\n        let stringifiedTickets = JSON.stringify(tickets);\r\n        console.log(stringifiedTickets);\r\n        await this.setTickets(stringifiedTickets);\r\n        this.registerForPushNotificationsAsync(variables.uuid);\r\n        navigation.navigate('Profile');\r\n      }\r\n      // expected output: Array [1, 2, 3]\r\n    } catch (e) {\r\n      console.log('failed 1');\r\n      console.log(e);\r\n    } finally {\r\n      this.setState({loading: false});\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (\r\n      this &&\r\n      this.props &&\r\n      this.props.navigation &&\r\n      this.props.navigation.state &&\r\n      this.props.navigation.state.params &&\r\n      this.props.navigation.state.params.uuid &&\r\n      this.props.navigation.state.params.uuid !== ''\r\n    ) {\r\n      return null;\r\n    }\r\n    return (\r\n      <QRScreen\r\n        title=\"Scan your ticket QR code\"\r\n        loading={this.state.loading}\r\n        onBarCodeScanned={this._handleBarCodeRead}\r\n      />\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}