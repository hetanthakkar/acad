{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nvar _class,\n    _temp,\n    _jsxFileName = \"C:\\\\Users\\\\codemaxx\\\\Desktop\\\\iBlood\\\\components\\\\TalksUpNext.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { GQL } from \"../constants\";\nimport NEXT_SCHEDULE_ITEMS from \"../data/NextScheduleItems\";\nimport client from \"../utils/gqlClient\";\nimport { RegularText, SemiBoldText } from \"./StyledText\";\nimport TalkCard from \"./TalkCard\";\nimport { Colors, FontSizes } from \"../constants\";\nimport { findRandomTalk, findNextTalksAfterDate } from \"../data\";\nimport _ from 'lodash';\nimport { withNavigation } from 'react-navigation';\nimport { convertUtcDateToEventTimezoneDaytime, conferenceHasEnded } from \"../utils\";\n\nvar TalksUpNext = withNavigation(_class = (_temp = function (_React$Component) {\n  _inherits(TalksUpNext, _React$Component);\n\n  var _super = _createSuper(TalksUpNext);\n\n  function TalksUpNext() {\n    var _this;\n\n    _classCallCheck(this, TalksUpNext);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      nextTalks: [],\n      dateTime: null,\n      time: null,\n      fetching: false\n    };\n\n    _this._fetchTalksAsync = function _callee() {\n      var _res$data, _res$data$events, _res$data$events$, _res$data$events$$sta, _res$data$events$$sta2, res, nextTalks;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!_this.state.fetching) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              _this.setState({\n                fetching: true\n              });\n\n              _context.prev = 3;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(client.query({\n                query: NEXT_SCHEDULE_ITEMS,\n                variables: {\n                  slug: GQL.slug\n                },\n                fetchPolicy: 'network-only'\n              }));\n\n            case 6:\n              res = _context.sent;\n\n              if ((res == null ? void 0 : (_res$data = res.data) == null ? void 0 : (_res$data$events = _res$data.events) == null ? void 0 : (_res$data$events$ = _res$data$events[0]) == null ? void 0 : (_res$data$events$$sta = _res$data$events$.status) == null ? void 0 : (_res$data$events$$sta2 = _res$data$events$$sta.nextFiveScheduledItems) == null ? void 0 : _res$data$events$$sta2.length) > 0) {\n                nextTalks = res.data.events[0].status.nextFiveScheduledItems;\n\n                _this.setState({\n                  nextTalks: nextTalks.slice(0, 3),\n                  dateTime: nextTalks && nextTalks.length ? nextTalks[0].startDate : '',\n                  time: nextTalks && nextTalks.length ? nextTalks[0].startDate : ''\n                });\n              } else {}\n\n              _context.next = 12;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](3);\n\n            case 12:\n              _context.prev = 12;\n\n              _this.setState({\n                fetching: false\n              });\n\n              return _context.finish(12);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[3, 10, 12, 15]], Promise);\n    };\n\n    _this._maybeRenderActivityIndicator = function () {\n      if (_this.state.fetching) {\n        return React.createElement(View, {\n          style: {\n            marginLeft: 8,\n            marginTop: 3\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 9\n          }\n        }, React.createElement(ActivityIndicator, {\n          color: Platform.OS === 'android' ? Colors.blue : '#888',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 11\n          }\n        }));\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(TalksUpNext, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this._fetchTalksAsync();\n\n      this.props.navigation.addListener('didFocus', function () {\n        _this2._fetchTalksAsync();\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var nextTalks = this.state.nextTalks;\n      return React.createElement(View, {\n        style: [{\n          marginHorizontal: 10\n        }, this.props.style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: {\n          flexDirection: 'row'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }\n      }, React.createElement(SemiBoldText, {\n        style: {\n          fontSize: FontSizes.title\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }\n      }, conferenceHasEnded() ? 'A great talk from 2019' : 'Coming up next'), this._maybeRenderActivityIndicator()), this._renderDateTime(), nextTalks.map(function (talk) {\n        return React.createElement(TalkCard, {\n          key: talk.title,\n          talk: talk,\n          style: {\n            marginTop: 10,\n            marginBottom: 10\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 11\n          }\n        });\n      }));\n    }\n  }, {\n    key: \"_renderDateTime\",\n    value: function _renderDateTime() {\n      if (conferenceHasEnded()) {\n        return null;\n      }\n\n      var dateTime = this.state.dateTime;\n\n      if (dateTime) {\n        return React.createElement(RegularText, {\n          style: styles.time,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 9\n          }\n        }, convertUtcDateToEventTimezoneDaytime(dateTime));\n      } else {}\n    }\n  }]);\n\n  return TalksUpNext;\n}(React.Component), _temp)) || _class;\n\nexport { TalksUpNext as default };\nvar q = \"{\\n  events(slug: \\\"\" + GQL.slug + \"\\\") {\\n    id\\n    status {\\n      hasEnded\\n      hasStarted\\n      onGoing\\n      nextFiveScheduledItems {\\n        id\\n        title\\n        description\\n        startDate\\n        speakers {\\n          id\\n          name\\n          twitter\\n          avatarUrl\\n          bio\\n          talks {\\n            id\\n            description\\n            title\\n            startDate\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\";\nvar styles = StyleSheet.create({\n  time: {\n    color: Colors.faint,\n    fontSize: FontSizes.subtitle\n  }\n});","map":{"version":3,"sources":["C:/Users/codemaxx/Desktop/iBlood/components/TalksUpNext.js"],"names":["React","GQL","NEXT_SCHEDULE_ITEMS","client","RegularText","SemiBoldText","TalkCard","Colors","FontSizes","findRandomTalk","findNextTalksAfterDate","_","withNavigation","convertUtcDateToEventTimezoneDaytime","conferenceHasEnded","TalksUpNext","state","nextTalks","dateTime","time","fetching","_fetchTalksAsync","setState","query","variables","slug","fetchPolicy","res","data","events","status","nextFiveScheduledItems","length","slice","startDate","_maybeRenderActivityIndicator","marginLeft","marginTop","Platform","OS","blue","props","navigation","addListener","marginHorizontal","style","flexDirection","fontSize","title","_renderDateTime","map","talk","marginBottom","styles","Component","q","StyleSheet","create","color","faint","subtitle"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {ActivityIndicator, Platform, StyleSheet, View} from 'react-native';\r\nimport {GQL} from '../constants';\r\nimport NEXT_SCHEDULE_ITEMS from '../data/NextScheduleItems';\r\nimport client from '../utils/gqlClient';\r\nimport {RegularText, SemiBoldText} from './StyledText';\r\nimport TalkCard from './TalkCard';\r\nimport {Colors, FontSizes} from '../constants';\r\nimport {findRandomTalk, findNextTalksAfterDate} from '../data';\r\nimport _ from 'lodash';\r\nimport {withNavigation} from 'react-navigation';\r\nimport {\r\n  convertUtcDateToEventTimezoneDaytime,\r\n  conferenceHasEnded,\r\n} from '../utils';\r\n\r\n@withNavigation\r\nexport default class TalksUpNext extends React.Component {\r\n  state = {\r\n    nextTalks: [],\r\n    dateTime: null,\r\n    time: null,\r\n    fetching: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this._fetchTalksAsync();\r\n    this.props.navigation.addListener('didFocus', () => {\r\n      this._fetchTalksAsync();\r\n    });\r\n  }\r\n\r\n  _fetchTalksAsync = async () => {\r\n    if (this.state.fetching) {\r\n      return;\r\n    }\r\n\r\n    this.setState({fetching: true});\r\n    try {\r\n      let res = await client.query({\r\n        query: NEXT_SCHEDULE_ITEMS,\r\n        variables: {slug: GQL.slug},\r\n        fetchPolicy: 'network-only',\r\n      });\r\n      if (res?.data?.events?.[0]?.status?.nextFiveScheduledItems?.length > 0) {\r\n        let nextTalks = res.data.events[0].status.nextFiveScheduledItems;\r\n        this.setState({\r\n          nextTalks: nextTalks.slice(0, 3),\r\n          dateTime: nextTalks && nextTalks.length ? nextTalks[0].startDate : '',\r\n          time: nextTalks && nextTalks.length ? nextTalks[0].startDate : '',\r\n        });\r\n      } else {\r\n        // set error state?\r\n      }\r\n    } catch (e) {\r\n      // uh oh\r\n    } finally {\r\n      this.setState({fetching: false});\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {nextTalks} = this.state;\r\n\r\n    return (\r\n      <View style={[{marginHorizontal: 10}, this.props.style]}>\r\n        <View style={{flexDirection: 'row'}}>\r\n          <SemiBoldText style={{fontSize: FontSizes.title}}>\r\n            {conferenceHasEnded() ? 'A great talk from 2019' : 'Coming up next'}\r\n          </SemiBoldText>\r\n          {this._maybeRenderActivityIndicator()}\r\n        </View>\r\n        {this._renderDateTime()}\r\n        {nextTalks.map(talk => (\r\n          <TalkCard\r\n            key={talk.title}\r\n            talk={talk}\r\n            style={{marginTop: 10, marginBottom: 10}}\r\n          />\r\n        ))}\r\n      </View>\r\n    );\r\n  }\r\n\r\n  _maybeRenderActivityIndicator = () => {\r\n    if (this.state.fetching) {\r\n      return (\r\n        <View style={{marginLeft: 8, marginTop: 3}}>\r\n          <ActivityIndicator color={Platform.OS === 'android' ? Colors.blue : '#888'} />\r\n        </View>\r\n      );\r\n    }\r\n  };\r\n\r\n  _renderDateTime() {\r\n    if (conferenceHasEnded()) {\r\n      return null;\r\n    }\r\n\r\n    const {dateTime} = this.state;\r\n\r\n    if (dateTime) {\r\n      return (\r\n        <RegularText style={styles.time}>\r\n          {convertUtcDateToEventTimezoneDaytime(dateTime)}\r\n        </RegularText>\r\n      );\r\n    } else {\r\n      // handle after conf thing\r\n    }\r\n  }\r\n}\r\n\r\nconst q =\r\n  `{\r\n  events(slug: \"` +\r\n  GQL.slug +\r\n  `\") {\r\n    id\r\n    status {\r\n      hasEnded\r\n      hasStarted\r\n      onGoing\r\n      nextFiveScheduledItems {\r\n        id\r\n        title\r\n        description\r\n        startDate\r\n        speakers {\r\n          id\r\n          name\r\n          twitter\r\n          avatarUrl\r\n          bio\r\n          talks {\r\n            id\r\n            description\r\n            title\r\n            startDate\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nconst styles = StyleSheet.create({\r\n  time: {\r\n    color: Colors.faint,\r\n    fontSize: FontSizes.subtitle,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}