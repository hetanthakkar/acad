{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\codemaxx\\\\Desktop\\\\iBlood\\\\screens\\\\QRScreens\\\\CheckIn.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport { query } from 'urql';\nimport client from \"../../utils/gqlClient\";\nimport QRScreen from \"./QRScreen\";\nimport QR_CHECKIN_QUERY from \"../../data/qrCheckinQuery\";\n\nvar QRCheckinScannerModalNavigation = function (_React$Component) {\n  _inherits(QRCheckinScannerModalNavigation, _React$Component);\n\n  var _super = _createSuper(QRCheckinScannerModalNavigation);\n\n  function QRCheckinScannerModalNavigation(props) {\n    var _this;\n\n    _classCallCheck(this, QRCheckinScannerModalNavigation);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      checkinList: {\n        name: ''\n      },\n      checkRef: true,\n      uuid: null,\n      loading: false\n    };\n\n    _this._delay = function _callee(time) {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", new Promise(function (resolve) {\n                setTimeout(function () {\n                  return resolve();\n                }, time);\n              }));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this._handleCheckinBarCodeRead = function _callee2(data) {\n      var lastCheckedInRef, variables, value;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!_this.state.loading) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 2:\n              _this.setState({\n                loading: true\n              });\n\n              _context2.prev = 3;\n              _context2.next = 6;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@MySuperStore2019:lastCheckedInRef'));\n\n            case 6:\n              lastCheckedInRef = _context2.sent;\n              _context2.next = 9;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem('@MySuperStore2019:lastCheckedInRef', data.data));\n\n            case 9:\n              if (!(data.data === lastCheckedInRef)) {\n                _context2.next = 11;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 11:\n              variables = {\n                uuid: _this.state.uuid,\n                checkinListId: _this.state.checkinList.id,\n                ref: data.data\n              };\n              console.log('showQRSCanner', _this.state.showQRScanner);\n              _context2.next = 15;\n              return _regeneratorRuntime.awrap(client.mutate({\n                mutation: QR_CHECKIN_QUERY,\n                variables: variables\n              }));\n\n            case 15:\n              value = _context2.sent;\n              console.log('checkin mutation value', value);\n\n              if (value && value.data && value.data.createCheckin === null) {\n                Alert.alert('This reference could not be found, make sure you selected the right Checkin List!');\n              } else if (value && value.data && value.data.createCheckin) {\n                if (value.data.createCheckin.checkinMessage === 'Already checked-in today') {\n                  Alert.alert('This reference has already been checked today! The person cannot get in as their ticket has already been used by someone else.');\n                }\n\n                _this.props.navigation.navigate('CheckedInAttendeeInfo', {\n                  checkedInAttendee: value.data.createCheckin\n                });\n              }\n\n              _context2.next = 23;\n              break;\n\n            case 20:\n              _context2.prev = 20;\n              _context2.t0 = _context2[\"catch\"](3);\n              console.log(_context2.t0);\n\n            case 23:\n              _context2.prev = 23;\n\n              _this.setState({\n                loading: false\n              });\n\n              return _context2.finish(23);\n\n            case 26:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[3, 20, 23, 26]], Promise);\n    };\n\n    AsyncStorage.removeItem('@MySuperStore2019:lastCheckedInRef');\n    return _this;\n  }\n\n  _createClass(QRCheckinScannerModalNavigation, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var params = this.props.navigation.state.params || {};\n      var checkinList = params.checkinList;\n      var uuid = params.uuid;\n      console.log('uuid is', uuid);\n      console.log('checkinList is', checkinList);\n      this.setState({\n        uuid: uuid,\n        checkinList: checkinList\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(QRScreen, {\n        loading: this.state.loading,\n        title: \"Checking \" + this.state.checkinList.name,\n        onBarCodeScanned: this._handleCheckinBarCodeRead,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return QRCheckinScannerModalNavigation;\n}(React.Component);\n\nexport { QRCheckinScannerModalNavigation as default };","map":{"version":3,"sources":["C:/Users/codemaxx/Desktop/iBlood/screens/QRScreens/CheckIn.js"],"names":["React","query","client","QRScreen","QR_CHECKIN_QUERY","QRCheckinScannerModalNavigation","props","state","checkinList","name","checkRef","uuid","loading","_delay","time","Promise","resolve","setTimeout","_handleCheckinBarCodeRead","data","setState","AsyncStorage","getItem","lastCheckedInRef","setItem","variables","checkinListId","id","ref","console","log","showQRScanner","mutate","mutation","value","createCheckin","Alert","alert","checkinMessage","navigation","navigate","checkedInAttendee","removeItem","params","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {Alert, AsyncStorage} from 'react-native';\r\nimport {query} from 'urql';\r\nimport client from '../../utils/gqlClient';\r\nimport QRScreen from './QRScreen';\r\nimport QR_CHECKIN_QUERY from '../../data/qrCheckinQuery';\r\n\r\nexport default class QRCheckinScannerModalNavigation extends React.Component {\r\n  state = {\r\n    checkinList: {name: ''},\r\n    checkRef: true,\r\n    uuid: null,\r\n    loading: false,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    AsyncStorage.removeItem('@MySuperStore2019:lastCheckedInRef');\r\n  }\r\n\r\n  _delay = async time => {\r\n    return new Promise(function(resolve) {\r\n      setTimeout(() => resolve(), time);\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    const params = this.props.navigation.state.params || {};\r\n    const checkinList = params.checkinList;\r\n    const uuid = params.uuid;\r\n    console.log('uuid is', uuid);\r\n    console.log('checkinList is', checkinList);\r\n    this.setState({\r\n      uuid: uuid,\r\n      checkinList: checkinList,\r\n    });\r\n  }\r\n\r\n  _handleCheckinBarCodeRead = async data => {\r\n    if (this.state.loading) {\r\n      return;\r\n    }\r\n\r\n    this.setState({loading: true});\r\n    try {\r\n      let lastCheckedInRef = await AsyncStorage.getItem(\r\n        '@MySuperStore2019:lastCheckedInRef'\r\n      );\r\n      await AsyncStorage.setItem(\r\n        '@MySuperStore2019:lastCheckedInRef',\r\n        data.data\r\n      );\r\n\r\n      if (data.data === lastCheckedInRef) {\r\n        // bail out\r\n        return;\r\n      }\r\n\r\n      //{ slug: GQL.slug, uuid: data.data };\r\n      let variables = {\r\n        uuid: this.state.uuid,\r\n        checkinListId: this.state.checkinList.id,\r\n        ref: data.data,\r\n      };\r\n\r\n      //console.log(\"Scanned!\", data.data);\r\n      //console.log(\"variables\", variables);\r\n      //console.log(\"uuid state is\", this.state.uuid);\r\n      //console.log(\"checkinlist state is\", this.state.checkinList);\r\n\r\n      console.log('showQRSCanner', this.state.showQRScanner);\r\n      let value = await client.mutate({\r\n        mutation: QR_CHECKIN_QUERY,\r\n        variables: variables,\r\n      });\r\n\r\n      console.log('checkin mutation value', value);\r\n      if (value && value.data && value.data.createCheckin === null) {\r\n        Alert.alert(\r\n          'This reference could not be found, make sure you selected the right Checkin List!'\r\n        );\r\n      } else if (value && value.data && value.data.createCheckin) {\r\n        if (\r\n          value.data.createCheckin.checkinMessage === 'Already checked-in today'\r\n        ) {\r\n          Alert.alert(\r\n            'This reference has already been checked today! The person cannot get in as their ticket has already been used by someone else.'\r\n          );\r\n        }\r\n        this.props.navigation.navigate('CheckedInAttendeeInfo', {\r\n          checkedInAttendee: value.data.createCheckin,\r\n        });\r\n      }\r\n      // expected output: Array [1, 2, 3]\r\n    } catch (e) {\r\n      console.log(e);\r\n    } finally {\r\n      this.setState({loading: false});\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <QRScreen\r\n        loading={this.state.loading}\r\n        title={`Checking ${this.state.checkinList.name}`}\r\n        onBarCodeScanned={this._handleCheckinBarCodeRead}\r\n      />\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}