{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\codemaxx\\\\Desktop\\\\iBlood\\\\node_modules\\\\react-native-maps\\\\lib\\\\components\\\\MapOverlay.js\";\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport decorateMapComponent, { SUPPORTED, USES_DEFAULT_IMPLEMENTATION } from \"./decorateMapComponent\";\nimport resolveAssetSource from \"./resolveAssetSource\";\nvar viewConfig = {\n  uiViewClassName: 'AIR<provider>MapOverlay',\n  validAttributes: {\n    image: true\n  }\n};\n\nvar propTypes = _objectSpread({}, View.propTypes, {\n  image: PropTypes.any.isRequired,\n  bounds: PropTypes.arrayOf(PropTypes.array.isRequired).isRequired,\n  tappable: PropTypes.bool,\n  onPress: PropTypes.func\n});\n\nvar MapOverlay = function (_Component) {\n  _inherits(MapOverlay, _Component);\n\n  function MapOverlay() {\n    _classCallCheck(this, MapOverlay);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MapOverlay).apply(this, arguments));\n  }\n\n  _createClass(MapOverlay, [{\n    key: \"render\",\n    value: function render() {\n      var image;\n\n      if (this.props.image) {\n        if (typeof this.props.image.startsWith === 'function' && this.props.image.startsWith('http')) {\n          image = this.props.image;\n        } else {\n          image = resolveAssetSource(this.props.image) || {};\n          image = image.uri;\n        }\n      }\n\n      var AIRMapOverlay = this.getAirComponent();\n      return React.createElement(AIRMapOverlay, _extends({}, this.props, {\n        image: image,\n        style: [styles.overlay, this.props.style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        }\n      }));\n    }\n  }]);\n\n  return MapOverlay;\n}(Component);\n\nMapOverlay.propTypes = propTypes;\nMapOverlay.viewConfig = viewConfig;\nvar styles = StyleSheet.create({\n  overlay: {\n    position: 'absolute',\n    backgroundColor: 'transparent'\n  }\n});\nMapOverlay.Animated = Animated.createAnimatedComponent(MapOverlay);\nexport default decorateMapComponent(MapOverlay, {\n  componentType: 'Overlay',\n  providers: {\n    google: {\n      ios: SUPPORTED,\n      android: USES_DEFAULT_IMPLEMENTATION\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/codemaxx/Desktop/iBlood/node_modules/react-native-maps/lib/components/MapOverlay.js"],"names":["PropTypes","React","Component","decorateMapComponent","SUPPORTED","USES_DEFAULT_IMPLEMENTATION","resolveAssetSource","viewConfig","uiViewClassName","validAttributes","image","propTypes","View","any","isRequired","bounds","arrayOf","array","tappable","bool","onPress","func","MapOverlay","props","startsWith","uri","AIRMapOverlay","getAirComponent","styles","overlay","style","StyleSheet","create","position","backgroundColor","Animated","createAnimatedComponent","componentType","providers","google","ios","android"],"mappings":";;;;;;;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;AAGA,OAAOC,oBAAP,IACEC,SADF,EAEEC,2BAFF;AAIA,OAAOC,kBAAP;AAEA,IAAMC,UAAU,GAAG;AACjBC,EAAAA,eAAe,EAAE,yBADA;AAEjBC,EAAAA,eAAe,EAAE;AACfC,IAAAA,KAAK,EAAE;AADQ;AAFA,CAAnB;;AAOA,IAAMC,SAAS,qBACVC,IAAI,CAACD,SADK;AAGbD,EAAAA,KAAK,EAAEV,SAAS,CAACa,GAAV,CAAcC,UAHR;AAKbC,EAAAA,MAAM,EAAEf,SAAS,CAACgB,OAAV,CAAkBhB,SAAS,CAACiB,KAAV,CAAgBH,UAAlC,EAA8CA,UALzC;AASbI,EAAAA,QAAQ,EAAElB,SAAS,CAACmB,IATP;AAWbC,EAAAA,OAAO,EAAEpB,SAAS,CAACqB;AAXN,EAAf;;IAcMC,U;;;;;;;;;;;6BACK;AACP,UAAIZ,KAAJ;;AACA,UAAI,KAAKa,KAAL,CAAWb,KAAf,EAAsB;AACpB,YACE,OAAO,KAAKa,KAAL,CAAWb,KAAX,CAAiBc,UAAxB,KAAuC,UAAvC,IACA,KAAKD,KAAL,CAAWb,KAAX,CAAiBc,UAAjB,CAA4B,MAA5B,CAFF,EAGE;AACAd,UAAAA,KAAK,GAAG,KAAKa,KAAL,CAAWb,KAAnB;AACD,SALD,MAKO;AACLA,UAAAA,KAAK,GAAGJ,kBAAkB,CAAC,KAAKiB,KAAL,CAAWb,KAAZ,CAAlB,IAAwC,EAAhD;AACAA,UAAAA,KAAK,GAAGA,KAAK,CAACe,GAAd;AACD;AACF;;AAED,UAAMC,aAAa,GAAG,KAAKC,eAAL,EAAtB;AAEA,aACE,oBAAC,aAAD,eACM,KAAKJ,KADX;AAEE,QAAA,KAAK,EAAEb,KAFT;AAGE,QAAA,KAAK,EAAE,CAACkB,MAAM,CAACC,OAAR,EAAiB,KAAKN,KAAL,CAAWO,KAA5B,CAHT;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAOD;;;;EAxBsB5B,S;;AA2BzBoB,UAAU,CAACX,SAAX,GAAuBA,SAAvB;AACAW,UAAU,CAACf,UAAX,GAAwBA,UAAxB;AAEA,IAAMqB,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC/BH,EAAAA,OAAO,EAAE;AACPI,IAAAA,QAAQ,EAAE,UADH;AAEPC,IAAAA,eAAe,EAAE;AAFV;AADsB,CAAlB,CAAf;AAOAZ,UAAU,CAACa,QAAX,GAAsBA,QAAQ,CAACC,uBAAT,CAAiCd,UAAjC,CAAtB;AAEA,eAAenB,oBAAoB,CAACmB,UAAD,EAAa;AAC9Ce,EAAAA,aAAa,EAAE,SAD+B;AAE9CC,EAAAA,SAAS,EAAE;AACTC,IAAAA,MAAM,EAAE;AACNC,MAAAA,GAAG,EAAEpC,SADC;AAENqC,MAAAA,OAAO,EAAEpC;AAFH;AADC;AAFmC,CAAb,CAAnC","sourcesContent":["import PropTypes from 'prop-types';\r\nimport React, { Component } from 'react';\r\nimport { Animated, StyleSheet, View } from 'react-native';\r\n\r\nimport decorateMapComponent, {\r\n  SUPPORTED,\r\n  USES_DEFAULT_IMPLEMENTATION,\r\n} from './decorateMapComponent';\r\nimport resolveAssetSource from './resolveAssetSource';\r\n\r\nconst viewConfig = {\r\n  uiViewClassName: 'AIR<provider>MapOverlay',\r\n  validAttributes: {\r\n    image: true,\r\n  },\r\n};\r\n\r\nconst propTypes = {\r\n  ...View.propTypes,\r\n  // A custom image to be used as overlay.\r\n  image: PropTypes.any.isRequired,\r\n  // Top left and bottom right coordinates for the overlay\r\n  bounds: PropTypes.arrayOf(PropTypes.array.isRequired).isRequired,\r\n  /* Boolean to allow an overlay to be tappable and use the\r\n   * onPress function\r\n   */\r\n  tappable: PropTypes.bool,\r\n  // Callback that is called when the user presses on the overlay\r\n  onPress: PropTypes.func,\r\n};\r\n\r\nclass MapOverlay extends Component {\r\n  render() {\r\n    let image;\r\n    if (this.props.image) {\r\n      if (\r\n        typeof this.props.image.startsWith === 'function' &&\r\n        this.props.image.startsWith('http')\r\n      ) {\r\n        image = this.props.image;\r\n      } else {\r\n        image = resolveAssetSource(this.props.image) || {};\r\n        image = image.uri;\r\n      }\r\n    }\r\n\r\n    const AIRMapOverlay = this.getAirComponent();\r\n\r\n    return (\r\n      <AIRMapOverlay\r\n        {...this.props}\r\n        image={image}\r\n        style={[styles.overlay, this.props.style]}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nMapOverlay.propTypes = propTypes;\r\nMapOverlay.viewConfig = viewConfig;\r\n\r\nconst styles = StyleSheet.create({\r\n  overlay: {\r\n    position: 'absolute',\r\n    backgroundColor: 'transparent',\r\n  },\r\n});\r\n\r\nMapOverlay.Animated = Animated.createAnimatedComponent(MapOverlay);\r\n\r\nexport default decorateMapComponent(MapOverlay, {\r\n  componentType: 'Overlay',\r\n  providers: {\r\n    google: {\r\n      ios: SUPPORTED,\r\n      android: USES_DEFAULT_IMPLEMENTATION,\r\n    },\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}