{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\codemaxx\\\\Desktop\\\\iBlood\\\\components\\\\VideoBackground.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport { Asset, Video } from 'expo';\nimport { View as AnimatableView } from 'react-native-animatable';\n\nvar VideoBackground = function (_React$Component) {\n  _inherits(VideoBackground, _React$Component);\n\n  var _super = _createSuper(VideoBackground);\n\n  function VideoBackground() {\n    var _this;\n\n    _classCallCheck(this, VideoBackground);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      videoLoaded: false\n    };\n    return _this;\n  }\n\n  _createClass(VideoBackground, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (this.state.videoLoaded) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.prev = 1;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(Asset.fromModule(require(\"../assets/video.mp4\")).downloadAsync());\n\n            case 4:\n              this.setState({\n                videoLoaded: true\n              });\n              _context.next = 9;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](1);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[1, 7]], Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.videoLoaded) {\n        return React.createElement(AnimatableView, {\n          animation: \"fadeIn\",\n          style: {\n            flex: 1\n          },\n          useNativeDriver: true,\n          duration: 5000,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 9\n          }\n        }, React.createElement(Video, {\n          source: require(\"../assets/video.mp4\"),\n          style: {\n            flex: 1\n          },\n          resizeMode: \"cover\",\n          shouldPlay: true,\n          muted: true,\n          isLooping: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 11\n          }\n        }));\n      } else {\n        return React.createElement(View, {\n          style: {\n            flex: 1\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 14\n          }\n        });\n      }\n    }\n  }]);\n\n  return VideoBackground;\n}(React.Component);\n\nexport { VideoBackground as default };","map":{"version":3,"sources":["C:/Users/codemaxx/Desktop/iBlood/components/VideoBackground.js"],"names":["React","Asset","Video","View","AnimatableView","VideoBackground","state","videoLoaded","fromModule","require","downloadAsync","setState","flex","Component"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAAQC,KAAR,EAAeC,KAAf,QAA2B,MAA3B;AACA,SAAQC,IAAI,IAAIC,cAAhB,QAAqC,yBAArC;;IAEqBC,e;;;;;;;;;;;;;;;UACnBC,K,GAAQ;AACNC,MAAAA,WAAW,EAAE;AADP,K;;;;;;;;;;;kBAKD,KAAKD,KAAL,CAAWC,W;;;;;;;+CAENN,KAAK,CAACO,UAAN,CAAiBC,OAAO,uBAAxB,EAAiDC,aAAjD,E;;;AACN,mBAAKC,QAAL,CAAc;AAACJ,gBAAAA,WAAW,EAAE;AAAd,eAAd;;;;;;;;;;;;;;;;;6BAOG;AACP,UAAI,KAAKD,KAAL,CAAWC,WAAf,EAA4B;AAC1B,eACE,oBAAC,cAAD;AACE,UAAA,SAAS,EAAC,QADZ;AAEE,UAAA,KAAK,EAAE;AAACK,YAAAA,IAAI,EAAE;AAAP,WAFT;AAGE,UAAA,eAAe,MAHjB;AAIE,UAAA,QAAQ,EAAE,IAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAKE,oBAAC,KAAD;AACE,UAAA,MAAM,EAAEH,OAAO,uBADjB;AAEE,UAAA,KAAK,EAAE;AAACG,YAAAA,IAAI,EAAE;AAAP,WAFT;AAGE,UAAA,UAAU,EAAC,OAHb;AAIE,UAAA,UAAU,MAJZ;AAKE,UAAA,KAAK,MALP;AAME,UAAA,SAAS,MANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UALF,CADF;AAgBD,OAjBD,MAiBO;AACL,eAAO,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAE;AAACA,YAAAA,IAAI,EAAE;AAAP,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;AACF;;;;EArC0CZ,KAAK,CAACa,S;;SAA9BR,e","sourcesContent":["import React from 'react';\r\nimport {View} from 'react-native';\r\nimport {Asset, Video} from 'expo';\r\nimport {View as AnimatableView} from 'react-native-animatable';\r\n\r\nexport default class VideoBackground extends React.Component {\r\n  state = {\r\n    videoLoaded: false,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    if (!this.state.videoLoaded) {\r\n      try {\r\n        await Asset.fromModule(require('../assets/video.mp4')).downloadAsync();\r\n        this.setState({videoLoaded: true});\r\n      } catch (e) {\r\n        // Not working, oh well, no video for you\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.state.videoLoaded) {\r\n      return (\r\n        <AnimatableView\r\n          animation=\"fadeIn\"\r\n          style={{flex: 1}}\r\n          useNativeDriver\r\n          duration={5000}>\r\n          <Video\r\n            source={require('../assets/video.mp4')}\r\n            style={{flex: 1}}\r\n            resizeMode=\"cover\"\r\n            shouldPlay\r\n            muted\r\n            isLooping\r\n          />\r\n        </AnimatableView>\r\n      );\r\n    } else {\r\n      return <View style={{flex: 1}} />;\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}