{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\codemaxx\\\\Desktop\\\\iBlood\\\\components\\\\LoadingPlaceholder.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Colors } from \"../constants\";\n\nvar LoadingPlaceholder = function (_React$Component) {\n  _inherits(LoadingPlaceholder, _React$Component);\n\n  var _super = _createSuper(LoadingPlaceholder);\n\n  function LoadingPlaceholder() {\n    var _this;\n\n    _classCallCheck(this, LoadingPlaceholder);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      isReady: false\n    };\n    return _this;\n  }\n\n  _createClass(LoadingPlaceholder, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (!this.state.isReady) {\n        setTimeout(function () {\n          _this2.setState({\n            isReady: true\n          });\n        }, Platform.OS === 'ios' ? 250 : 500);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.state.isReady) {\n        return React.createElement(View, {\n          style: {\n            flex: 1,\n            alignItems: 'center',\n            justifyContent: 'center'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 9\n          }\n        }, React.createElement(ActivityIndicator, {\n          color: Platform.OS === 'android' ? Colors.blue : '#888',\n          size: \"large\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 11\n          }\n        }));\n      } else {\n        return this.props.children;\n      }\n    }\n  }]);\n\n  return LoadingPlaceholder;\n}(React.Component);\n\nexport { LoadingPlaceholder as default };","map":{"version":3,"sources":["C:/Users/codemaxx/Desktop/iBlood/components/LoadingPlaceholder.js"],"names":["React","Colors","LoadingPlaceholder","state","isReady","setTimeout","setState","Platform","OS","flex","alignItems","justifyContent","blue","props","children","Component"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,SAAQC,MAAR;;IAIqBC,kB;;;;;;;;;;;;;;;UACnBC,K,GAAQ;AACNC,MAAAA,OAAO,EAAE;AADH,K;;;;;;wCAIY;AAAA;;AAClB,UAAI,CAAC,KAAKD,KAAL,CAAWC,OAAhB,EAAyB;AACvBC,QAAAA,UAAU,CAAC,YAAM;AACf,UAAA,MAAI,CAACC,QAAL,CAAc;AAACF,YAAAA,OAAO,EAAE;AAAV,WAAd;AACD,SAFS,EAEPG,QAAQ,CAACC,EAAT,KAAgB,KAAhB,GAAwB,GAAxB,GAA8B,GAFvB,CAAV;AAGD;AACF;;;6BAEQ;AACP,UAAI,CAAC,KAAKL,KAAL,CAAWC,OAAhB,EAAyB;AACvB,eACE,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAE;AAACK,YAAAA,IAAI,EAAE,CAAP;AAAUC,YAAAA,UAAU,EAAE,QAAtB;AAAgCC,YAAAA,cAAc,EAAE;AAAhD,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,iBAAD;AACE,UAAA,KAAK,EAAEJ,QAAQ,CAACC,EAAT,KAAgB,SAAhB,GAA4BP,MAAM,CAACW,IAAnC,GAA0C,MADnD;AAEE,UAAA,IAAI,EAAC,OAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF;AAQD,OATD,MASO;AACL,eAAO,KAAKC,KAAL,CAAWC,QAAlB;AACD;AACF;;;;EA1B6Cd,KAAK,CAACe,S;;SAAjCb,kB","sourcesContent":["import React from 'react';\r\nimport {ActivityIndicator, Platform, View} from 'react-native';\r\nimport {Colors} from '../constants';\r\n\r\n// All this does is briefly render a loading indicator when you\r\n// first mount a component as a child of this component\r\nexport default class LoadingPlaceholder extends React.Component {\r\n  state = {\r\n    isReady: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (!this.state.isReady) {\r\n      setTimeout(() => {\r\n        this.setState({isReady: true});\r\n      }, Platform.OS === 'ios' ? 250 : 500);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.isReady) {\r\n      return (\r\n        <View style={{flex: 1, alignItems: 'center', justifyContent: 'center'}}>\r\n          <ActivityIndicator\r\n            color={Platform.OS === 'android' ? Colors.blue : '#888'}\r\n            size=\"large\"\r\n          />\r\n        </View>\r\n      );\r\n    } else {\r\n      return this.props.children;\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}