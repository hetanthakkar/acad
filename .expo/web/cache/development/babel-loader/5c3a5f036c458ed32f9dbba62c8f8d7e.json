{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\codemaxx\\\\Desktop\\\\iBlood\\\\node_modules\\\\react-native-maps\\\\lib\\\\web\\\\Leaflet\\\\Overlay.js\";\nimport * as React from 'react';\nimport { ImageOverlay } from 'react-leaflet';\nimport { latLngBounds } from 'leaflet';\nimport createLogger from \"../utils/createLogger\";\nimport { transformProps } from \"./utils/transformProps\";\nvar logger = createLogger('Leaflet', 'Overlay');\n\nfunction localTransformProps(props) {\n  return _objectSpread({}, transformProps(props), {\n    bounds: latLngBounds(props.bounds[0], props.bounds[1]),\n    url: props.url,\n    zIndex: props.zIndex\n  });\n}\n\nvar ExpoOverlay = function (_React$Component) {\n  _inherits(ExpoOverlay, _React$Component);\n\n  function ExpoOverlay() {\n    _classCallCheck(this, ExpoOverlay);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ExpoOverlay).apply(this, arguments));\n  }\n\n  _createClass(ExpoOverlay, [{\n    key: \"setNativeProps\",\n    value: function setNativeProps(props) {\n      this.ref.setStyleIfChanged(this.props, localTransformProps(props));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var props = localTransformProps(this.props);\n      return React.createElement(ImageOverlay, _extends({\n        ref: function ref(_ref) {\n          return _this.ref = _ref;\n        }\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        }\n      }));\n    }\n  }]);\n\n  return ExpoOverlay;\n}(React.Component);\n\nexport { ExpoOverlay as default };","map":{"version":3,"sources":["C:/Users/codemaxx/Desktop/iBlood/node_modules/react-native-maps/lib/web/Leaflet/Overlay.js"],"names":["React","ImageOverlay","latLngBounds","createLogger","transformProps","logger","localTransformProps","props","bounds","url","zIndex","ExpoOverlay","ref","setStyleIfChanged","Component"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,YAAT,QAA6B,SAA7B;AAEA,OAAOC,YAAP;AACA,SAASC,cAAT;AAEA,IAAMC,MAAM,GAAGF,YAAY,CAAC,SAAD,EAAY,SAAZ,CAA3B;;AAEA,SAASG,mBAAT,CAA6BC,KAA7B,EAAoC;AAClC,2BACKH,cAAc,CAACG,KAAD,CADnB;AAEEC,IAAAA,MAAM,EAAEN,YAAY,CAACK,KAAK,CAACC,MAAN,CAAa,CAAb,CAAD,EAAkBD,KAAK,CAACC,MAAN,CAAa,CAAb,CAAlB,CAFtB;AAGEC,IAAAA,GAAG,EAAEF,KAAK,CAACE,GAHb;AAIEC,IAAAA,MAAM,EAAEH,KAAK,CAACG;AAJhB;AAMD;;IAGoBC,W;;;;;;;;;;;mCACJJ,K,EAAO;AACpB,WAAKK,GAAL,CAASC,iBAAT,CAA2B,KAAKN,KAAhC,EAAuCD,mBAAmB,CAACC,KAAD,CAA1D;AACD;;;6BAEQ;AAAA;;AACP,UAAMA,KAAK,GAAGD,mBAAmB,CAAC,KAAKC,KAAN,CAAjC;AAEA,aAAO,oBAAC,YAAD;AAAc,QAAA,GAAG,EAAE,aAAAK,IAAG;AAAA,iBAAK,KAAI,CAACA,GAAL,GAAWA,IAAhB;AAAA;AAAtB,SAAgDL,KAAhD;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;;;EATsCP,KAAK,CAACc,S;;SAA1BH,W","sourcesContent":["import * as React from 'react';\r\nimport { ImageOverlay } from 'react-leaflet';\r\nimport { latLngBounds } from 'leaflet';\r\n\r\nimport createLogger from '../utils/createLogger';\r\nimport { transformProps } from './utils/transformProps';\r\n\r\nconst logger = createLogger('Leaflet', 'Overlay');\r\n\r\nfunction localTransformProps(props) {\r\n  return {\r\n    ...transformProps(props),\r\n    bounds: latLngBounds(props.bounds[0], props.bounds[1]),\r\n    url: props.url,\r\n    zIndex: props.zIndex,\r\n  };\r\n}\r\n\r\n// TODO: Bacon: If the URL is a video then use VideoOverlay\r\nexport default class ExpoOverlay extends React.Component {\r\n  setNativeProps(props) {\r\n    this.ref.setStyleIfChanged(this.props, localTransformProps(props));\r\n  }\r\n\r\n  render() {\r\n    const props = localTransformProps(this.props);\r\n\r\n    return <ImageOverlay ref={ref => (this.ref = ref)} {...props} />;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}