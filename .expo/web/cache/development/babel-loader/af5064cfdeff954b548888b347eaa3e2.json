{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport { latLngBounds, latLng, Marker } from 'leaflet';\nexport var DEFAULT_ZOOM = 8;\nexport var DEFAULT_CENTER = [37.449811, -122.15745];\nexport function getCoordinatesForElements(markers) {\n  var output = [];\n\n  if (Array.isArray(markers)) {\n    for (var _iterator = markers, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var _marker = _ref;\n      if (_marker == null) continue;\n      var coordinate = coordinateFromElement(_marker);\n      output.push(coordinate);\n    }\n  } else {\n    output.push(coordinateFromElement(markers));\n  }\n\n  return output;\n}\nexport var coordinateFromElement = function coordinateFromElement(element) {\n  if (element == null) return null;else if (Array.isArray(element)) return convertCoordinate(element);else if (element instanceof Marker) {\n    return convertCoordinate(element.getLatLng());\n  } else if (element.coordinate) {\n    return convertCoordinate(element.coordinate);\n  }\n  throw new Error(\"Leaflet: couldn't infer coordinate from element: \" + element);\n};\n\nfunction getCoord(latitude, longitude) {\n  return {\n    latitude: latitude,\n    longitude: longitude\n  };\n}\n\nexport var convertCoordinateToObject = function convertCoordinateToObject(coordinate) {\n  if (!coordinate) return getCoord.apply(void 0, DEFAULT_CENTER);\n\n  if (Array.isArray(coordinate)) {\n    if (coordinate.length !== 2) {\n      throw new Error('Coordinate should be an array with length of 2: [lat, lng]');\n    }\n\n    return getCoord.apply(void 0, _toConsumableArray(coordinate));\n  }\n\n  return getCoord(coordinate.latitude || coordinate.lat || 0, coordinate.longitude || coordinate.lng || coordinate.lon || 0);\n};\nexport var convertCoordinate = function convertCoordinate(coordinate) {\n  if (!coordinate) return DEFAULT_CENTER;\n\n  if (Array.isArray(coordinate)) {\n    if (coordinate.length !== 2) {\n      throw new Error('Coordinate should be an array with length of 2: [lat, lng]');\n    }\n\n    return coordinate;\n  }\n\n  return [coordinate.latitude || coordinate.lat || 0, coordinate.longitude || coordinate.lng || coordinate.lon || 0];\n};\nexport var convertRegion = function convertRegion(region) {\n  var _convertCoordinate = convertCoordinate(region),\n      _convertCoordinate2 = _slicedToArray(_convertCoordinate, 2),\n      lat = _convertCoordinate2[0],\n      lon = _convertCoordinate2[1];\n\n  return latLngBounds(latLng(lat - region.latitudeDelta / 2, lon, -(region.longitudeDelta / 2)), latLng(lat + region.latitudeDelta / 2, lon, +(region.longitudeDelta / 2)));\n};\nexport var boundsToRegion = function boundsToRegion(bounds) {\n  var _bounds$getCenter = bounds.getCenter(),\n      latitude = _bounds$getCenter.lat,\n      longitude = _bounds$getCenter.lng;\n\n  var longitudeDelta = bounds.getEast() - bounds.getWest();\n  var latitudeDelta = bounds.getNorth() - bounds.getSouth();\n  return {\n    latitude: latitude,\n    longitude: longitude,\n    latitudeDelta: latitudeDelta,\n    longitudeDelta: longitudeDelta\n  };\n};","map":{"version":3,"sources":["C:/Users/codemaxx/Desktop/iBlood/node_modules/react-native-maps/lib/web/Leaflet/utils/coordinates.js"],"names":["latLngBounds","latLng","Marker","DEFAULT_ZOOM","DEFAULT_CENTER","getCoordinatesForElements","markers","output","Array","isArray","marker","coordinate","coordinateFromElement","push","element","convertCoordinate","getLatLng","Error","getCoord","latitude","longitude","convertCoordinateToObject","length","lat","lng","lon","convertRegion","region","latitudeDelta","longitudeDelta","boundsToRegion","bounds","getCenter","getEast","getWest","getNorth","getSouth"],"mappings":"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","sourcesContent":["import { latLngBounds, latLng, Marker } from 'leaflet';\r\n\r\nexport const DEFAULT_ZOOM = 8;\r\nexport const DEFAULT_CENTER = [37.449811, -122.15745];\r\n\r\nexport function getCoordinatesForElements(markers) {\r\n  let output = [];\r\n\r\n  if (Array.isArray(markers)) {\r\n    for (const marker of markers) {\r\n      if (marker == null) continue;\r\n      const coordinate = coordinateFromElement(marker);\r\n      output.push(coordinate);\r\n    }\r\n  } else {\r\n    output.push(coordinateFromElement(markers));\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\nexport const coordinateFromElement = element => {\r\n  if (element == null) return null;\r\n  else if (Array.isArray(element)) return convertCoordinate(element);\r\n  else if (element instanceof Marker) {\r\n    return convertCoordinate(element.getLatLng());\r\n  } else if (element.coordinate) {\r\n    return convertCoordinate(element.coordinate);\r\n  }\r\n  throw new Error(`Leaflet: couldn't infer coordinate from element: ${element}`);\r\n};\r\n\r\nfunction getCoord(latitude, longitude) {\r\n  return {\r\n    latitude,\r\n    longitude,\r\n  };\r\n}\r\n\r\nexport const convertCoordinateToObject = coordinate => {\r\n  if (!coordinate) return getCoord(...DEFAULT_CENTER);\r\n  if (Array.isArray(coordinate)) {\r\n    if (coordinate.length !== 2) {\r\n      throw new Error('Coordinate should be an array with length of 2: [lat, lng]');\r\n    }\r\n    return getCoord(...coordinate);\r\n  }\r\n  return getCoord(\r\n    coordinate.latitude || coordinate.lat || 0,\r\n    coordinate.longitude || coordinate.lng || coordinate.lon || 0\r\n  );\r\n};\r\nexport const convertCoordinate = coordinate => {\r\n  if (!coordinate) return DEFAULT_CENTER;\r\n  if (Array.isArray(coordinate)) {\r\n    if (coordinate.length !== 2) {\r\n      throw new Error('Coordinate should be an array with length of 2: [lat, lng]');\r\n    }\r\n    return coordinate;\r\n  }\r\n  return [\r\n    coordinate.latitude || coordinate.lat || 0,\r\n    coordinate.longitude || coordinate.lng || coordinate.lon || 0,\r\n  ];\r\n};\r\n\r\nexport const convertRegion = region => {\r\n  const [lat, lon] = convertCoordinate(region);\r\n  return latLngBounds(\r\n    latLng(lat - region.latitudeDelta / 2, lon, -(region.longitudeDelta / 2)),\r\n    latLng(lat + region.latitudeDelta / 2, lon, +(region.longitudeDelta / 2))\r\n  );\r\n};\r\n\r\nexport const boundsToRegion = bounds => {\r\n  const { lat: latitude, lng: longitude } = bounds.getCenter();\r\n  const longitudeDelta = bounds.getEast() - bounds.getWest();\r\n  const latitudeDelta = bounds.getNorth() - bounds.getSouth();\r\n\r\n  return { latitude, longitude, latitudeDelta, longitudeDelta };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}