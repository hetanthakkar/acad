{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\codemaxx\\\\Desktop\\\\iBlood\\\\components\\\\MyContacts.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Clipboard from \"react-native-web/dist/exports/Clipboard\";\nimport View from \"react-native-web/dist/exports/View\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { BorderlessButton, RectButton } from 'react-native-gesture-handler';\nimport { sendEmail, openTwitter, getContactTwitter } from \"../utils\";\nimport { SemiBoldText } from \"./StyledText\";\nimport ContactCard from \"./ContactCard\";\nimport { FontSizes, Colors } from \"../constants\";\n\nvar MyContacts = function (_React$Component) {\n  _inherits(MyContacts, _React$Component);\n\n  var _super = _createSuper(MyContacts);\n\n  _createClass(MyContacts, [{\n    key: \"getContacts\",\n    value: function getContacts() {\n      var value;\n      return _regeneratorRuntime.async(function getContacts$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@MySuperStore2019:contacts'));\n\n            case 3:\n              value = _context.sent;\n              this.setState({\n                contacts: JSON.parse(value)\n              });\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              return _context.abrupt(\"return\", []);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[0, 7]], Promise);\n    }\n  }]);\n\n  function MyContacts(props) {\n    var _this;\n\n    _classCallCheck(this, MyContacts);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      contacts: []\n    };\n\n    _this._handlePressCopyEmails = function () {\n      var contacts = 'first name,last name,email,twitter\\n';\n\n      _this.props.contacts.map(function (contact) {\n        contacts += contact.firstName + ',' + contact.lastName + ',' + contact.email + ',' + getContactTwitter(contact) + ' \\n';\n      });\n\n      Clipboard.setString(contacts);\n      Alert.alert('Contacts copied', 'Your contacts have been copied in csv format, you can past them anywhere', [{\n        text: 'OK',\n        onPress: function onPress() {\n          return Clipboard.setString(contacts);\n        }\n      }]);\n    };\n\n    _this.contacts = _this.props.contacts;\n    _this.tickets = _this.props.tickets;\n    return _this;\n  }\n\n  _createClass(MyContacts, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getContacts();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var contacts = this.props.contacts;\n      return React.createElement(View, {\n        style: [{\n          marginHorizontal: 10\n        }, this.props.style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 7\n        }\n      }, React.createElement(SemiBoldText, {\n        style: {\n          fontSize: FontSizes.title\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 9\n        }\n      }, \"My Contacts\"), contacts && contacts.length > 0 ? React.createElement(ClipBorderRadius, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }\n      }, React.createElement(RectButton, {\n        style: styles.bigButton,\n        onPress: this._handlePressCopyEmails,\n        underlayColor: \"#fff\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }\n      }, React.createElement(SemiBoldText, {\n        style: styles.bigButtonText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 15\n        }\n      }, 'Copy all emails to clipboard'))) : null, this.props.contacts.map(function (contact) {\n        return React.createElement(ContactCard, {\n          key: contact.id + contact.email,\n          contact: contact,\n          tickets: _this2.props.tickets,\n          style: {\n            marginTop: 10,\n            marginBottom: 10\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 11\n          }\n        });\n      }));\n    }\n  }]);\n\n  return MyContacts;\n}(React.Component);\n\nexport { MyContacts as default };\n\nvar ClipBorderRadius = function ClipBorderRadius(_ref) {\n  var children = _ref.children,\n      style = _ref.style;\n  return React.createElement(View, {\n    style: [{\n      borderRadius: BORDER_RADIUS,\n      overflow: 'hidden'\n    }, style],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nvar BORDER_RADIUS = 3;\nvar styles = StyleSheet.create({\n  bigButton: {\n    backgroundColor: Colors.blue,\n    paddingHorizontal: 15,\n    height: 50,\n    marginHorizontal: 15,\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: BORDER_RADIUS,\n    overflow: 'hidden',\n    flexDirection: 'row'\n  },\n  bigButtonText: {\n    fontSize: FontSizes.normalButton,\n    color: '#fff',\n    textAlign: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/codemaxx/Desktop/iBlood/components/MyContacts.js"],"names":["React","BorderlessButton","RectButton","sendEmail","openTwitter","getContactTwitter","SemiBoldText","ContactCard","FontSizes","Colors","MyContacts","AsyncStorage","getItem","value","setState","contacts","JSON","parse","props","state","_handlePressCopyEmails","map","contact","firstName","lastName","email","Clipboard","setString","Alert","alert","text","onPress","tickets","getContacts","marginHorizontal","style","fontSize","title","length","styles","bigButton","bigButtonText","id","marginTop","marginBottom","Component","ClipBorderRadius","children","borderRadius","BORDER_RADIUS","overflow","StyleSheet","create","backgroundColor","blue","paddingHorizontal","height","alignItems","justifyContent","flexDirection","normalButton","color","textAlign"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {Alert, Clipboard, View, AsyncStorage, StyleSheet} from 'react-native';\r\nimport {BorderlessButton, RectButton} from 'react-native-gesture-handler';\r\nimport {sendEmail, openTwitter, getContactTwitter} from '../utils';\r\n\r\nimport {SemiBoldText} from './StyledText';\r\nimport ContactCard from './ContactCard';\r\nimport {FontSizes, Colors} from '../constants';\r\n\r\nexport default class MyContacts extends React.Component {\r\n  state = {\r\n    contacts: [],\r\n  };\r\n  async getContacts() {\r\n    try {\r\n      const value = await AsyncStorage.getItem('@MySuperStore2019:contacts');\r\n      this.setState({contacts: JSON.parse(value)});\r\n    } catch (err) {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.contacts = this.props.contacts;\r\n    this.tickets = this.props.tickets;\r\n    // console.log(\"tickets from MyContacts\", this.tickets);\r\n  }\r\n  componentDidMount() {\r\n    this.getContacts();\r\n  }\r\n  render() {\r\n    const contacts = this.props.contacts;\r\n    return (\r\n      <View style={[{marginHorizontal: 10}, this.props.style]}>\r\n        <SemiBoldText style={{fontSize: FontSizes.title}}>\r\n          My Contacts\r\n        </SemiBoldText>\r\n        {contacts && contacts.length > 0 ? (\r\n          <ClipBorderRadius>\r\n            <RectButton\r\n              style={styles.bigButton}\r\n              onPress={this._handlePressCopyEmails}\r\n              underlayColor=\"#fff\">\r\n              <SemiBoldText style={styles.bigButtonText}>\r\n                {'Copy all emails to clipboard'}\r\n              </SemiBoldText>\r\n            </RectButton>\r\n          </ClipBorderRadius>\r\n        ) : null}\r\n        {this.props.contacts.map(contact => (\r\n          <ContactCard\r\n            key={contact.id + contact.email}\r\n            contact={contact}\r\n            tickets={this.props.tickets}\r\n            style={{marginTop: 10, marginBottom: 10}}\r\n          />\r\n        ))}\r\n      </View>\r\n    );\r\n  }\r\n\r\n  _handlePressCopyEmails = () => {\r\n    let contacts = 'first name,last name,email,twitter\\n';\r\n    this.props.contacts.map(contact => {\r\n      contacts +=\r\n        contact.firstName +\r\n        ',' +\r\n        contact.lastName +\r\n        ',' +\r\n        contact.email +\r\n        ',' +\r\n        getContactTwitter(contact) +\r\n        ' \\n';\r\n    });\r\n    Clipboard.setString(contacts);\r\n    Alert.alert(\r\n      'Contacts copied',\r\n      'Your contacts have been copied in csv format, you can past them anywhere',\r\n      [{text: 'OK', onPress: () => Clipboard.setString(contacts)}]\r\n    );\r\n  };\r\n}\r\n\r\nconst ClipBorderRadius = ({children, style}) => {\r\n  return (\r\n    <View style={[{borderRadius: BORDER_RADIUS, overflow: 'hidden'}, style]}>\r\n      {children}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst BORDER_RADIUS = 3;\r\n\r\nconst styles = StyleSheet.create({\r\n  bigButton: {\r\n    backgroundColor: Colors.blue,\r\n    paddingHorizontal: 15,\r\n    height: 50,\r\n    marginHorizontal: 15,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    borderRadius: BORDER_RADIUS,\r\n    overflow: 'hidden',\r\n    flexDirection: 'row',\r\n  },\r\n  bigButtonText: {\r\n    fontSize: FontSizes.normalButton,\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}