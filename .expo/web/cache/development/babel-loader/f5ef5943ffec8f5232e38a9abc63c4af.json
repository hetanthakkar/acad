{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\codemaxx\\\\Desktop\\\\iBlood\\\\node_modules\\\\react-native-render-html\\\\src\\\\HTMLImage.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport PropTypes from 'prop-types';\n\nvar HTMLImage = function (_PureComponent) {\n  _inherits(HTMLImage, _PureComponent);\n\n  var _super = _createSuper(HTMLImage);\n\n  function HTMLImage(props) {\n    var _this;\n\n    _classCallCheck(this, HTMLImage);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      width: props.imagesInitialDimensions.width,\n      height: props.imagesInitialDimensions.height\n    };\n    return _this;\n  }\n\n  _createClass(HTMLImage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.mounted = true;\n      this.getImageSize();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.mounted = false;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      this.getImageSize(this.props);\n    }\n  }, {\n    key: \"getDimensionsFromStyle\",\n    value: function getDimensionsFromStyle(style, height, width) {\n      var styleWidth;\n      var styleHeight;\n\n      if (height) {\n        styleHeight = height;\n      }\n\n      if (width) {\n        styleWidth = width;\n      }\n\n      if (Array.isArray(style)) {\n        style.forEach(function (styles) {\n          if (!width && styles['width']) {\n            styleWidth = styles['width'];\n          }\n\n          if (!height && styles['height']) {\n            styleHeight = styles['height'];\n          }\n        });\n      } else {\n        if (!width && style['width']) {\n          styleWidth = style['width'];\n        }\n\n        if (!height && style['height']) {\n          styleHeight = style['height'];\n        }\n      }\n\n      return {\n        styleWidth: styleWidth,\n        styleHeight: styleHeight\n      };\n    }\n  }, {\n    key: \"getImageSize\",\n    value: function getImageSize() {\n      var _this2 = this;\n\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var source = props.source,\n          imagesMaxWidth = props.imagesMaxWidth,\n          style = props.style,\n          height = props.height,\n          width = props.width;\n\n      var _this$getDimensionsFr = this.getDimensionsFromStyle(style, height, width),\n          styleWidth = _this$getDimensionsFr.styleWidth,\n          styleHeight = _this$getDimensionsFr.styleHeight;\n\n      if (styleWidth && styleHeight) {\n        return this.mounted && this.setState({\n          width: typeof styleWidth === 'string' && styleWidth.search('%') !== -1 ? styleWidth : parseInt(styleWidth, 10),\n          height: typeof styleHeight === 'string' && styleHeight.search('%') !== -1 ? styleHeight : parseInt(styleHeight, 10)\n        });\n      }\n\n      Image.getSize(source.uri, function (originalWidth, originalHeight) {\n        if (!imagesMaxWidth) {\n          return _this2.mounted && _this2.setState({\n            width: originalWidth,\n            height: originalHeight\n          });\n        }\n\n        var optimalWidth = imagesMaxWidth <= originalWidth ? imagesMaxWidth : originalWidth;\n        var optimalHeight = optimalWidth * originalHeight / originalWidth;\n        _this2.mounted && _this2.setState({\n          width: optimalWidth,\n          height: optimalHeight,\n          error: false\n        });\n      }, function () {\n        _this2.mounted && _this2.setState({\n          error: true\n        });\n      });\n    }\n  }, {\n    key: \"validImage\",\n    value: function validImage(source, style) {\n      var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return React.createElement(Image, _extends({\n        source: source,\n        style: [style, {\n          width: this.state.width,\n          height: this.state.height,\n          resizeMode: 'cover'\n        }]\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          source = _this$props.source,\n          style = _this$props.style,\n          passProps = _this$props.passProps;\n      return !this.state.error ? this.validImage(source, style, passProps) : this.errorImage;\n    }\n  }, {\n    key: \"errorImage\",\n    get: function get() {\n      return React.createElement(View, {\n        style: {\n          width: 50,\n          height: 50,\n          borderWidth: 1,\n          borderColor: 'lightgray',\n          overflow: 'hidden',\n          justifyContent: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }\n      }, this.props.alt ? React.createElement(Text, {\n        style: {\n          textAlign: 'center',\n          fontStyle: 'italic'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 36\n        }\n      }, this.props.alt) : false);\n    }\n  }]);\n\n  return HTMLImage;\n}(PureComponent);\n\nHTMLImage.propTypes = {\n  source: PropTypes.object.isRequired,\n  alt: PropTypes.string,\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  imagesMaxWidth: PropTypes.number,\n  imagesInitialDimensions: PropTypes.shape({\n    width: PropTypes.number,\n    height: PropTypes.number\n  })\n};\nHTMLImage.defaultProps = {\n  imagesInitialDimensions: {\n    width: 100,\n    height: 100\n  }\n};\nexport { HTMLImage as default };","map":{"version":3,"sources":["C:/Users/codemaxx/Desktop/iBlood/node_modules/react-native-render-html/src/HTMLImage.js"],"names":["React","PureComponent","PropTypes","HTMLImage","props","state","width","imagesInitialDimensions","height","mounted","getImageSize","prevProps","prevState","style","styleWidth","styleHeight","Array","isArray","forEach","styles","source","imagesMaxWidth","getDimensionsFromStyle","setState","search","parseInt","Image","getSize","uri","originalWidth","originalHeight","optimalWidth","optimalHeight","error","resizeMode","passProps","validImage","errorImage","borderWidth","borderColor","overflow","justifyContent","alt","textAlign","fontStyle","propTypes","object","isRequired","string","oneOfType","number","array","shape","defaultProps"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport { Image, View, Text } from 'react-native';\nimport PropTypes from 'prop-types';\n\nexport default class HTMLImage extends PureComponent {\n    constructor (props) {\n        super(props);\n        this.state = {\n            width: props.imagesInitialDimensions.width,\n            height: props.imagesInitialDimensions.height\n        };\n    }\n\n    static propTypes = {\n        source: PropTypes.object.isRequired,\n        alt: PropTypes.string,\n        height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n        imagesMaxWidth: PropTypes.number,\n        imagesInitialDimensions: PropTypes.shape({\n            width: PropTypes.number,\n            height: PropTypes.number\n        })\n    }\n\n    static defaultProps = {\n        imagesInitialDimensions: {\n            width: 100,\n            height: 100\n        }\n    }\n\n    componentDidMount () {\n        this.mounted = true;\n        this.getImageSize();\n    }\n\n    componentWillUnmount () {\n        this.mounted = false;\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        this.getImageSize(this.props);\n    }\n\n    getDimensionsFromStyle (style, height, width) {\n        let styleWidth;\n        let styleHeight;\n\n        if (height) {\n            styleHeight = height;\n        }\n        if (width) {\n            styleWidth = width;\n        }\n        if (Array.isArray(style)) {\n            style.forEach((styles) => {\n                if (!width && styles['width']) {\n                    styleWidth = styles['width'];\n                }\n                if (!height && styles['height']) {\n                    styleHeight = styles['height'];\n                }\n            });\n        } else {\n            if (!width && style['width']) {\n                styleWidth = style['width'];\n            }\n            if (!height && style['height']) {\n                styleHeight = style['height'];\n            }\n        }\n\n        return { styleWidth, styleHeight };\n    }\n\n    getImageSize (props = this.props) {\n        const { source, imagesMaxWidth, style, height, width } = props;\n        const { styleWidth, styleHeight } = this.getDimensionsFromStyle(style, height, width);\n\n        if (styleWidth && styleHeight) {\n            return this.mounted && this.setState({\n                width: typeof styleWidth === 'string' && styleWidth.search('%') !== -1 ? styleWidth : parseInt(styleWidth, 10),\n                height: typeof styleHeight === 'string' && styleHeight.search('%') !== -1 ? styleHeight : parseInt(styleHeight, 10)\n            });\n        }\n        // Fetch image dimensions only if they aren't supplied or if with or height is missing\n        Image.getSize(\n            source.uri,\n            (originalWidth, originalHeight) => {\n                if (!imagesMaxWidth) {\n                    return this.mounted && this.setState({ width: originalWidth, height: originalHeight });\n                }\n                const optimalWidth = imagesMaxWidth <= originalWidth ? imagesMaxWidth : originalWidth;\n                const optimalHeight = (optimalWidth * originalHeight) / originalWidth;\n                this.mounted && this.setState({ width: optimalWidth, height: optimalHeight, error: false });\n            },\n            () => {\n                this.mounted && this.setState({ error: true });\n            }\n        );\n    }\n\n    validImage (source, style, props = {}) {\n        return (\n            <Image\n              source={source}\n              style={[style, { width: this.state.width, height: this.state.height, resizeMode: 'cover' }]}\n              {...props}\n            />\n        );\n    }\n\n    get errorImage () {\n        return (\n            <View style={{ width: 50, height: 50, borderWidth: 1, borderColor: 'lightgray', overflow: 'hidden', justifyContent: 'center' }}>\n                { this.props.alt ? <Text style={{ textAlign: 'center', fontStyle: 'italic' }}>{ this.props.alt }</Text> : false }\n            </View>\n        );\n    }\n\n    render () {\n        const { source, style, passProps } = this.props;\n\n        return !this.state.error ? this.validImage(source, style, passProps) : this.errorImage;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}