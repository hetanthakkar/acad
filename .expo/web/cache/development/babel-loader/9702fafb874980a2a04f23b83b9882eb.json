{"ast":null,"code":"import Token from \"./Token\";\nexport default function groupTextTokens(tokens) {\n  var result = [];\n  var hasGroup = false;\n  tokens.forEach(function (token, index) {\n    if (!token.block && !hasGroup) {\n      hasGroup = true;\n      result.push(new Token('textgroup', 1));\n      result.push(token);\n    } else if (!token.block && hasGroup) {\n      result.push(token);\n    } else if (token.block && hasGroup) {\n      hasGroup = false;\n      result.push(new Token('textgroup', -1));\n      result.push(token);\n    } else {\n      result.push(token);\n    }\n  });\n  return result;\n}","map":{"version":3,"sources":["C:/Users/codemaxx/Desktop/iBlood/node_modules/react-native-markdown-renderer/src/lib/util/groupTextTokens.js"],"names":["Token","groupTextTokens","tokens","result","hasGroup","forEach","token","index","block","push"],"mappings":"AACA,OAAOA,KAAP;AAGA,eAAe,SAASC,eAAT,CAAyBC,MAAzB,EAAiC;AAC9C,MAAMC,MAAM,GAAG,EAAf;AAEA,MAAIC,QAAQ,GAAG,KAAf;AACAF,EAAAA,MAAM,CAACG,OAAP,CAAe,UAACC,KAAD,EAAQC,KAAR,EAAkB;AAC/B,QAAI,CAACD,KAAK,CAACE,KAAP,IAAgB,CAACJ,QAArB,EAA+B;AAC7BA,MAAAA,QAAQ,GAAG,IAAX;AACAD,MAAAA,MAAM,CAACM,IAAP,CAAY,IAAIT,KAAJ,CAAU,WAAV,EAAuB,CAAvB,CAAZ;AACAG,MAAAA,MAAM,CAACM,IAAP,CAAYH,KAAZ;AACD,KAJD,MAIO,IAAI,CAACA,KAAK,CAACE,KAAP,IAAgBJ,QAApB,EAA8B;AACnCD,MAAAA,MAAM,CAACM,IAAP,CAAYH,KAAZ;AACD,KAFM,MAEA,IAAIA,KAAK,CAACE,KAAN,IAAeJ,QAAnB,EAA6B;AAClCA,MAAAA,QAAQ,GAAG,KAAX;AACAD,MAAAA,MAAM,CAACM,IAAP,CAAY,IAAIT,KAAJ,CAAU,WAAV,EAAuB,CAAC,CAAxB,CAAZ;AACAG,MAAAA,MAAM,CAACM,IAAP,CAAYH,KAAZ;AACD,KAJM,MAIA;AACLH,MAAAA,MAAM,CAACM,IAAP,CAAYH,KAAZ;AACD;AACF,GAdD;AAgBA,SAAOH,MAAP;AACD","sourcesContent":["// import getIsTextType from './getIsTextType';\nimport Token from './Token';\n// import getIsInlineTextType from './getIsInlineTextType';\n\nexport default function groupTextTokens(tokens) {\n  const result = [];\n\n  let hasGroup = false;\n  tokens.forEach((token, index) => {\n    if (!token.block && !hasGroup) {\n      hasGroup = true;\n      result.push(new Token('textgroup', 1));\n      result.push(token);\n    } else if (!token.block && hasGroup) {\n      result.push(token);\n    } else if (token.block && hasGroup) {\n      hasGroup = false;\n      result.push(new Token('textgroup', -1));\n      result.push(token);\n    } else {\n      result.push(token);\n    }\n  });\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}