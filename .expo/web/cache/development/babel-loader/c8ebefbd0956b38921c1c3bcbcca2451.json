{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\codemaxx\\\\Desktop\\\\iBlood\\\\node_modules\\\\react-native-maps\\\\lib\\\\components\\\\MapPolygon.js\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ColorPropType from \"react-native-web/dist/exports/ColorPropType\";\nimport ViewPropTypes from \"react-native-web/dist/exports/ViewPropTypes\";\nimport View from \"react-native-web/dist/exports/View\";\nimport decorateMapComponent, { USES_DEFAULT_IMPLEMENTATION, SUPPORTED } from \"./decorateMapComponent\";\nvar viewPropTypes = ViewPropTypes || View.propTypes;\n\nvar propTypes = _objectSpread({}, viewPropTypes, {\n  coordinates: PropTypes.arrayOf(PropTypes.shape({\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired\n  })),\n  holes: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.shape({\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired\n  }))),\n  onPress: PropTypes.func,\n  tappable: PropTypes.bool,\n  strokeWidth: PropTypes.number,\n  strokeColor: ColorPropType,\n  fillColor: ColorPropType,\n  zIndex: PropTypes.number,\n  lineCap: PropTypes.oneOf(['butt', 'round', 'square']),\n  lineJoin: PropTypes.oneOf(['miter', 'round', 'bevel']),\n  miterLimit: PropTypes.number,\n  geodesic: PropTypes.bool,\n  lineDashPhase: PropTypes.number,\n  lineDashPattern: PropTypes.arrayOf(PropTypes.number)\n});\n\nvar defaultProps = {\n  strokeColor: '#000',\n  strokeWidth: 1\n};\n\nvar MapPolygon = function (_React$Component) {\n  _inherits(MapPolygon, _React$Component);\n\n  function MapPolygon() {\n    _classCallCheck(this, MapPolygon);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MapPolygon).apply(this, arguments));\n  }\n\n  _createClass(MapPolygon, [{\n    key: \"setNativeProps\",\n    value: function setNativeProps(props) {\n      this.polygon.setNativeProps(props);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var AIRMapPolygon = this.getAirComponent();\n      return React.createElement(AIRMapPolygon, _extends({}, this.props, {\n        ref: function ref(_ref) {\n          _this.polygon = _ref;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        }\n      }));\n    }\n  }]);\n\n  return MapPolygon;\n}(React.Component);\n\nMapPolygon.propTypes = propTypes;\nMapPolygon.defaultProps = defaultProps;\nexport default decorateMapComponent(MapPolygon, {\n  componentType: 'Polygon',\n  providers: {\n    google: {\n      ios: SUPPORTED,\n      android: USES_DEFAULT_IMPLEMENTATION\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/codemaxx/Desktop/iBlood/node_modules/react-native-maps/lib/components/MapPolygon.js"],"names":["PropTypes","React","decorateMapComponent","USES_DEFAULT_IMPLEMENTATION","SUPPORTED","viewPropTypes","ViewPropTypes","View","propTypes","coordinates","arrayOf","shape","latitude","number","isRequired","longitude","holes","onPress","func","tappable","bool","strokeWidth","strokeColor","ColorPropType","fillColor","zIndex","lineCap","oneOf","lineJoin","miterLimit","geodesic","lineDashPhase","lineDashPattern","defaultProps","MapPolygon","props","polygon","setNativeProps","AIRMapPolygon","getAirComponent","ref","Component","componentType","providers","google","ios","android"],"mappings":";;;;;;;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;AAEA,OAAOC,oBAAP,IACEC,2BADF,EAEEC,SAFF;AAMA,IAAMC,aAAa,GAAGC,aAAa,IAAIC,IAAI,CAACC,SAA5C;;AAEA,IAAMA,SAAS,qBACVH,aADU;AAMbI,EAAAA,WAAW,EAAET,SAAS,CAACU,OAAV,CACXV,SAAS,CAACW,KAAV,CAAgB;AAIdC,IAAAA,QAAQ,EAAEZ,SAAS,CAACa,MAAV,CAAiBC,UAJb;AAKdC,IAAAA,SAAS,EAAEf,SAAS,CAACa,MAAV,CAAiBC;AALd,GAAhB,CADW,CANA;AAmBbE,EAAAA,KAAK,EAAEhB,SAAS,CAACU,OAAV,CACLV,SAAS,CAACU,OAAV,CACEV,SAAS,CAACW,KAAV,CAAgB;AAIdC,IAAAA,QAAQ,EAAEZ,SAAS,CAACa,MAAV,CAAiBC,UAJb;AAKdC,IAAAA,SAAS,EAAEf,SAAS,CAACa,MAAV,CAAiBC;AALd,GAAhB,CADF,CADK,CAnBM;AAkCbG,EAAAA,OAAO,EAAEjB,SAAS,CAACkB,IAlCN;AAwCbC,EAAAA,QAAQ,EAAEnB,SAAS,CAACoB,IAxCP;AA6CbC,EAAAA,WAAW,EAAErB,SAAS,CAACa,MA7CV;AAkDbS,EAAAA,WAAW,EAAEC,aAlDA;AAuDbC,EAAAA,SAAS,EAAED,aAvDE;AAgEbE,EAAAA,MAAM,EAAEzB,SAAS,CAACa,MAhEL;AAwEba,EAAAA,OAAO,EAAE1B,SAAS,CAAC2B,KAAV,CAAgB,CAAC,MAAD,EAAS,OAAT,EAAkB,QAAlB,CAAhB,CAxEI;AAgFbC,EAAAA,QAAQ,EAAE5B,SAAS,CAAC2B,KAAV,CAAgB,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,CAAhB,CAhFG;AA4FbE,EAAAA,UAAU,EAAE7B,SAAS,CAACa,MA5FT;AAqGbiB,EAAAA,QAAQ,EAAE9B,SAAS,CAACoB,IArGP;AAkHbW,EAAAA,aAAa,EAAE/B,SAAS,CAACa,MAlHZ;AAgIbmB,EAAAA,eAAe,EAAEhC,SAAS,CAACU,OAAV,CAAkBV,SAAS,CAACa,MAA5B;AAhIJ,EAAf;;AAmIA,IAAMoB,YAAY,GAAG;AACnBX,EAAAA,WAAW,EAAE,MADM;AAEnBD,EAAAA,WAAW,EAAE;AAFM,CAArB;;IAKMa,U;;;;;;;;;;;mCACWC,K,EAAO;AACpB,WAAKC,OAAL,CAAaC,cAAb,CAA4BF,KAA5B;AACD;;;6BAEQ;AAAA;;AACP,UAAMG,aAAa,GAAG,KAAKC,eAAL,EAAtB;AACA,aACE,oBAAC,aAAD,eACM,KAAKJ,KADX;AAEE,QAAA,GAAG,EAAE,aAAAK,IAAG,EAAI;AACV,UAAA,KAAI,CAACJ,OAAL,GAAeI,IAAf;AACD,SAJH;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAQD;;;;EAfsBvC,KAAK,CAACwC,S;;AAkB/BP,UAAU,CAAC1B,SAAX,GAAuBA,SAAvB;AACA0B,UAAU,CAACD,YAAX,GAA0BA,YAA1B;AAEA,eAAe/B,oBAAoB,CAACgC,UAAD,EAAa;AAC9CQ,EAAAA,aAAa,EAAE,SAD+B;AAE9CC,EAAAA,SAAS,EAAE;AACTC,IAAAA,MAAM,EAAE;AACNC,MAAAA,GAAG,EAAEzC,SADC;AAEN0C,MAAAA,OAAO,EAAE3C;AAFH;AADC;AAFmC,CAAb,CAAnC","sourcesContent":["import PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { ColorPropType, ViewPropTypes, View } from 'react-native';\r\nimport decorateMapComponent, {\r\n  USES_DEFAULT_IMPLEMENTATION,\r\n  SUPPORTED,\r\n} from './decorateMapComponent';\r\n\r\n// if ViewPropTypes is not defined fall back to View.propType (to support RN < 0.44)\r\nconst viewPropTypes = ViewPropTypes || View.propTypes;\r\n\r\nconst propTypes = {\r\n  ...viewPropTypes,\r\n\r\n  /**\r\n   * An array of coordinates to describe the polygon\r\n   */\r\n  coordinates: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      /**\r\n       * Latitude/Longitude coordinates\r\n       */\r\n      latitude: PropTypes.number.isRequired,\r\n      longitude: PropTypes.number.isRequired,\r\n    })\r\n  ),\r\n\r\n  /**\r\n   * An array of array of coordinates to describe the polygon holes\r\n   */\r\n  holes: PropTypes.arrayOf(\r\n    PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        /**\r\n         * Latitude/Longitude coordinates\r\n         */\r\n        latitude: PropTypes.number.isRequired,\r\n        longitude: PropTypes.number.isRequired,\r\n      })\r\n    )\r\n  ),\r\n\r\n  /**\r\n   * Callback that is called when the user presses on the polygon\r\n   */\r\n  onPress: PropTypes.func,\r\n\r\n  /**\r\n   * Boolean to allow a polygon to be tappable and use the\r\n   * onPress function\r\n   */\r\n  tappable: PropTypes.bool,\r\n\r\n  /**\r\n   * The stroke width to use for the path.\r\n   */\r\n  strokeWidth: PropTypes.number,\r\n\r\n  /**\r\n   * The stroke color to use for the path.\r\n   */\r\n  strokeColor: ColorPropType,\r\n\r\n  /**\r\n   * The fill color to use for the path.\r\n   */\r\n  fillColor: ColorPropType,\r\n\r\n  /**\r\n   * The order in which this tile overlay is drawn with respect to other overlays. An overlay\r\n   * with a larger z-index is drawn over overlays with smaller z-indices. The order of overlays\r\n   * with the same z-index is arbitrary. The default zIndex is 0.\r\n   *\r\n   * @platform android\r\n   */\r\n  zIndex: PropTypes.number,\r\n\r\n  /**\r\n   * The line cap style to apply to the open ends of the path.\r\n   * The default style is `round`.\r\n   *\r\n   * @platform ios\r\n   */\r\n  lineCap: PropTypes.oneOf(['butt', 'round', 'square']),\r\n\r\n  /**\r\n   * The line join style to apply to corners of the path.\r\n   * The default style is `round`.\r\n   *\r\n   * @platform ios\r\n   */\r\n  lineJoin: PropTypes.oneOf(['miter', 'round', 'bevel']),\r\n\r\n  /**\r\n   * The limiting value that helps avoid spikes at junctions between connected line segments.\r\n   * The miter limit helps you avoid spikes in paths that use the `miter` `lineJoin` style. If\r\n   * the ratio of the miter length—that is, the diagonal length of the miter join—to the line\r\n   * thickness exceeds the miter limit, the joint is converted to a bevel join. The default\r\n   * miter limit is 10, which results in the conversion of miters whose angle at the joint\r\n   * is less than 11 degrees.\r\n   *\r\n   * @platform ios\r\n   */\r\n  miterLimit: PropTypes.number,\r\n\r\n  /**\r\n   * Boolean to indicate whether to draw each segment of the line as a geodesic as opposed to\r\n   * straight lines on the Mercator projection. A geodesic is the shortest path between two\r\n   * points on the Earth's surface. The geodesic curve is constructed assuming the Earth is\r\n   * a sphere.\r\n   *\r\n   */\r\n  geodesic: PropTypes.bool,\r\n\r\n  /**\r\n   * The offset (in points) at which to start drawing the dash pattern.\r\n   *\r\n   * Use this property to start drawing a dashed line partway through a segment or gap. For\r\n   * example, a phase value of 6 for the patter 5-2-3-2 would cause drawing to begin in the\r\n   * middle of the first gap.\r\n   *\r\n   * The default value of this property is 0.\r\n   *\r\n   * @platform ios\r\n   */\r\n  lineDashPhase: PropTypes.number,\r\n\r\n  /**\r\n   * An array of numbers specifying the dash pattern to use for the path.\r\n   *\r\n   * The array contains one or more numbers that indicate the lengths (measured in points) of the\r\n   * line segments and gaps in the pattern. The values in the array alternate, starting with the\r\n   * first line segment length, followed by the first gap length, followed by the second line\r\n   * segment length, and so on.\r\n   *\r\n   * This property is set to `null` by default, which indicates no line dash pattern.\r\n   *\r\n   * @platform ios\r\n   */\r\n  lineDashPattern: PropTypes.arrayOf(PropTypes.number),\r\n};\r\n\r\nconst defaultProps = {\r\n  strokeColor: '#000',\r\n  strokeWidth: 1,\r\n};\r\n\r\nclass MapPolygon extends React.Component {\r\n  setNativeProps(props) {\r\n    this.polygon.setNativeProps(props);\r\n  }\r\n\r\n  render() {\r\n    const AIRMapPolygon = this.getAirComponent();\r\n    return (\r\n      <AIRMapPolygon\r\n        {...this.props}\r\n        ref={ref => {\r\n          this.polygon = ref;\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nMapPolygon.propTypes = propTypes;\r\nMapPolygon.defaultProps = defaultProps;\r\n\r\nexport default decorateMapComponent(MapPolygon, {\r\n  componentType: 'Polygon',\r\n  providers: {\r\n    google: {\r\n      ios: SUPPORTED,\r\n      android: USES_DEFAULT_IMPLEMENTATION,\r\n    },\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}