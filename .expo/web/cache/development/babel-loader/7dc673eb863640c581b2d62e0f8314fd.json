{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\codemaxx\\\\Desktop\\\\iBlood\\\\node_modules\\\\react-native-maps\\\\lib\\\\web\\\\Leaflet\\\\Map.js\";\nimport { latLngBounds as boundsForCooords, Marker as LeafletMarker } from 'leaflet';\nimport * as React from 'react';\nimport { Map as MapView, TileLayer } from 'react-leaflet';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ReactDOMServer from 'react-dom/server';\nimport createLogger from \"../utils/createLogger\";\nimport { boundsToRegion, convertCoordinate, convertRegion, DEFAULT_CENTER, getCoordinatesForElements } from \"./utils/coordinates\";\nimport withRemoteStyles from \"./utils/withRemoteStyles\";\nimport { transformMapEvents } from \"./utils/events\";\nvar LeafletMap = withRemoteStyles(MapView);\nvar DEFAULT_ZOOM = 6;\nvar logger = createLogger('Leaflet', 'Map');\n\nvar _default = function (_React$Component) {\n  _inherits(_default, _React$Component);\n\n  function _default(props) {\n    var _this;\n\n    _classCallCheck(this, _default);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(_default).call(this, props));\n\n    _this.animateToCoordinate = function (latLng, duration) {\n      _this.animateCamera({\n        center: latLng\n      }, duration);\n    };\n\n    _this.animateToBearing = function (bearing, duration) {\n      logger.warn('animateToBearing() is unsupported in Leaflet');\n    };\n\n    _this.animateToViewingAngle = function (angle, duration) {\n      logger.warn('animateToViewingAngle() is unsupported in Leaflet');\n    };\n\n    _this.ensureMarkers = function (markers) {\n      var output = [];\n      var markerIDs = [];\n\n      for (var _iterator = markers, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\" : \"@@iterator\"]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var _marker = _ref;\n\n        if (typeof _marker === 'string') {\n          markerIDs.push(_marker);\n        } else if (_marker instanceof LeafletMarker) {\n          output.push(_marker);\n        } else {\n          logger.warn('ensureMarkers', 'No valid marker for: ', _marker);\n        }\n      }\n\n      return [].concat(_toConsumableArray(Object.values(_this.markersForIDs(markerIDs))), output);\n    };\n\n    _this.markersForIDs = function (markerIDs) {\n      var markers = {};\n\n      if (!markerIDs.length) {\n        return markers;\n      }\n\n      logger.log('markersForIDs', markerIDs);\n\n      _this.leafletElement.eachLayer(function (layer) {\n        if (layer instanceof LeafletMarker && markerIDs.includes(layer.options.id)) {\n          logger.log('markersForIDs', 'got marker', layer);\n          markers[layer.options.id] = layer;\n        }\n      });\n\n      return markers;\n    };\n\n    _this.fitToElements = function (animated) {\n      var ref = _this.leafletElement;\n      var features = [];\n      ref.eachLayer(function (layer) {\n        features.push(layer);\n      });\n\n      _this.fitToSuppliedMarkers(features, 0, animated);\n    };\n\n    _this.fitToSuppliedMarkers = function (markers, edgePadding, animated) {\n      var ensuredMarkers = _this.ensureMarkers(markers);\n\n      var coords = getCoordinatesForElements(ensuredMarkers);\n      logger.log('fitToSuppliedMarkers', 'markers', ensuredMarkers, coords);\n      return _this.fitToCoordinates(coords, edgePadding, animated);\n    };\n\n    _this.fitToCoordinates = function (coordinates, edgePadding, animated) {\n      if (edgePadding) {\n        logger.warn('fitToCoordinates() edgePadding is unimplemented');\n      }\n\n      var bounds = boundsForCooords(coordinates.map(function (coord) {\n        return convertCoordinate(coord);\n      }));\n\n      _this.leafletElement.flyToBounds(bounds, {\n        animate: animated,\n        duration: 0.5\n      });\n    };\n\n    _this.getMapBoundaries = function () {\n      var northEast = _this.leafletElement.getBounds().getNorthEast();\n\n      var southWest = _this.leafletElement.getBounds().getSouthWest();\n\n      return {\n        northEast: {\n          latitude: northEast.lat,\n          longitude: northEast.lng\n        },\n        southWest: {\n          latitude: southWest.lat,\n          longitude: southWest.lng\n        }\n      };\n    };\n\n    _this.setMapBoundaries = function (northEast, southWest) {\n      _this.leafletElement.fitBounds([convertCoordinate(northEast), convertCoordinate(southWest)]);\n    };\n\n    _this.pointForCoordinate = function (coordinate) {\n      return _this.leafletElement.latLngToContainerPoint(convertCoordinate(coordinate));\n    };\n\n    _this.coordinateForPoint = function (point) {\n      var ref = _this.leafletElement;\n      return ref.containerPointToLatLng(point);\n    };\n\n    _this.getMarkersFrames = function (onlyVisible) {};\n\n    _this.setCamera = function (camera) {\n      _this.animateCamera(camera, 0);\n    };\n\n    _this.getCamera = function () {\n      if (!_this.isReady) throw new Error('Leaflet.Map.getCamera(): map is not ready yet');\n\n      var _assertThisInitialize = _assertThisInitialized(_this),\n          leafletElement = _assertThisInitialize.leafletElement;\n\n      var center = leafletElement.getCenter();\n      return {\n        center: {\n          latitude: center.lat,\n          longitude: center.lng\n        },\n        zoom: leafletElement.getZoom()\n      };\n    };\n\n    _this.animateCamera = function (camera, duration) {\n      var ref = _this.leafletElement;\n      logger.log('animateCamera', ref, camera, duration);\n      var center = camera.center ? convertCoordinate(camera.center) : ref.getCenter();\n\n      if (typeof camera.heading === 'number') {\n        logger.warn('Camera heading is not supported in Leaflet');\n      }\n\n      if (typeof camera.pitch === 'number') {\n        logger.warn('Camera pitch is not supported in Leaflet');\n      }\n\n      ref.setView(center, camera.zoom || ref.getZoom(), {\n        animate: duration !== 0,\n        pan: {\n          duration: duration * 0.001\n        }\n      });\n    };\n\n    _this.animateToRegion = function (region, duration) {\n      var ref = _this.leafletElement;\n      var bounds = convertRegion(region);\n      logger.log('animateToRegion', ref, region, bounds, duration);\n      ref.flyToBounds(bounds, {\n        animate: duration !== 0,\n        duration: duration * 0.001\n      });\n    };\n\n    _this.setRef = function (ref) {\n      _this.ref = ref;\n    };\n\n    _this.nativeEventForPoint = function (_ref2) {\n      var x = _ref2.x,\n          y = _ref2.y;\n\n      var coordinate = _this.leafletElement.layerPointToLatLng([x, y]);\n\n      return {\n        nativeEvent: {\n          position: {\n            x: x,\n            y: y\n          },\n          coordinate: {\n            latitude: coordinate.lat,\n            longitude: coordinate.lng\n          }\n        }\n      };\n    };\n\n    _this.onClick = function (event) {\n      if (_this.props.onPress) {\n        logger.log('onClick', event);\n\n        _this.props.onPress({\n          nativeEvent: {\n            coordinate: {\n              latitude: event.latlng.lat,\n              longitude: event.latlng.lng\n            }\n          }\n        });\n      }\n    };\n\n    _this.onViewportChange = function (_ref3) {\n      var originalEvent = _ref3.originalEvent;\n      if (!_this.isReady) return;\n\n      if (_this.props.onRegionChange) {\n        var region = boundsToRegion(_this.leafletElement.getBounds());\n        logger.log('onViewportChange', originalEvent, region);\n\n        _this.props.onRegionChange(region);\n      }\n\n      if (originalEvent && _this.props.onPanDrag) {\n        var x = originalEvent.layerX,\n            y = originalEvent.layerY;\n        logger.log('onPanDrag');\n\n        _this.props.onPanDrag(_this.nativeEventForPoint({\n          x: x,\n          y: y\n        }));\n      }\n    };\n\n    _this.onViewportChanged = function () {\n      if (!_this.isReady) return;\n\n      if (_this.props.onRegionChangeComplete) {\n        var region = boundsToRegion(_this.leafletElement.getBounds());\n        logger.log('onViewportChanged', event, region);\n\n        _this.props.onRegionChangeComplete(region);\n      }\n    };\n\n    _this.onReady = function () {\n      if (_this._initialCamera) {\n        _this.animateCamera(_this._initialCamera, 0);\n      } else if (_this._initialRegion) {\n        _this.leafletElement.fitBounds(convertRegion(_this._initialRegion));\n      }\n\n      _this._initialCamera = null;\n      _this._initialRegion = null;\n\n      _this.leafletElement.on('move', _this.onViewportChange);\n\n      if (_this.props.onMapReady) {\n        _this.props.onMapReady();\n      }\n    };\n\n    _this.findUser = function () {\n      _this.leafletElement.locate();\n    };\n\n    _this.handleLocationFound = function (_ref4) {\n      var latlng = _ref4.latlng;\n    };\n\n    _this._initialRegion = props.initialRegion;\n    _this._initialCamera = props.initialCamera;\n    return _this;\n  }\n\n  _createClass(_default, [{\n    key: \"setNativeProps\",\n    value: function setNativeProps(_ref5) {\n      var initialRegion = _ref5.initialRegion,\n          props = _objectWithoutProperties(_ref5, [\"initialRegion\"]);\n\n      if (initialRegion !== undefined) {\n        if (this._initialRegion) {\n          this._initialRegion = initialRegion;\n        } else if (initialRegion) {\n          this.leafletElement.fitBounds(convertRegion(initialRegion));\n        }\n      } else {\n        logger.unsupported(props);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.leafletElement.off('move', this.onViewportChange);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          mapPadding = _this$props.mapPadding,\n          region = _this$props.region,\n          camera = _this$props.camera,\n          scrollEnabled = _this$props.scrollEnabled,\n          zoomEnabled = _this$props.zoomEnabled,\n          zoomTapEnabled = _this$props.zoomTapEnabled,\n          zoomControlEnabled = _this$props.zoomControlEnabled,\n          minZoomLevel = _this$props.minZoomLevel,\n          maxZoomLevel = _this$props.maxZoomLevel,\n          style = _this$props.style,\n          onPress = _this$props.onPress;\n      logger.log('render', this.props);\n      var customOptions = {};\n\n      if ('mapPadding' in this.props) {\n        var boundsOptions = paddingToBoundOptions(mapPadding);\n        if (boundsOptions) customOptions.boundsOptions = boundsOptions;\n      }\n\n      var transformProps;\n\n      if (this._initialCamera || this._initialRegion) {\n        transformProps = transformPropsFromCamera({\n          camera: this._initialCamera,\n          region: this._initialRegion\n        });\n      } else if (camera || region) {\n        transformProps = transformPropsFromCamera({\n          camera: camera,\n          region: region\n        });\n      }\n\n      if (!transformProps) {\n        if (this.isReady) {\n          transformProps = {\n            zoom: this.leafletElement.getZoom(),\n            center: this.leafletElement.getCenter()\n          };\n        } else {\n          transformProps = {\n            zoom: DEFAULT_ZOOM,\n            center: DEFAULT_CENTER\n          };\n        }\n      }\n\n      var events = transformMapEvents(this.props);\n\n      if (this.props.customMapStyle) {\n        logger.warn('prop customMapStyle is not supported');\n      }\n\n      return React.createElement(LeafletMap, _extends({}, customOptions, transformProps, events, {\n        touchZoom: zoomEnabled,\n        scrollWheelZoom: zoomEnabled,\n        boxZoom: zoomEnabled,\n        keyboard: zoomEnabled,\n        doubleClickZoom: zoomTapEnabled,\n        zoomControl: zoomControlEnabled,\n        minZoom: minZoomLevel,\n        maxZoom: maxZoomLevel,\n        dragging: scrollEnabled,\n        whenReady: this.onReady,\n        onLocationfound: this.handleLocationFound,\n        onViewportChanged: this.onViewportChanged,\n        ref: this.setRef,\n        style: StyleSheet.flatten([{\n          zIndex: 0\n        }, style]),\n        url: \"https://unpkg.com/leaflet@1.5.1/dist/leaflet.css\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430\n        }\n      }), React.createElement(TileLayer, {\n        attribution: ReactDOMServer.renderToString(React.createElement(Text, {\n          accessibilityRole: \"link\",\n          href: \"http://osm.org/copyright\",\n          style: {\n            fontSize: 11\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 451\n          }\n        }, \"OpenStreetMap\")),\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 449\n        }\n      }), children);\n    }\n  }, {\n    key: \"isReady\",\n    get: function get() {\n      return this.ref && this.ref.ref && this.ref.ref.leafletElement;\n    }\n  }, {\n    key: \"leafletElement\",\n    get: function get() {\n      if (!this.isReady) throw new Error('Cannot perform operation before the component has finished rendering.');\n      return this.ref.ref.leafletElement;\n    }\n  }]);\n\n  return _default;\n}(React.Component);\n\n_default.defaultProps = {\n  scrollEnabled: true,\n  zoomEnabled: true,\n  zoomTapEnabled: true,\n  zoomControlEnabled: true\n};\nexport { _default as default };\n\nfunction transformPropsFromCamera(_ref6) {\n  var camera = _ref6.camera,\n      region = _ref6.region;\n\n  if (camera) {\n    var transformProps = {\n      zoom: DEFAULT_ZOOM,\n      center: DEFAULT_CENTER\n    };\n\n    if ('center' in camera) {\n      transformProps.center = convertCoordinate(camera.center);\n    }\n\n    if ('heading' in camera) transformProps.heading = camera.heading;\n    if ('pitch' in camera) transformProps.pitch = camera.pitch;\n    if ('zoom' in camera) transformProps.zoom = camera.zoom;\n    if ('altitude' in camera) transformProps.altitude = camera.altitude;\n    return transformProps;\n  } else if (region) {\n    return {\n      bounds: convertRegion(region)\n    };\n  } else {\n    return undefined;\n  }\n}\n\nfunction paddingToBoundOptions(edgeInset) {\n  if (!edgeInset) return undefined;\n\n  if (typeof edgeInset === 'number') {\n    return {\n      padding: edgeInset\n    };\n  }\n\n  return {\n    paddingTopLeft: [edgeInset.top, edgeInset.left],\n    paddingBottomRight: [edgeInset.bottom, edgeInset.right]\n  };\n}","map":{"version":3,"sources":["C:/Users/codemaxx/Desktop/iBlood/node_modules/react-native-maps/lib/web/Leaflet/Map.js"],"names":["latLngBounds","boundsForCooords","Marker","LeafletMarker","React","Map","MapView","TileLayer","ReactDOMServer","createLogger","boundsToRegion","convertCoordinate","convertRegion","DEFAULT_CENTER","getCoordinatesForElements","withRemoteStyles","transformMapEvents","LeafletMap","DEFAULT_ZOOM","logger","props","animateToCoordinate","latLng","duration","animateCamera","center","animateToBearing","bearing","warn","animateToViewingAngle","angle","ensureMarkers","markers","output","markerIDs","marker","push","Object","values","markersForIDs","length","log","leafletElement","eachLayer","layer","includes","options","id","fitToElements","animated","ref","features","fitToSuppliedMarkers","edgePadding","ensuredMarkers","coords","fitToCoordinates","coordinates","bounds","map","coord","flyToBounds","animate","getMapBoundaries","northEast","getBounds","getNorthEast","southWest","getSouthWest","latitude","lat","longitude","lng","setMapBoundaries","fitBounds","pointForCoordinate","coordinate","latLngToContainerPoint","coordinateForPoint","point","containerPointToLatLng","getMarkersFrames","onlyVisible","setCamera","camera","getCamera","isReady","Error","getCenter","zoom","getZoom","heading","pitch","setView","pan","animateToRegion","region","setRef","nativeEventForPoint","x","y","layerPointToLatLng","nativeEvent","position","onClick","event","onPress","latlng","onViewportChange","originalEvent","onRegionChange","onPanDrag","layerX","layerY","onViewportChanged","onRegionChangeComplete","onReady","_initialCamera","_initialRegion","on","onMapReady","findUser","locate","handleLocationFound","initialRegion","initialCamera","undefined","unsupported","off","children","mapPadding","scrollEnabled","zoomEnabled","zoomTapEnabled","zoomControlEnabled","minZoomLevel","maxZoomLevel","style","customOptions","boundsOptions","paddingToBoundOptions","transformProps","transformPropsFromCamera","events","customMapStyle","StyleSheet","flatten","zIndex","renderToString","fontSize","Component","defaultProps","altitude","edgeInset","padding","paddingTopLeft","top","left","paddingBottomRight","bottom","right"],"mappings":"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","sourcesContent":["import { latLngBounds as boundsForCooords, Marker as LeafletMarker } from 'leaflet';\r\nimport * as React from 'react';\r\nimport { Map as MapView, TileLayer } from 'react-leaflet';\r\nimport { StyleSheet, Text } from 'react-native';\r\nimport ReactDOMServer from 'react-dom/server';\r\n\r\nimport createLogger from '../utils/createLogger';\r\nimport {\r\n  boundsToRegion,\r\n  convertCoordinate,\r\n  convertRegion,\r\n  DEFAULT_CENTER,\r\n  getCoordinatesForElements,\r\n} from './utils/coordinates';\r\nimport withRemoteStyles from './utils/withRemoteStyles';\r\nimport { transformMapEvents } from './utils/events';\r\n\r\nconst LeafletMap = withRemoteStyles(MapView);\r\nconst DEFAULT_ZOOM = 6;\r\nconst logger = createLogger('Leaflet', 'Map');\r\n\r\n// Leaflet map requires three default values. The TileLayer child, the center coordinate, and the zoom level.\r\n\r\nexport default class extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this._initialRegion = props.initialRegion;\r\n    this._initialCamera = props.initialCamera;\r\n  }\r\n\r\n  setNativeProps({ initialRegion, ...props }) {\r\n    if (initialRegion !== undefined) {\r\n      if (this._initialRegion) {\r\n        this._initialRegion = initialRegion;\r\n      } else if (initialRegion) {\r\n        this.leafletElement.fitBounds(convertRegion(initialRegion));\r\n      }\r\n    } else {\r\n      logger.unsupported(props);\r\n    }\r\n  }\r\n\r\n  animateToCoordinate = (latLng, duration) => {\r\n    this.animateCamera({ center: latLng }, duration);\r\n  };\r\n\r\n  animateToBearing = (bearing, duration) => {\r\n    logger.warn('animateToBearing() is unsupported in Leaflet');\r\n  };\r\n\r\n  animateToViewingAngle = (angle, duration) => {\r\n    logger.warn('animateToViewingAngle() is unsupported in Leaflet');\r\n  };\r\n\r\n  ensureMarkers = markers => {\r\n    let output = [];\r\n\r\n    let markerIDs = [];\r\n    for (const marker of markers) {\r\n      if (typeof marker === 'string') {\r\n        markerIDs.push(marker);\r\n      } else if (marker instanceof LeafletMarker) {\r\n        output.push(marker);\r\n      } else {\r\n        logger.warn('ensureMarkers', 'No valid marker for: ', marker);\r\n      }\r\n    }\r\n\r\n    return [...Object.values(this.markersForIDs(markerIDs)), ...output];\r\n  };\r\n\r\n  markersForIDs = markerIDs => {\r\n    let markers = {};\r\n    if (!markerIDs.length) {\r\n      return markers;\r\n    }\r\n    logger.log('markersForIDs', markerIDs);\r\n    this.leafletElement.eachLayer(layer => {\r\n      if (layer instanceof LeafletMarker && markerIDs.includes(layer.options.id)) {\r\n        logger.log('markersForIDs', 'got marker', layer);\r\n        markers[layer.options.id] = layer;\r\n      }\r\n    });\r\n    return markers;\r\n  };\r\n\r\n  fitToElements = animated => {\r\n    const ref = this.leafletElement;\r\n    const features = [];\r\n    ref.eachLayer(layer => {\r\n      features.push(layer);\r\n    });\r\n    this.fitToSuppliedMarkers(features, 0, animated);\r\n  };\r\n\r\n  fitToSuppliedMarkers = (markers, edgePadding, animated) => {\r\n    const ensuredMarkers = this.ensureMarkers(markers);\r\n    const coords = getCoordinatesForElements(ensuredMarkers);\r\n    logger.log('fitToSuppliedMarkers', 'markers', ensuredMarkers, coords);\r\n    return this.fitToCoordinates(coords, edgePadding, animated);\r\n  };\r\n\r\n  fitToCoordinates = (coordinates, edgePadding, animated) => {\r\n    if (edgePadding) {\r\n      logger.warn('fitToCoordinates() edgePadding is unimplemented');\r\n    }\r\n    const bounds = boundsForCooords(coordinates.map(coord => convertCoordinate(coord)));\r\n    this.leafletElement.flyToBounds(bounds, {\r\n      animate: animated,\r\n      duration: 0.5,\r\n    });\r\n  };\r\n\r\n  getMapBoundaries = () => {\r\n    const northEast = this.leafletElement.getBounds().getNorthEast();\r\n    const southWest = this.leafletElement.getBounds().getSouthWest();\r\n    return {\r\n      northEast: {\r\n        latitude: northEast.lat,\r\n        longitude: northEast.lng,\r\n      },\r\n      southWest: {\r\n        latitude: southWest.lat,\r\n        longitude: southWest.lng,\r\n      },\r\n    };\r\n  };\r\n\r\n  setMapBoundaries = (northEast, southWest) => {\r\n    this.leafletElement.fitBounds([convertCoordinate(northEast), convertCoordinate(southWest)]);\r\n  };\r\n\r\n  // setIndoorActiveLevelIndex = (activeLevelIndex) => {\r\n  //   throw new Error('setIndoorActiveLevelIndex() is unsupported');\r\n  // }\r\n\r\n  // takeSnapshot = (width, height, region, format, quality, result, callback) => {\r\n  //   callback(new Error('takeSnapshot() is unsupported'), null);\r\n  // }\r\n\r\n  // animateToNavigation = (location, bearing, angle, duration) => {\r\n\r\n  // }\r\n\r\n  pointForCoordinate = coordinate => {\r\n    return this.leafletElement.latLngToContainerPoint(convertCoordinate(coordinate));\r\n  };\r\n\r\n  coordinateForPoint = point => {\r\n    const ref = this.leafletElement;\r\n    return ref.containerPointToLatLng(point);\r\n  };\r\n\r\n  getMarkersFrames = onlyVisible => {};\r\n\r\n  setCamera = camera => {\r\n    this.animateCamera(camera, 0);\r\n  };\r\n\r\n  getCamera = () => {\r\n    if (!this.isReady) throw new Error('Leaflet.Map.getCamera(): map is not ready yet');\r\n    const { leafletElement } = this;\r\n    const center = leafletElement.getCenter();\r\n    return {\r\n      center: {\r\n        latitude: center.lat,\r\n        longitude: center.lng,\r\n      },\r\n      zoom: leafletElement.getZoom(),\r\n    };\r\n  };\r\n\r\n  animateCamera = (camera, duration) => {\r\n    const ref = this.leafletElement;\r\n    logger.log('animateCamera', ref, camera, duration);\r\n\r\n    const center = camera.center ? convertCoordinate(camera.center) : ref.getCenter();\r\n\r\n    if (typeof camera.heading === 'number') {\r\n      logger.warn('Camera heading is not supported in Leaflet');\r\n    }\r\n    if (typeof camera.pitch === 'number') {\r\n      logger.warn('Camera pitch is not supported in Leaflet');\r\n    }\r\n\r\n    ref.setView(center, camera.zoom || ref.getZoom(), {\r\n      animate: duration !== 0,\r\n      pan: {\r\n        duration: duration * 0.001,\r\n      },\r\n    });\r\n  };\r\n\r\n  animateToRegion = (region, duration) => {\r\n    const ref = this.leafletElement;\r\n    const bounds = convertRegion(region);\r\n    logger.log('animateToRegion', ref, region, bounds, duration);\r\n    ref.flyToBounds(bounds, {\r\n      animate: duration !== 0,\r\n      duration: duration * 0.001,\r\n    });\r\n  };\r\n\r\n  setRef = ref => {\r\n    this.ref = ref;\r\n  };\r\n\r\n  nativeEventForPoint = ({ x, y }) => {\r\n    const coordinate = this.leafletElement.layerPointToLatLng([x, y]);\r\n    return {\r\n      nativeEvent: {\r\n        position: { x, y },\r\n        coordinate: {\r\n          latitude: coordinate.lat,\r\n          longitude: coordinate.lng,\r\n        },\r\n      },\r\n    };\r\n  };\r\n\r\n  onClick = event => {\r\n    if (this.props.onPress) {\r\n      logger.log('onClick', event);\r\n      this.props.onPress({\r\n        nativeEvent: {\r\n          coordinate: {\r\n            latitude: event.latlng.lat,\r\n            longitude: event.latlng.lng,\r\n          },\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  onViewportChange = ({ originalEvent }) => {\r\n    if (!this.isReady) return;\r\n\r\n    if (this.props.onRegionChange) {\r\n      const region = boundsToRegion(this.leafletElement.getBounds());\r\n      logger.log('onViewportChange', originalEvent, region);\r\n      this.props.onRegionChange(region);\r\n    }\r\n    if (originalEvent && this.props.onPanDrag) {\r\n      const { layerX: x, layerY: y } = originalEvent;\r\n      logger.log('onPanDrag');\r\n      this.props.onPanDrag(this.nativeEventForPoint({ x, y }));\r\n    }\r\n  };\r\n\r\n  onViewportChanged = () => {\r\n    if (!this.isReady) return;\r\n\r\n    if (this.props.onRegionChangeComplete) {\r\n      const region = boundsToRegion(this.leafletElement.getBounds());\r\n\r\n      logger.log('onViewportChanged', event, region);\r\n      this.props.onRegionChangeComplete(region);\r\n    }\r\n  };\r\n\r\n  onReady = () => {\r\n    if (this._initialCamera) {\r\n      this.animateCamera(this._initialCamera, 0);\r\n    } else if (this._initialRegion) {\r\n      this.leafletElement.fitBounds(convertRegion(this._initialRegion));\r\n    }\r\n    this._initialCamera = null;\r\n    this._initialRegion = null;\r\n    this.leafletElement.on('move', this.onViewportChange);\r\n    if (this.props.onMapReady) {\r\n      this.props.onMapReady();\r\n    }\r\n  };\r\n\r\n  get isReady() {\r\n    return this.ref && this.ref.ref && this.ref.ref.leafletElement;\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.leafletElement.off('move', this.onViewportChange);\r\n  }\r\n\r\n  get leafletElement() {\r\n    if (!this.isReady)\r\n      throw new Error('Cannot perform operation before the component has finished rendering.');\r\n    return this.ref.ref.leafletElement;\r\n  }\r\n\r\n  /* \r\n  paddingAdjustmentBehavior\t'always'|'automatic'|'never'\t'never'\tIndicates how/when to affect padding with safe area insets (GoogleMaps in iOS only)\r\n  mapType\tString\t\"standard\"\tThe map type to be displayed. \r\n  - standard: standard road map (default)\r\n  - none: no map Note Not available on MapKit\r\n  - satellite: satellite view\r\n  - hybrid: satellite view with roads and points of interest overlayed\r\n  - terrain: (Android only) topographic view\r\n  - mutedStandard: more subtle, makes markers/lines pop more (iOS 11.0+ only)\r\n  customMapStyle\tArray\t\tAdds custom styling to the map component. See README for more information.\r\n  showsUserLocation\tBoolean\tfalse\tIf true the app will ask for the user's location. NOTE: You need to add NSLocationWhenInUseUsageDescription key in Info.plist to enable geolocation, otherwise it is going to fail silently! You will also need to add an explanation for why you need the users location against NSLocationWhenInUseUsageDescription in Info.plist. Otherwise Apple may reject your app submission.\r\n  userLocationAnnotationTitle\tString\t\tThe title of the annotation for current user location. This only works if showsUserLocation is true. There is a default value My Location set by MapView. Note: iOS only.\r\n  followsUserLocation\tBoolean\tfalse\tIf true the map will focus on the user's location. This only works if showsUserLocation is true and the user has shared their location. Note: iOS only.\r\n  showsMyLocationButton\tBoolean\ttrue\tIf false hide the button to move map to the current user's location.\r\n  showsPointsOfInterest\tBoolean\ttrue\tIf false points of interest won't be displayed on the map.\r\n  showsCompass\tBoolean\ttrue\tIf false compass won't be displayed on the map.\r\n  showsScale\tBoolean\ttrue\tA Boolean indicating whether the map shows scale information. Note: Apple Maps only.\r\n  showsBuildings\tBoolean\ttrue\tA Boolean indicating whether the map displays extruded building information.\r\n  showsTraffic\tBoolean\ttrue\tA Boolean value indicating whether the map displays traffic information.\r\n  showsIndoors\tBoolean\ttrue\tA Boolean indicating whether indoor maps should be enabled.\r\n  showsIndoorLevelPicker\tBoolean\tfalse\tA Boolean indicating whether indoor level picker should be enabled. Note: Google Maps only (either Android or iOS with PROVIDER_GOOGLE).\r\n  rotateEnabled\tBoolean\ttrue\tIf false the user won't be able to pinch/rotate the map.\r\n  pitchEnabled\tBoolean\ttrue\tIf false the user won't be able to adjust the camera’s pitch angle.\r\n  \r\n  camera\tCamera\t\tThe camera view the map should display. If you use this, the region property is ignored.\r\n  initialCamera\tCamera\t\tLike initialRegion, use this prop instead of camera only if you don't want to control the viewport of the map besides the initial camera setting. Changing this prop after the component has mounted will not result in a region change. This is similar to the initialValue prop of a text input.\r\n  initialRegion\tRegion\t\tThe initial region to be displayed by the map. Use this prop instead of region only if you don't want to control the viewport of the map besides the initial region. Changing this prop after the component has mounted will not result in a region change. This is similar to the initialValue prop of a text input.\r\n  mapPadding\tEdgePadding\t\tAdds custom padding to each side of the map. Useful when map elements/markers are obscured. Note Google Maps only.\r\n  zoomEnabled\tBoolean\ttrue\tIf false the user won't be able to pinch/zoom the map.\r\n  zoomTapEnabled\tBoolean\ttrue\tIf false the user won't be able to double tap to zoom the map. Note: But it will greatly decrease delay of tap gesture recognition. Note: Google Maps on iOS only\r\n  zoomControlEnabled\tBoolean\ttrue\tIf false the zoom control at the bottom right of the map won't be visible Note: Android only.\r\n  minZoomLevel\tNumber\t0\tMinimum zoom value for the map, must be between 0 and 20\r\n  maxZoomLevel\tNumber\t20\tMaximum zoom value for the map, must be between 0 and 20\r\n  scrollEnabled\tBoolean\ttrue\tIf false the user won't be able to change the map region being displayed.\r\n\r\n  toolbarEnabled\tBoolean\ttrue\tAndroid only If false will hide 'Navigate' and 'Open in Maps' buttons on marker press\r\n  cacheEnabled\tBoolean\tfalse\tIf true map will be cached and displayed as an image instead of being interactable, for performance usage. Note: Apple Maps only\r\n  moveOnMarkerPress\tBoolean\ttrue\tAndroid only If false the map won't move when a marker is pressed.\r\n  kmlSrc\tstring\t\tThe URL from KML file. Note: Google Maps and Markers only (either Android or iOS with PROVIDER_GOOGLE).\r\n\r\n\r\n  legalLabelInsets\tEdgeInsets\t\tIf set, changes the position of the \"Legal\" label link from the OS default. Note: iOS only.\r\n  compassOffset\tPoint\t\tIf set, changes the position of the compass. Note: iOS Maps only.\r\n\r\n  loadingEnabled\tBoolean\tfalse\tIf true a loading indicator will show while the map is loading.\r\n  loadingIndicatorColor\tColor\t#606060\tSets loading indicator color, default to #606060.\r\n  loadingBackgroundColor\tColor\t#FFFFFF\tSets loading background color, default to #FFFFFF.\r\n */\r\n\r\n  /* \r\n  onKmlReady\tKmlContainer\tCallback that is called once the kml is fully loaded.\r\n  onUserLocationChange\t{ coordinate: Location }\tCallback that is called when the underlying map figures our users current location (coordinate also includes isFromMockProvider value for Android API 18 and above). Make sure showsUserLocation is set to true and that the provider is \"google\".\r\n  onPoiClick\t{ coordinate: LatLng, position: Point, placeId: string, name: string }\tCallback that is called when user click on a POI.\r\n  onLongPress\t{ coordinate: LatLng, position: Point }\tCallback that is called when user makes a \"long press\" somewhere on the map.\r\n  onMarkerPress\t\tCallback that is called when a marker on the map is tapped by the user.\r\n  onMarkerSelect\t\tCallback that is called when a marker on the map becomes selected. This will be called when the callout for that marker is about to be shown. Note: iOS only.\r\n  onMarkerDeselect\t\tCallback that is called when a marker on the map becomes deselected. This will be called when the callout for that marker is about to be hidden. Note: iOS only.\r\n  onCalloutPress\t\tCallback that is called when a callout is tapped by the user.\r\n  onMarkerDragStart\t{ coordinate: LatLng, position: Point }\tCallback that is called when the user initiates a drag on a marker (if it is draggable)\r\n  onMarkerDrag\t{ coordinate: LatLng, position: Point }\tCallback called continuously as a marker is dragged\r\n  onMarkerDragEnd\t{ coordinate: LatLng, position: Point }\tCallback that is called when a drag on a marker finishes. This is usually the point you will want to setState on the marker's coordinate again\r\n  onIndoorLevelActivated\tIndoorLevel\tCallback that is called when a level on indoor building is activated\r\n  onIndoorBuildingFocused  IndoorBuilding\tCallback that is called when a indoor building is focused/unfocused\r\n */\r\n\r\n  static defaultProps = {\r\n    scrollEnabled: true,\r\n    zoomEnabled: true,\r\n    zoomTapEnabled: true,\r\n    zoomControlEnabled: true,\r\n    // minZoomLevel, maxZoomLevel, style, onPress\r\n  };\r\n\r\n  findUser = () => {\r\n    // this.props.showsUserLocation\r\n    this.leafletElement.locate();\r\n  };\r\n\r\n  handleLocationFound = ({ latlng }) => {\r\n    // User location\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      children,\r\n      mapPadding,\r\n      region,\r\n      camera,\r\n      scrollEnabled,\r\n      zoomEnabled,\r\n      zoomTapEnabled,\r\n      zoomControlEnabled,\r\n      minZoomLevel,\r\n      maxZoomLevel,\r\n      style,\r\n      onPress,\r\n    } = this.props;\r\n    // const center = convertCoordinate(initialRegion);\r\n    logger.log('render', this.props);\r\n\r\n    const customOptions = {};\r\n\r\n    if ('mapPadding' in this.props) {\r\n      const boundsOptions = paddingToBoundOptions(mapPadding);\r\n      if (boundsOptions) customOptions.boundsOptions = boundsOptions;\r\n    }\r\n\r\n    let transformProps;\r\n\r\n    if (this._initialCamera || this._initialRegion) {\r\n      transformProps = transformPropsFromCamera({\r\n        camera: this._initialCamera,\r\n        region: this._initialRegion,\r\n      });\r\n    } else if (camera || region) {\r\n      transformProps = transformPropsFromCamera({\r\n        camera,\r\n        region,\r\n      });\r\n    }\r\n\r\n    if (!transformProps) {\r\n      if (this.isReady) {\r\n        transformProps = {\r\n          zoom: this.leafletElement.getZoom(),\r\n          center: this.leafletElement.getCenter(),\r\n        };\r\n      } else {\r\n        transformProps = {\r\n          zoom: DEFAULT_ZOOM,\r\n          center: DEFAULT_CENTER,\r\n        };\r\n      }\r\n    }\r\n\r\n    const events = transformMapEvents(this.props);\r\n\r\n    if (this.props.customMapStyle) {\r\n      logger.warn('prop customMapStyle is not supported');\r\n    }\r\n    return (\r\n      <LeafletMap\r\n        {...customOptions}\r\n        {...transformProps}\r\n        {...events}\r\n        touchZoom={zoomEnabled}\r\n        scrollWheelZoom={zoomEnabled}\r\n        boxZoom={zoomEnabled}\r\n        keyboard={zoomEnabled}\r\n        doubleClickZoom={zoomTapEnabled}\r\n        zoomControl={zoomControlEnabled}\r\n        minZoom={minZoomLevel}\r\n        maxZoom={maxZoomLevel}\r\n        dragging={scrollEnabled}\r\n        whenReady={this.onReady}\r\n        onLocationfound={this.handleLocationFound}\r\n        onViewportChanged={this.onViewportChanged}\r\n        ref={this.setRef}\r\n        style={StyleSheet.flatten([{ zIndex: 0 }, style])}\r\n        url=\"https://unpkg.com/leaflet@1.5.1/dist/leaflet.css\">\r\n        <TileLayer\r\n          attribution={ReactDOMServer.renderToString(\r\n            <Text accessibilityRole=\"link\" href=\"http://osm.org/copyright\" style={{ fontSize: 11 }}>\r\n              OpenStreetMap\r\n            </Text>\r\n          )}\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n        {children}\r\n      </LeafletMap>\r\n    );\r\n  }\r\n}\r\n\r\nfunction transformPropsFromCamera({ camera, region }) {\r\n  if (camera) {\r\n    const transformProps = {\r\n      zoom: DEFAULT_ZOOM,\r\n      center: DEFAULT_CENTER,\r\n    };\r\n    if ('center' in camera) {\r\n      transformProps.center = convertCoordinate(camera.center);\r\n    }\r\n    if ('heading' in camera) transformProps.heading = camera.heading;\r\n    if ('pitch' in camera) transformProps.pitch = camera.pitch;\r\n    if ('zoom' in camera) transformProps.zoom = camera.zoom;\r\n    if ('altitude' in camera) transformProps.altitude = camera.altitude;\r\n    return transformProps;\r\n  } else if (region) {\r\n    return {\r\n      bounds: convertRegion(region),\r\n    };\r\n  } else {\r\n    return undefined;\r\n  }\r\n}\r\n\r\nfunction paddingToBoundOptions(edgeInset) {\r\n  if (!edgeInset) return undefined;\r\n\r\n  if (typeof edgeInset === 'number') {\r\n    return {\r\n      padding: edgeInset,\r\n    };\r\n  }\r\n\r\n  return {\r\n    paddingTopLeft: [edgeInset.top, edgeInset.left],\r\n    paddingBottomRight: [edgeInset.bottom, edgeInset.right],\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}